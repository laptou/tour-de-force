!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var I=U[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,F),I.l=!0,I.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{configurable:!1,enumerable:!0,get:B})},F.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=4)}([function(module,exports,__webpack_require__){eval("module.exports = (__webpack_require__(19))(1062);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3BoYXNlci9zcmMvcGhhc2VyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBsaWJyYXJ5PzFhNmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMTkpKSgxMDYyKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval("var rng = __webpack_require__(18);\nvar bytesToUuid = __webpack_require__(17);\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC92NC5qcz9jNjRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "src/res/img/control-sprites.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2ltZy9jb250cm9sLXNwcml0ZXMucG5nPzEyNTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNyYy9yZXMvaW1nL2NvbnRyb2wtc3ByaXRlcy5wbmdcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/lib/level.ts\nvar GameMode;\r\n(function (GameMode) {\r\n    GameMode["View"] = "view";\r\n    GameMode["Force"] = "force";\r\n    GameMode["Velocity"] = "velocity";\r\n    GameMode["Position"] = "position";\r\n})(GameMode || (GameMode = {}));\r\nvar TileType;\r\n(function (TileType) {\r\n    TileType["Wood"] = "wood";\r\n    TileType["Steel"] = "steel";\r\n    TileType["Aluminum"] = "aluminum";\r\n})(TileType || (TileType = {}));\r\nvar AnnotationType;\r\n(function (AnnotationType) {\r\n    AnnotationType["Text"] = "text";\r\n})(AnnotationType || (AnnotationType = {}));\r\nvar ObjectiveType;\r\n(function (ObjectiveType) {\r\n    ObjectiveType["Type"] = "type";\r\n    ObjectiveType["Velocity"] = "velocity";\r\n    ObjectiveType["Momentum"] = "momentum";\r\n    ObjectiveType["AngularVelocity"] = "angular-velocity";\r\n})(ObjectiveType || (ObjectiveType = {}));\r\nvar GoalType;\r\n(function (GoalType) {\r\n    GoalType[GoalType["Required"] = 0] = "Required";\r\n    GoalType[GoalType["Bonus"] = 1] = "Bonus";\r\n})(GoalType || (GoalType = {}));\r\n\n// EXTERNAL MODULE: delegated ./node_modules/phaser/src/phaser.js from dll-reference library\nvar phaserfrom_dll_reference_library = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/scene/level/banner.ts\n\r\nvar LevelOutcome;\r\n(function (LevelOutcome) {\r\n    LevelOutcome[LevelOutcome["Success"] = 0] = "Success";\r\n    LevelOutcome[LevelOutcome["Failure"] = 1] = "Failure";\r\n})(LevelOutcome || (LevelOutcome = {}));\r\nclass banner_LevelBanner extends phaserfrom_dll_reference_library["GameObjects"].Container {\r\n    constructor(scene, type) {\r\n        super(scene);\r\n        this.bannerType = type;\r\n        this.banner = scene.make.image({\r\n            key: "banners",\r\n            frame: type,\r\n            alpha: 0,\r\n            scale: 0\r\n        });\r\n        this.add(this.banner);\r\n    }\r\n    begin() {\r\n        this.scene.tweens.add({\r\n            targets: this.banner,\r\n            alpha: 1,\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            duration: 1000,\r\n            ease: \'Elastic\',\r\n            easeParams: [1.1, 0.5]\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/util/index.ts\nconst { sqrt, pow, PI } = Math;\r\nfunction last(arr) {\r\n    return arr.length > 0 ? arr[arr.length - 1] : null;\r\n}\r\nfunction promise(anim) {\r\n    return new Promise(resolve => anim.onComplete(resolve));\r\n}\r\nfunction noop() {\r\n    return new Promise(resolve => resolve());\r\n}\r\nfunction inset(rect, amount) {\r\n    return rect.setTo(rect.left + amount, rect.top + amount, rect.width - amount * 2, rect.height - amount * 2);\r\n}\r\nfunction reverseEnum(type) {\r\n    for (const member in type) {\r\n        if (type.hasOwnProperty(member)) {\r\n            type[type[member]] = member;\r\n        }\r\n    }\r\n}\r\nfunction find(arr, predicate) {\r\n    const index = arr.findIndex(predicate);\r\n    if (index !== -1)\r\n        return arr[index];\r\n    else\r\n        return null;\r\n}\r\n\n// CONCATENATED MODULE: ./src/util/math.ts\nconst { pow: math_pow, sqrt: math_sqrt, hypot, abs } = Math;\r\nfunction square(n) {\r\n    return n * n;\r\n}\r\nfunction clamp(min, x, max) {\r\n    return Math.min(Math.max(x, min), max);\r\n}\r\nfunction dist(a, b) {\r\n    if (typeof a === "number" && typeof b === "number")\r\n        return abs(a - b);\r\n    if (typeof a === "number" && typeof b === "object")\r\n        return abs(a - Vector.len(b));\r\n    if (typeof a === "object" && typeof b === "number")\r\n        return abs(Vector.len(a) - b);\r\n    if (typeof a === "object" && typeof b === "object")\r\n        return Vector.dist(a, b);\r\n    throw new Error("Operands must both be of the same type!");\r\n}\r\n// tslint:disable:no-use-before-declare\r\nclass Vector {\r\n    static get zero() { return new Vector(0, 0); }\r\n    /**\r\n     * Returns a < b.\r\n     */\r\n    static lt(a, b) {\r\n        if (typeof a === "number")\r\n            return a < Vector.len(b);\r\n        return a.x < b.x && a.y < b.y;\r\n    }\r\n    /**\r\n     * Returns a > b.\r\n     */\r\n    static gt(a, b) {\r\n        if (typeof a === "number")\r\n            return a > Vector.len(b);\r\n        return a.x > b.x && a.y > b.y;\r\n    }\r\n    static lensq(v) {\r\n        return Vector.dot(v, v);\r\n    }\r\n    static dot(a, b) {\r\n        return a.x * b.x + a.y * b.y;\r\n    }\r\n    static len(v) {\r\n        return hypot(v.x, v.y);\r\n    }\r\n    static dist(a, b) {\r\n        return Vector.sub(a, b).length();\r\n    }\r\n    static div(a, b) {\r\n        return typeof b === "number" ?\r\n            new Vector(a.x / b, a.y / b) :\r\n            new Vector(a.x / b.x, a.y / b.y);\r\n    }\r\n    static mult(a, b) {\r\n        return typeof b === "number" ?\r\n            new Vector(a.x * b, a.y * b) :\r\n            new Vector(a.x * b.x, a.y * b.y);\r\n    }\r\n    static sub(a, b) {\r\n        if (typeof b === "number") {\r\n            const len = Vector.len(a);\r\n            return new Vector(a.x - b * a.x / len, a.y - b * a.y / len);\r\n        }\r\n        return new Vector(a.x - b.x, a.y - b.y);\r\n    }\r\n    static add(a, b) {\r\n        if (typeof b === "number") {\r\n            const len = Vector.len(a);\r\n            return new Vector(a.x + b * a.x / len, a.y + b * a.y / len);\r\n        }\r\n        return new Vector(a.x + b.x, a.y + b.y);\r\n    }\r\n    static normalize(v) {\r\n        const l = Vector.len(v);\r\n        return new Vector(v.x / l, v.y / l);\r\n    }\r\n    constructor(x, y) {\r\n        if (typeof x === "number") {\r\n            this.x = x;\r\n            this.y = typeof y === "number" ? y : x;\r\n        }\r\n        else {\r\n            this.x = x.x;\r\n            this.y = x.y;\r\n        }\r\n    }\r\n    length() { return Vector.len(this); }\r\n    normalized() { return Vector.normalize(this); }\r\n    plus(v) { return Vector.add(this, v); }\r\n    minus(v) { return Vector.sub(this, v); }\r\n    times(v) { return Vector.mult(this, v); }\r\n    over(v) { return Vector.div(this, v); }\r\n    dot(v) { return Vector.dot(this, v); }\r\n    ray() { return new Ray(Vector.zero, this); }\r\n    toString() { return `⟨${this.x}, ${this.y}⟩`; }\r\n    toFixed(p) { return `⟨${this.x.toFixed(p)}, ${this.y.toFixed(p)}⟩`; }\r\n    toPrecision(p) { return `⟨${this.x.toPrecision(p)}, ${this.y.toPrecision(p)}⟩`; }\r\n    toExponential(p) { return `⟨${this.x.toExponential(p)}, ${this.y.toExponential(p)}⟩`; }\r\n}\r\nclass Ray {\r\n    constructor(source, direction) {\r\n        this.source = { x: source.x, y: source.y };\r\n        this.direction = { x: direction.x, y: direction.y };\r\n    }\r\n    get x1() { return this.source.x; }\r\n    get y1() { return this.source.y; }\r\n    get x2() { return this.x1 + this.direction.x; }\r\n    get y2() { return this.y1 + this.direction.y; }\r\n    get end() { return Vector.add(this.source, this.direction); }\r\n    ;\r\n    get length() { return Vector.len(this.direction); }\r\n    get angle() { return Math.atan2(this.direction.y, this.direction.x); }\r\n    get unit() { return new Ray(this.source, Vector.div(this.direction, this.length)); }\r\n    plus(x) {\r\n        if (typeof x === "number")\r\n            return new Ray(this.source, Vector.add(this.direction, Vector.normalize(this.direction).times(x)));\r\n        return new Ray(this.source, Vector.add(this.direction, x));\r\n    }\r\n    times(x) {\r\n        return new Ray(this.source, Vector.mult(this.direction, x));\r\n    }\r\n}\r\nclass Size {\r\n    static from(v) {\r\n        return new Size(v.x, v.y);\r\n    }\r\n    constructor(width, height) {\r\n        if (typeof width === "number") {\r\n            this.width = width;\r\n            this.height = typeof height === "number" ? height : width;\r\n        }\r\n        else {\r\n            this.width = width.width;\r\n            this.height = width.height;\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/util/measurement.ts\n\r\n\r\nconst { PI: measurement_PI, pow: measurement_pow } = Math;\r\nfunction measurement_abs(x) {\r\n    if (typeof x === "number")\r\n        return Math.abs(x);\r\n    else\r\n        return new Measurement(Math.abs(x.value), x.unit);\r\n}\r\nfunction precision(p) {\r\n    return (tags, ...keys) => {\r\n        let str = tags[0];\r\n        for (let i = 1; i < tags.length; i++) {\r\n            str += keys[i - 1].toPrecision(p);\r\n            str += tags[i];\r\n        }\r\n        return str;\r\n    };\r\n}\r\nfunction fixed(p) {\r\n    return (tags, ...keys) => {\r\n        let str = tags[0];\r\n        for (let i = 1; i < tags.length; i++) {\r\n            let num = keys[i - 1];\r\n            if (!(num instanceof Vector) && typeof p === "number" && measurement_abs(num).valueOf() < measurement_pow(10, -p))\r\n                num = measurement_abs(num); // fixes -0.0\r\n            str += num.toFixed(p);\r\n            str += tags[i];\r\n        }\r\n        return str;\r\n    };\r\n}\r\nvar Distance;\r\n(function (Distance) {\r\n    Distance["Pixel"] = "px";\r\n    Distance["Meter"] = "m";\r\n})(Distance || (Distance = {}));\r\nvar Time;\r\n(function (Time) {\r\n    Time["Second"] = "s";\r\n    Time["Step"] = "step";\r\n})(Time || (Time = {}));\r\nvar Force;\r\n(function (Force) {\r\n    Force["Newton"] = "N";\r\n})(Force || (Force = {}));\r\nvar Mass;\r\n(function (Mass) {\r\n    Mass["Kilogram"] = "kg";\r\n})(Mass || (Mass = {}));\r\nvar Angle;\r\n(function (Angle) {\r\n    Angle["Degree"] = "\\u00B0";\r\n    Angle["Radian"] = "rad";\r\n})(Angle || (Angle = {}));\r\nreverseEnum(Distance);\r\nreverseEnum(Time);\r\nreverseEnum(Force);\r\nreverseEnum(Mass);\r\nreverseEnum(Angle);\r\nclass Unit {\r\n    constructor(num, den) {\r\n        this.numerator = typeof num === "string" ? [num] : num.sort();\r\n        this.denominator = typeof den === "string" ? [den] : (den ? den.sort() : []);\r\n    }\r\n    expanded() {\r\n        const [num, den] = [[...this.numerator], [...this.denominator]];\r\n        const expand = (n, d) => {\r\n            for (const u of [...n]) {\r\n                let ni = n.indexOf(u);\r\n                if (ni === -1)\r\n                    continue;\r\n                switch (u) {\r\n                    case Force.Newton:\r\n                        n.splice(ni, 1, Mass.Kilogram, Distance.Meter);\r\n                        d.push(Time.Second, Time.Second);\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n        expand(num, den);\r\n        expand(den, num);\r\n        return new Unit(num, den);\r\n    }\r\n    simplified() {\r\n        const [num, den] = [[...this.numerator], [...this.denominator]];\r\n        for (const u of [...num, ...den]) {\r\n            let ni = num.indexOf(u);\r\n            let di = den.indexOf(u);\r\n            while (ni !== -1 && di !== -1) {\r\n                num.splice(ni, 1);\r\n                den.splice(di, 1);\r\n                ni = num.indexOf(u);\r\n                di = den.indexOf(u);\r\n            }\r\n        }\r\n        const simplify = (n, d) => {\r\n            let found = false;\r\n            do {\r\n                found = false;\r\n                if (n.indexOf(Mass.Kilogram) !== -1 &&\r\n                    n.indexOf(Distance.Meter) !== -1 &&\r\n                    d.indexOf(Time.Second) !== -1 &&\r\n                    d.indexOf(Time.Second) !== d.lastIndexOf(Time.Second)) {\r\n                    n.splice(n.indexOf(Mass.Kilogram), 1);\r\n                    n.splice(n.indexOf(Distance.Meter), 1);\r\n                    d.splice(n.indexOf(Time.Second), 1);\r\n                    d.splice(n.indexOf(Time.Second), 1);\r\n                    n.push(Force.Newton);\r\n                    found = true;\r\n                }\r\n            } while (found);\r\n        };\r\n        simplify(num, den);\r\n        simplify(den, num);\r\n        return new Unit(num, den);\r\n    }\r\n    toString() {\r\n        let str = "";\r\n        for (let ni = 0; ni < this.numerator.length; ni++) {\r\n            if (ni > 0) {\r\n                if (this.numerator[ni] === this.numerator[ni - 1]) {\r\n                    str += "²";\r\n                    continue;\r\n                }\r\n                str += " × ";\r\n            }\r\n            str += this.numerator[ni];\r\n        }\r\n        for (let di = 0; di < this.denominator.length; di++) {\r\n            if (di > 0 && this.denominator[di] === this.denominator[di - 1]) {\r\n                str += "²";\r\n                continue;\r\n            }\r\n            str += " / ";\r\n            str += this.denominator[di];\r\n        }\r\n        return str;\r\n    }\r\n    times(other) { return Unit.mult(this, other); }\r\n    over(other) { return Unit.div(this, other); }\r\n    static mult(u1, u2) {\r\n        u1 = u1.expanded();\r\n        u2 = u2.expanded();\r\n        return new Unit([...u1.numerator, ...u2.numerator], [...u1.denominator, ...u2.denominator])\r\n            .simplified();\r\n    }\r\n    static div(u1, u2) {\r\n        u1 = u1.expanded();\r\n        u2 = u2.expanded();\r\n        return new Unit([...u1.numerator, ...u2.denominator], [...u1.denominator, ...u2.numerator])\r\n            .simplified();\r\n    }\r\n}\r\nUnit.scalar = new Unit([]);\r\n(function (Force) {\r\n    Force.PixelNewton = new Unit([Mass.Kilogram, Distance.Pixel], [Time.Second, Time.Second]);\r\n})(Force || (Force = {}));\r\nvar Velocity;\r\n(function (Velocity) {\r\n    Velocity.PixelsPerStep = new Unit(Distance.Pixel, Time.Step);\r\n    Velocity.MetersPerSecond = new Unit(Distance.Meter, Time.Second);\r\n})(Velocity || (Velocity = {}));\r\nvar AngularVelocity;\r\n(function (AngularVelocity) {\r\n    AngularVelocity.DegreesPerStep = new Unit(Angle.Degree, Time.Step);\r\n    AngularVelocity.DegreesPerSecond = new Unit(Angle.Degree, Time.Second);\r\n    AngularVelocity.RadiansPerStep = new Unit(Angle.Radian, Time.Step);\r\n    AngularVelocity.RadiansPerSecond = new Unit(Angle.Radian, Time.Second);\r\n})(AngularVelocity || (AngularVelocity = {}));\r\nvar Momentum;\r\n(function (Momentum) {\r\n    Momentum.KilogramMetersPerSecond = new Unit([Mass.Kilogram, Distance.Meter], [Time.Second]);\r\n})(Momentum || (Momentum = {}));\r\nvar convert;\r\n(function (convert) {\r\n    function angle(value, from, to) {\r\n        if (from === to)\r\n            return value;\r\n        // base unit is radians\r\n        switch (from) {\r\n            case Angle.Degree:\r\n                value = value / 180 * measurement_PI;\r\n                break;\r\n        }\r\n        switch (to) {\r\n            case Angle.Degree:\r\n                return value * 180 / measurement_PI;\r\n            case Angle.Radian:\r\n                return value;\r\n        }\r\n    }\r\n    convert.angle = angle;\r\n    function distance(value, from, to) {\r\n        if (from === to)\r\n            return value;\r\n        // base unit is meters\r\n        switch (from) {\r\n            case Distance.Pixel:\r\n                value = value / 100;\r\n                break;\r\n        }\r\n        switch (to) {\r\n            case Distance.Pixel:\r\n                return value * 100;\r\n            case Distance.Meter:\r\n                return value;\r\n        }\r\n    }\r\n    convert.distance = distance;\r\n    function time(value, from, to) {\r\n        if (from === to)\r\n            return value;\r\n        // base unit is seconds\r\n        switch (from) {\r\n            case Time.Step:\r\n                value = value / 60;\r\n                break;\r\n        }\r\n        switch (to) {\r\n            case Time.Step:\r\n                return value * 60;\r\n            case Time.Second:\r\n                return value;\r\n        }\r\n    }\r\n    convert.time = time;\r\n    function auto(value, from, to) {\r\n        if (!possible(from, to))\r\n            throw new Error(`Incompatible units: ${from}, ${to}`);\r\n        if (from === to)\r\n            return value;\r\n        if (from in Angle)\r\n            return angle(value, from, to);\r\n        if (from in Distance)\r\n            return distance(value, from, to);\r\n        if (from in Time)\r\n            return time(value, from, to);\r\n        return value;\r\n    }\r\n    convert.auto = auto;\r\n    function possible(from, to) {\r\n        if (from === to)\r\n            return true;\r\n        if (from in Angle && to in Angle)\r\n            return true;\r\n        if (from in Distance && to in Distance)\r\n            return true;\r\n        if (from in Time && to in Time)\r\n            return true;\r\n        return false;\r\n    }\r\n    convert.possible = possible;\r\n})(convert || (convert = {}));\r\nclass Measurement {\r\n    // tslint:disable-next-line:no-shadowed-variable\r\n    constructor(value, unit) {\r\n        this.value = value;\r\n        this.unit = unit instanceof Unit ? unit : new Unit([unit]);\r\n    }\r\n    toString(radix) {\r\n        // tslint:disable-next-line:prefer-template\r\n        return `${this.value.toString(radix)} ${this.unit}`;\r\n    }\r\n    toFixed(fractionDigits) {\r\n        // tslint:disable-next-line:prefer-template\r\n        return `${this.value.toFixed(fractionDigits)} ${this.unit}`;\r\n    }\r\n    toExponential(fractionDigits) {\r\n        // tslint:disable-next-line:prefer-template\r\n        return `${this.value.toExponential(fractionDigits)} ${this.unit}`;\r\n    }\r\n    // tslint:disable-next-line:no-shadowed-variable\r\n    toPrecision(precision) {\r\n        // tslint:disable-next-line:prefer-template\r\n        return `${this.value.toPrecision(precision)} ${this.unit}`;\r\n    }\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n    toLocaleString(locales, options) {\r\n        throw new Error("Method not implemented.");\r\n    }\r\n    times(m) {\r\n        if (typeof m === "number")\r\n            return new Measurement(this.value * m, this.unit);\r\n        return new Measurement(this.value * m.value, Unit.mult(this.unit, m.unit));\r\n    }\r\n    over(m) {\r\n        if (typeof m === "number")\r\n            return new Measurement(this.value * m, this.unit);\r\n        return new Measurement(this.value / m.value, Unit.div(this.unit, m.unit));\r\n    }\r\n    to(target, denominator) {\r\n        let val = this.value;\r\n        const unit = this.unit.expanded();\r\n        const num = [...unit.numerator];\r\n        const den = [...unit.denominator];\r\n        if (!(target instanceof Unit))\r\n            target = new Unit(target, denominator);\r\n        const targetExpanded = target.expanded();\r\n        const targetNum = [...targetExpanded.numerator];\r\n        const targetDen = [...targetExpanded.denominator];\r\n        for (const numUnit of num) {\r\n            const i = targetNum.findIndex(n => convert.possible(n, numUnit));\r\n            const [targetNumUnit] = targetNum.splice(i, 1);\r\n            val = convert.auto(val, numUnit, targetNumUnit);\r\n        }\r\n        for (const denUnit of den) {\r\n            const i = targetDen.findIndex(d => convert.possible(d, denUnit));\r\n            const [targetDenUnit] = targetDen.splice(i, 1);\r\n            val = 1 / convert.auto(1 / val, denUnit, targetDenUnit);\r\n        }\r\n        return new Measurement(val, target);\r\n    }\r\n}\r\nclass measurement_VectorMeasurement extends Vector {\r\n    static get zero() { return new measurement_VectorMeasurement(0, 0, Unit.scalar); }\r\n    constructor(x, y, u) {\r\n        if (u) {\r\n            super(x, y);\r\n            this.unit = u instanceof Unit ? u : new Unit(u);\r\n        }\r\n        else {\r\n            super(x);\r\n            this.unit = y instanceof Unit ? y : new Unit(y);\r\n        }\r\n    }\r\n    toString() {\r\n        return `⟨${this.x}, ${this.y}⟩ ${this.unit}`;\r\n    }\r\n    toFixed(p) {\r\n        return fixed(p) `⟨${this.x}, ${this.y}⟩ ` + this.unit.toString();\r\n    }\r\n    toPrecision(p) {\r\n        return precision(p) `⟨${this.x}, ${this.y}⟩ ` + this.unit.toString();\r\n    }\r\n    toExponential(p) {\r\n        return `⟨${this.x.toExponential(p)}, ${this.y.toExponential(p)}⟩ ${this.unit}`;\r\n    }\r\n    to(target, denominator) {\r\n        let unit;\r\n        if (target instanceof Unit)\r\n            unit = target;\r\n        else {\r\n            if (denominator)\r\n                unit = new Unit([target], [denominator]);\r\n            else\r\n                unit = new Unit([target]);\r\n        }\r\n        const xm = new Measurement(this.x, this.unit).to(unit);\r\n        const ym = new Measurement(this.y, this.unit).to(unit);\r\n        return new measurement_VectorMeasurement(xm.value, ym.value, unit);\r\n    }\r\n    magnitude() {\r\n        return new Measurement(super.length(), this.unit);\r\n    }\r\n    times(v) {\r\n        if (v instanceof Measurement)\r\n            return new measurement_VectorMeasurement(super.times(v.value), this.unit.times(v.unit));\r\n        if (v instanceof measurement_VectorMeasurement)\r\n            return new measurement_VectorMeasurement(super.times(v), this.unit.times(v.unit));\r\n        return new measurement_VectorMeasurement(super.times(v), this.unit);\r\n    }\r\n    over(v) {\r\n        if (v instanceof Measurement)\r\n            return new measurement_VectorMeasurement(super.over(v.value), this.unit.over(v.unit));\r\n        if (v instanceof measurement_VectorMeasurement)\r\n            return new measurement_VectorMeasurement(super.over(v), this.unit.over(v.unit));\r\n        return new measurement_VectorMeasurement(super.over(v), this.unit);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/level/tile.ts\n\r\n\r\nconst TileStats = {\r\n    [TileType.Wood]: {\r\n        frame: 5,\r\n        mass: 75,\r\n    },\r\n    [TileType.Steel]: {\r\n        frame: 6,\r\n        mass: 120\r\n    },\r\n    [TileType.Aluminum]: {\r\n        frame: 7,\r\n        mass: 100\r\n    }\r\n};\r\nclass tile_Tile extends Phaser.GameObjects.Sprite {\r\n    constructor(scene, config) {\r\n        const { frame, mass } = TileStats[config.type];\r\n        super(scene, config ? config.x * 32 || 0 : 0, config ? config.y * 32 || 0 : 0, "sprites", frame);\r\n        const matterObj = scene.matter.add.gameObject(this, {\r\n            chamfer: { radius: 16 },\r\n            mass,\r\n            inertia: !config.rotation ? Infinity : undefined,\r\n            friction: config.friction || 0,\r\n            frictionAir: 0,\r\n            frictionStatic: 0,\r\n            restitution: config.elastic ? 1 : 0,\r\n        });\r\n        if (config.velocity) {\r\n            const { x, y } = new measurement_VectorMeasurement(config.velocity, Velocity.MetersPerSecond).to(Velocity.PixelsPerStep);\r\n            matterObj.setVelocity(x, y);\r\n        }\r\n        matterObj.type = "tile";\r\n        matterObj.setInteractive();\r\n        this.tileType = config.type;\r\n        this.allowControl = typeof config.control === "boolean" ? config.control : false;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/config.ts\nvar Text;\r\n(function (Text) {\r\n    Text.Font = {\r\n        Normal: "Clear Sans",\r\n        Display: "Montserrat"\r\n    };\r\n    Text.Header = {\r\n        fontFamily: Text.Font.Display,\r\n        fontStyle: "bold",\r\n        fontSize: 24,\r\n        fill: "black"\r\n    };\r\n    Text.Display = {\r\n        Light: {\r\n            fontFamily: Text.Font.Display,\r\n            fontSize: 16,\r\n            fill: "black"\r\n        },\r\n        Dark: {\r\n            fontFamily: Text.Font.Display,\r\n            fontSize: 16,\r\n            fill: "white"\r\n        }\r\n    };\r\n    Text.Normal = {\r\n        Light: {\r\n            fontFamily: Text.Font.Normal,\r\n            fontSize: 16,\r\n            fill: "black"\r\n        },\r\n        Dark: {\r\n            fontFamily: Text.Font.Normal,\r\n            fontSize: 16,\r\n            fill: "white"\r\n        }\r\n    };\r\n    Text.Small = {\r\n        Light: {\r\n            fontFamily: Text.Font.Normal,\r\n            fontSize: 13,\r\n            fill: "black"\r\n        },\r\n        Dark: {\r\n            fontFamily: Text.Font.Normal,\r\n            fontSize: 13,\r\n            fill: "white"\r\n        }\r\n    };\r\n})(Text || (Text = {}));\r\n\n// CONCATENATED MODULE: ./src/scene/level/goal.ts\n\r\n\r\n\r\n\r\n\r\n\r\nclass goal_Goal extends Phaser.GameObjects.Container {\r\n    constructor(scene, config) {\r\n        super(scene);\r\n        this._completed = false;\r\n        this.tiles = [];\r\n        this.objectives = config.objectives;\r\n        let { x, y } = Vector.mult({ x: config.x, y: config.y }, 32);\r\n        let { x: width, y: height } = Vector.mult({ x: config.width, y: config.height }, 32);\r\n        this.setPosition(x, y);\r\n        this.background = new Phaser.GameObjects.TileSprite(scene, 0, 0, width, height, "sprites", 13);\r\n        this.background.tint = 0xFFAAAA;\r\n        this.add(this.background);\r\n        const border = scene.make.graphics({}, false)\r\n            .lineStyle(2, 0x000000, 0.5)\r\n            .fillStyle(0x000000, 0.25)\r\n            .strokeRect(-width / 2 + 4, -height / 2 + 4, width - 8, height - 8);\r\n        this.add(border);\r\n        const typeObjective = find(this.objectives, o => o.type === ObjectiveType.Type);\r\n        if (typeObjective) {\r\n            const tileImage = scene.make.image({\r\n                key: "sprites",\r\n                frame: TileStats[typeObjective.target].frame,\r\n                alpha: 0.5\r\n            });\r\n            this.add(tileImage);\r\n        }\r\n        const lines = [];\r\n        for (const o of this.objectives) {\r\n            let variable = "";\r\n            let unit = Unit.scalar;\r\n            switch (o.type) {\r\n                case ObjectiveType.Type:\r\n                    continue;\r\n                case ObjectiveType.Velocity:\r\n                    variable = "v";\r\n                    unit = Velocity.MetersPerSecond;\r\n                    break;\r\n                case ObjectiveType.Momentum:\r\n                    variable = "ρ";\r\n                    unit = Momentum.KilogramMetersPerSecond;\r\n                    break;\r\n                case ObjectiveType.AngularVelocity:\r\n                    variable = "ω";\r\n                    unit = AngularVelocity.RadiansPerSecond;\r\n                    break;\r\n            }\r\n            if (typeof o.target === "number") // number\r\n                lines.push(`${variable} = ${new Measurement(o.target, unit).toPrecision(3)}`);\r\n            else if ("x" in o.target) // vector\r\n                lines.push(`${variable} = ${new measurement_VectorMeasurement(o.target, unit).toPrecision(1)}`);\r\n            else // min and max\r\n             {\r\n                let line = variable;\r\n                if (typeof o.target.maximum === "number")\r\n                    line = `${line} < ${new Measurement(o.target.maximum, unit).toPrecision(3)}`;\r\n                if (typeof o.target.maximum === "object")\r\n                    line = `${line} < ${new measurement_VectorMeasurement(o.target.maximum, unit).toPrecision(1)}`;\r\n                if (typeof o.target.minimum === "number")\r\n                    line = `${new Measurement(o.target.minimum, unit).toPrecision(3)} < ${line}`;\r\n                if (typeof o.target.minimum === "object")\r\n                    line = `${new measurement_VectorMeasurement(o.target.minimum, unit).toPrecision(1)} < ${line}`;\r\n                lines.push(line);\r\n            }\r\n        }\r\n        const description = scene.make.text({\r\n            style: Object.assign({ align: "center" }, Text.Header),\r\n            alpha: 0.7,\r\n            origin: 0.5,\r\n            text: lines.join("\\n")\r\n        });\r\n        description.setScale((width - 32) / description.width);\r\n        this.add(description);\r\n        const body = scene.matter.add.gameObject(this, {\r\n            isStatic: true,\r\n            isSensor: true,\r\n            shape: {\r\n                type: "rectangle",\r\n                width,\r\n                height\r\n            }\r\n        });\r\n        const world = body.world;\r\n        world.on("collisionstart", this.collisionstart, this);\r\n        world.on("collisionactive", this.collisionactive, this);\r\n        world.on("afterupdate", this.afterupdate, this);\r\n        world.on("collisionend", this.collisionend, this);\r\n    }\r\n    get completed() { return this._completed; }\r\n    set completed(value) {\r\n        const old = this._completed;\r\n        this._completed = value;\r\n        this.background.tint = value ? 0xAAFFAA : 0xFFAAAA;\r\n        if (old !== value)\r\n            this.emit("update:completed", value);\r\n    }\r\n    meetsObjectives(tile) {\r\n        const body = tile.body;\r\n        const bounds = this.body.bounds;\r\n        const epsilon = 10; // these are pixels, so ε = 1 is fine\r\n        const within = body.vertices.every(v => v.x <= bounds.max.x + epsilon && bounds.min.x <= v.x + epsilon &&\r\n            v.y <= bounds.max.y + epsilon && bounds.min.y <= v.y + epsilon);\r\n        return within && this.objectives.every(o => {\r\n            let quantity;\r\n            switch (o.type) {\r\n                case ObjectiveType.Type:\r\n                    return o.target === tile.tileType;\r\n                case ObjectiveType.Velocity:\r\n                    quantity =\r\n                        new measurement_VectorMeasurement(body.velocity, Velocity.PixelsPerStep)\r\n                            .to(Velocity.MetersPerSecond);\r\n                    break;\r\n                case ObjectiveType.Momentum:\r\n                    quantity =\r\n                        new measurement_VectorMeasurement(body.velocity, Velocity.PixelsPerStep)\r\n                            .to(Velocity.MetersPerSecond)\r\n                            .times(new Measurement(body.mass, Mass.Kilogram));\r\n                    break;\r\n                case ObjectiveType.AngularVelocity:\r\n                    quantity =\r\n                        new Measurement(body.angularVelocity, AngularVelocity.DegreesPerStep)\r\n                            .to(AngularVelocity.RadiansPerSecond)\r\n                            .valueOf();\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n            if (typeof o.target === "number" || "x" in o.target) {\r\n                return dist(quantity, o.target) < 0.05;\r\n            }\r\n            else {\r\n                // min and max\r\n                if (typeof quantity === "object") {\r\n                    if (typeof o.target.maximum !== "undefined")\r\n                        if (Vector.lt(o.target.maximum, quantity))\r\n                            return false;\r\n                    if (typeof o.target.minimum !== "undefined")\r\n                        if (Vector.gt(o.target.minimum, quantity))\r\n                            return false;\r\n                }\r\n                else {\r\n                    if (typeof o.target.maximum === "number" && o.target.maximum < quantity)\r\n                        return false;\r\n                    if (typeof o.target.maximum === "object" && Vector.len(o.target.maximum) < quantity)\r\n                        return false;\r\n                    if (typeof o.target.minimum === "number" && o.target.minimum > quantity)\r\n                        return false;\r\n                    if (typeof o.target.minimum === "object" && Vector.len(o.target.minimum) > quantity)\r\n                        return false;\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    collisionstart(event, a, b) {\r\n        if (this.completed)\r\n            return;\r\n        if (a !== this.body && b !== this.body)\r\n            return;\r\n        let me = a === this.body ? a : b, them = b === this.body ? a : b;\r\n        const tile = them.gameObject;\r\n        if (tile instanceof tile_Tile) {\r\n            if (this.meetsObjectives(tile)) {\r\n                this.completed = true;\r\n            }\r\n            else {\r\n                this.tiles.push(tile);\r\n            }\r\n        }\r\n    }\r\n    collisionactive(event, a, b) {\r\n        if (this.completed)\r\n            return;\r\n        if (a !== this.body && b !== this.body)\r\n            return;\r\n        let me = a === this.body ? a : b, them = b === this.body ? a : b;\r\n        const tile = them.gameObject;\r\n        if (tile instanceof tile_Tile) {\r\n            if (this.meetsObjectives(tile)) {\r\n                this.completed = true;\r\n            }\r\n        }\r\n    }\r\n    collisionend(event, a, b) {\r\n        if (a !== this.body && b !== this.body)\r\n            return;\r\n        let me = a === this.body ? a : b, them = b === this.body ? a : b;\r\n        const tile = them.gameObject;\r\n        if (tile instanceof tile_Tile) {\r\n            this.tiles.splice(this.tiles.indexOf(tile), 1);\r\n        }\r\n    }\r\n    afterupdate() {\r\n        if (!this.tiles.length) {\r\n            this.completed = false;\r\n            return;\r\n        }\r\n        for (const tile of this.tiles) {\r\n            if (this.meetsObjectives(tile)) {\r\n                this.completed = true;\r\n                return;\r\n            }\r\n        }\r\n        this.completed = false;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/level/selector.ts\n\r\n\r\n\r\n\r\nclass selector_VectorLevelHudSelector extends Phaser.GameObjects.Container {\r\n    constructor(hud, config) {\r\n        super(hud.scene);\r\n        this.scale = 1;\r\n        this.dirty = false;\r\n        this.scene = hud.scene;\r\n        this.hud = hud;\r\n        this.mode = config.mode;\r\n        this.unit = config.unit;\r\n        this.show = config.show;\r\n        this.ray = new Ray({ x: config.x, y: config.y }, Vector.zero);\r\n        if (typeof config.scale === "number")\r\n            this.scale = config.scale;\r\n        const label = {\r\n            x: config.x,\r\n            y: config.y,\r\n            style: Object.assign({ fontWeight: "bold", backgroundColor: "#111111" }, Text.Normal.Dark),\r\n            origin: 0.5,\r\n            padding: 5,\r\n            alpha: 0\r\n        };\r\n        this.labelX = this.scene.make.text(label).setOrigin(0.5);\r\n        this.labelY = this.scene.make.text(label).setOrigin(0.5);\r\n        this.add(this.labelX);\r\n        this.add(this.labelY);\r\n    }\r\n    get state() {\r\n        return this.scene.state;\r\n    }\r\n    query() {\r\n        if (!this.ray)\r\n            return measurement_VectorMeasurement.zero;\r\n        return new measurement_VectorMeasurement(Vector.mult(this.ray.direction, this.scale), this.unit);\r\n    }\r\n    move(x, y) {\r\n        if (this.ray) {\r\n            let d = Vector.sub({ x, y }, this.ray.source);\r\n            let dlen = d.length();\r\n            d = d.times(Math.min(1, 300 / dlen));\r\n            this.ray.direction = d;\r\n            const offset = Vector.div(d, 2);\r\n            const source = this.ray.source;\r\n            const alpha = Math.min(1, dlen / 50);\r\n            const vec = this.query();\r\n            if (this.labelX) {\r\n                this.labelX.setText(new Measurement(vec.x, vec.unit).toPrecision(3));\r\n                this.labelX.setPosition(source.x + offset.x, source.y);\r\n                this.labelX.setAlpha(alpha);\r\n            }\r\n            if (this.labelY) {\r\n                this.labelY.setText(new Measurement(vec.y, vec.unit).toPrecision(3));\r\n                this.labelY.setPosition(source.x + d.x, source.y + offset.y);\r\n                this.labelY.setAlpha(alpha);\r\n            }\r\n        }\r\n    }\r\n    get start() { return new Vector(this.ray.source); }\r\n    get end() { return this.ray.end; }\r\n}\r\nclass selector_ForceLevelHudSelector extends selector_VectorLevelHudSelector {\r\n    constructor(hud, origin) {\r\n        super(hud, {\r\n            mode: GameMode.Force,\r\n            unit: new Unit(Force.Newton),\r\n            scale: 100,\r\n            x: origin.x,\r\n            y: origin.y,\r\n            show: true\r\n        });\r\n        this.hud.pause();\r\n    }\r\n    get color() { return 0x800000; }\r\n    get info() {\r\n        if (!this.state.target)\r\n            return "";\r\n        const body = this.state.target.body;\r\n        const time = new Measurement(1 / 60, Time.Second);\r\n        const mass = new Measurement(body.mass, Mass.Kilogram);\r\n        const force = this.query().magnitude();\r\n        const accel = force.over(mass);\r\n        const velo = accel.times(time);\r\n        const acceleration = precision(3) `F (${force}) / m (${mass}) = a (${accel})`;\r\n        const velocity = precision(3) `a (${accel}) × Δt (1/60 s) = Δv (${velo})`;\r\n        return [acceleration, velocity].join("\\n");\r\n    }\r\n    activate() {\r\n        if (!this.ray)\r\n            return;\r\n        this.hud.resume();\r\n        if (this.state.modes) {\r\n            this.state.modes[this.mode]--;\r\n        }\r\n        if (this.ray && this.state.target) {\r\n            const body = this.state.target.body;\r\n            const s = this.ray.source;\r\n            const d = this.ray.direction;\r\n            // gonna treat the arrow length as 100 * matter-newton   \r\n            let force = new measurement_VectorMeasurement(Vector.div(d, 100), Force.PixelNewton);\r\n            // maximum 3 matter-newton = 300 N\r\n            force = force.times(Math.min(1, 3 / force.length()));\r\n            // kg * px / s^2 is matterjs\'s internal force unit\r\n            // see http://brm.io/matter-js/docs/files/src_body_Body.js.html line 582\r\n            // so no conversion necessary\r\n            this.state.target.applyForceFrom(new Phaser.Math.Vector2(s.x, s.y), new Phaser.Math.Vector2(force.x, force.y));\r\n        }\r\n    }\r\n}\r\nclass selector_VelocityLevelHudSelector extends selector_VectorLevelHudSelector {\r\n    constructor(hud, origin) {\r\n        super(hud, {\r\n            mode: GameMode.Velocity,\r\n            unit: Velocity.MetersPerSecond,\r\n            scale: 1 / 30,\r\n            x: origin.x,\r\n            y: origin.y,\r\n            show: true\r\n        });\r\n        this.hud.pause();\r\n    }\r\n    get color() { return 0x006ad1; }\r\n    get info() {\r\n        if (!this.state.target)\r\n            return "";\r\n        const body = this.state.target.body;\r\n        const mass = new Measurement(body.mass, Mass.Kilogram);\r\n        const velo = this.query().magnitude();\r\n        const momentum = precision(3) `m (${mass}) * v (${velo}) = ρ (${velo.times(mass)})`;\r\n        return momentum;\r\n    }\r\n    activate() {\r\n        if (!this.ray)\r\n            return;\r\n        this.hud.resume();\r\n        if (this.state.modes) {\r\n            this.state.modes[this.mode]--;\r\n        }\r\n        if (this.ray && this.state.target) {\r\n            const body = this.state.target;\r\n            const s = this.ray.source;\r\n            const d = this.ray.direction;\r\n            // gonna treat the arrow length as 30 * m / s\r\n            let velocity = new measurement_VectorMeasurement(Vector.div(d, 30), Velocity.MetersPerSecond);\r\n            // maximum 10 m/s\r\n            velocity = velocity.times(Math.min(1, 10 / velocity.length()));\r\n            velocity = velocity.to(Velocity.PixelsPerStep);\r\n            this.state.target.setVelocity(velocity.x, velocity.y);\r\n        }\r\n    }\r\n}\r\nclass selector_PositionLevelHudSelector extends selector_VectorLevelHudSelector {\r\n    constructor(hud, origin) {\r\n        super(hud, {\r\n            mode: GameMode.Position,\r\n            unit: new Unit(Distance.Meter),\r\n            scale: 0.01,\r\n            x: origin.x,\r\n            y: origin.y,\r\n            show: true\r\n        });\r\n    }\r\n    get color() { return 0x228b22; }\r\n    get info() {\r\n        if (!this.state.target)\r\n            return "";\r\n        const { x, y } = this.state.target;\r\n        const pos = new measurement_VectorMeasurement({ x, y }, Distance.Pixel).to(Distance.Meter);\r\n        return precision(3) `x = ${pos.plus(this.query())}`;\r\n    }\r\n    activate() {\r\n        if (!this.ray)\r\n            return;\r\n        if (this.state.modes) {\r\n            this.state.modes[this.mode]--;\r\n        }\r\n        if (this.ray && this.state.target) {\r\n            const pos = Vector.add({ x: this.state.target.x, y: this.state.target.y }, this.ray.direction);\r\n            this.state.target.setPosition(pos.x, pos.y);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/control/tooltip.ts\n\r\nclass tooltip_Tooltip extends phaserfrom_dll_reference_library["GameObjects"].Container {\r\n    constructor(scene, config) {\r\n        super(scene, config.x, config.y);\r\n        const padding = config.padding || 5;\r\n        if (config.style.fontSize)\r\n            config.style.fontSize *= window.devicePixelRatio;\r\n        config.scale = ("scale" in config ? config.scale : 1) / window.devicePixelRatio;\r\n        this.text = scene.make.text(config);\r\n        this.text.resolution = window.devicePixelRatio;\r\n        const { width, height } = this.text;\r\n        this.graphics = scene.make.graphics({ width: width + padding * 2, height: height + padding * 2 + 10 });\r\n        this.graphics.fillStyle(0xAAAAAA, 0.85);\r\n        this.graphics.fillRect(-padding - width / 2, -padding - height / 2, width + padding * 2, height + padding * 2);\r\n        this.graphics.fillTriangle(-5, height / 2 + padding, 5, height / 2 + padding, 0, height / 2 + padding + 7);\r\n        this.add([this.graphics, this.text]);\r\n        this.alpha = 0;\r\n        [this.width, this.height] = [width + padding * 2, height + padding * 2];\r\n        const target = config.target;\r\n        if (!target)\r\n            throw new Error("Tooltip must have a target.");\r\n        target.on("pointerover", this.pointerover, this);\r\n        target.on("pointerout", this.pointerout, this);\r\n    }\r\n    pointerover(pointer) {\r\n        if (this.tween)\r\n            this.tween.stop();\r\n        this.tween = this.scene.tweens.add({\r\n            targets: this,\r\n            alpha: 1,\r\n            duration: 100,\r\n            delay: 500,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n    }\r\n    pointerout(pointer) {\r\n        if (this.tween)\r\n            this.tween.stop();\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            alpha: 0,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/control/button.ts\n\r\nclass button_Button extends Phaser.GameObjects.Container {\r\n    constructor(scene, config) {\r\n        super(scene, config.x, config.y);\r\n        this.sprite = scene.make.sprite(config.sprite, false);\r\n        if (config.sprite.tint)\r\n            this.sprite.tint = config.sprite.tint;\r\n        this.add(this.sprite);\r\n        if ("text" in config) {\r\n            const textConfig = Object.assign({ origin: 0.5 }, config.text);\r\n            if (textConfig.style.fontSize)\r\n                textConfig.style.fontSize *= window.devicePixelRatio;\r\n            textConfig.scale = ("scale" in textConfig ? textConfig.scale : 1) / window.devicePixelRatio;\r\n            this.text = scene.make.text(textConfig, false);\r\n            this.add(this.text);\r\n        }\r\n        if ("tooltip" in config) {\r\n            this.tooltip = new tooltip_Tooltip(scene, Object.assign({ target: this, origin: 0.5 }, config.tooltip));\r\n            this.tooltip.y = -45;\r\n            this.add(this.tooltip);\r\n        }\r\n        this.sprite.setInteractive();\r\n        this.sprite.on("pointerover", this.pointerover, this);\r\n        this.sprite.on("pointerout", this.pointerout, this);\r\n        this.sprite.on("pointerdown", this.pointerdown, this);\r\n        this.sprite.on("pointerup", this.pointerup, this);\r\n    }\r\n    setText(text) {\r\n        if (this.text) {\r\n            this.text.setText(text);\r\n        }\r\n    }\r\n    pointerover(pointer) {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            scaleX: 0.9,\r\n            scaleY: 0.9,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n        this.emit("pointerover", ...arguments);\r\n    }\r\n    pointerout(pointer) {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            scaleX: 1.0,\r\n            scaleY: 1.0,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n        this.emit("pointerout", ...arguments);\r\n    }\r\n    pointerdown(pointer) {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            scaleX: 0.8,\r\n            scaleY: 0.8,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n        this.emit("pointerdown", ...arguments);\r\n    }\r\n    pointerup(pointer) {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            scaleX: 0.9,\r\n            scaleY: 0.9,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n        this.emit("pointerup", ...arguments);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/util/ui.ts\n\r\nvar ControlAlignment;\r\n(function (ControlAlignment) {\r\n    ControlAlignment[ControlAlignment["Left"] = 1] = "Left";\r\n    ControlAlignment[ControlAlignment["Right"] = 2] = "Right";\r\n    ControlAlignment[ControlAlignment["Center"] = 4] = "Center";\r\n    ControlAlignment[ControlAlignment["Top"] = 8] = "Top";\r\n    ControlAlignment[ControlAlignment["Bottom"] = 16] = "Bottom";\r\n})(ControlAlignment || (ControlAlignment = {}));\r\nclass ui_HudButton extends button_Button {\r\n    constructor(scene, config) {\r\n        const { height, width } = scene.cameras.main;\r\n        const c = Object.assign({ align: ControlAlignment.Left }, config);\r\n        let offset = c.offset || { x: 0, y: 0 };\r\n        if ((c.align & ControlAlignment.Right) === ControlAlignment.Right)\r\n            offset = { x: width - offset.x, y: offset.y };\r\n        if ((c.align & ControlAlignment.Bottom) === ControlAlignment.Bottom)\r\n            offset = { x: offset.x, y: height - offset.y };\r\n        super(scene, Object.assign({}, offset, { text: {\r\n                text: c.text,\r\n                style: {\r\n                    fontFamily: "Clear Sans",\r\n                    fontStyle: "bold",\r\n                    fontSize: 24,\r\n                    fill: "white"\r\n                }\r\n            }, sprite: {\r\n                key: c.sprite,\r\n                frame: c.frame,\r\n                scale: 0.5\r\n            }, tooltip: {\r\n                text: c.tooltip,\r\n                style: {\r\n                    fontFamily: "Clear Sans",\r\n                    fontSize: 12,\r\n                    fill: "white"\r\n                }\r\n            } }));\r\n        if (c.handler)\r\n            this.on("pointerdown", c.handler);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/level/hud.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { min, max } = Math;\r\nconst modeBtns = {\r\n    [GameMode.Force]: {\r\n        frame: 1,\r\n        text: "F",\r\n        tooltip: "Force Mode"\r\n    },\r\n    [GameMode.Velocity]: {\r\n        frame: 5,\r\n        text: "V",\r\n        tooltip: "Velocity Mode"\r\n    },\r\n    [GameMode.Position]: {\r\n        frame: 3,\r\n        text: "X",\r\n        tooltip: "Position Mode"\r\n    }\r\n};\r\nclass hud_LevelHud extends Phaser.GameObjects.Container {\r\n    constructor(scene) {\r\n        super(scene);\r\n        this.dirty = false;\r\n        this.scene = scene;\r\n        const cam = scene.cameras.main;\r\n        const { height: py, width: px } = scene.padding;\r\n        const height = Math.min(scene.bounds.height, cam.height - py * 2);\r\n        const width = Math.min(scene.bounds.width, cam.width - px * 2);\r\n        this.frame = scene.make.graphics({})\r\n            .fillStyle(0xFFFFFF)\r\n            .fillRect(0, 0, px, height + py * 2)\r\n            .fillRect(width + px, 0, px, height + py * 2)\r\n            .fillRect(0, 0, width + px * 2, py)\r\n            .fillRect(0, height + py, width + px * 2, py)\r\n            .lineStyle(4, 0x000000)\r\n            .strokeRect(px, py, width, height);\r\n        this.add(this.frame);\r\n        this.overlays = scene.make.graphics({});\r\n        this.add(this.overlays);\r\n        // current level\r\n        this.add(new ui_HudButton(scene, {\r\n            frame: 1,\r\n            sprite: "controls",\r\n            offset: { x: px + 24, y: py + height + 32 },\r\n            text: "«",\r\n            tooltip: "Back to Level Select",\r\n            handler: () => scene.back()\r\n        }));\r\n        this.add(new ui_HudButton(scene, {\r\n            frame: 1,\r\n            sprite: "controls",\r\n            offset: { x: px + 24 + 64, y: py + height + 32 },\r\n            text: "↺",\r\n            tooltip: "Retry",\r\n            handler: () => scene.scene.restart({ level: scene.level })\r\n        }));\r\n        this.add(scene.make.text({\r\n            x: px + 24 + 64 + 64,\r\n            y: py + height + 18,\r\n            text: `Level ${scene.state.level.index + 1}`,\r\n            style: Text.Header\r\n        }));\r\n        // information\r\n        this.add(this.actionInfo = scene.make.text({\r\n            x: px + width / 2,\r\n            y: py + height + 30,\r\n            text: "",\r\n            origin: 0.5,\r\n            style: Text.Normal.Light\r\n        }));\r\n        this.add(this.targetInfo = scene.make.text({\r\n            x: px + width,\r\n            y: py,\r\n            text: "",\r\n            origin: { x: 1, y: 0 },\r\n            backgroundColor: "white",\r\n            padding: 10,\r\n            style: Text.Normal.Light\r\n        }));\r\n        this.add(this.tilePreview = scene.make.image({\r\n            alpha: 0.5,\r\n            x: px + width - 150,\r\n            y: py + 8,\r\n            scale: 0.75,\r\n            origin: { x: 1, y: 0 },\r\n            key: scene.state.target && scene.state.target.texture.key,\r\n            frame: scene.state.target && scene.state.target.frame.name\r\n        }));\r\n        this.add(this.pauseIndicator = scene.make.text({\r\n            x: px,\r\n            y: py - 16,\r\n            origin: { x: 0, y: 1 },\r\n            text: "PAUSED",\r\n            style: Text.Header,\r\n            visible: false\r\n        }));\r\n        if (scene.state.modes) {\r\n            // mode buttons\r\n            let x = scene.padding.width + 24;\r\n            for (const mode in scene.state.modes) {\r\n                if (!scene.state.modes.hasOwnProperty(mode))\r\n                    continue;\r\n                const btn = this.makeModeHudButton(scene, Object.assign({ sprite: "controls", offset: { x, y: py - 32 }, mode }, modeBtns[mode]));\r\n                this.add(btn);\r\n                x += 48;\r\n            }\r\n        }\r\n        // events \r\n        scene.input.on("pointermove", this.onpointermove, this);\r\n        scene.input.on("pointerup", this.onpointerup, this);\r\n        scene.events.on("tiledown", this.ontiledown, this);\r\n    }\r\n    destroy() {\r\n        if (this.scene) {\r\n            this.scene.input.off("pointermove", this.onpointermove, this, false);\r\n            this.scene.input.off("pointerup", this.onpointerup, this, false);\r\n            this.scene.events.off("tiledown", this.ontiledown, this, false);\r\n        }\r\n        super.destroy();\r\n    }\r\n    update() {\r\n        const cam = this.scene.cameras.main;\r\n        const level = this.scene.state.level;\r\n        const target = this.scene.state.target;\r\n        const width = min(cam.width - this.scene.padding.width * 2, this.scene.bounds.width);\r\n        const height = min(cam.height - this.scene.padding.height * 2, this.scene.bounds.height);\r\n        const clampedX = clamp(0, cam.scrollX, this.scene.bounds.width - width);\r\n        const clampedY = clamp(0, cam.scrollY, this.scene.bounds.height - height);\r\n        this.setPosition(clampedX, 0);\r\n        if (target) {\r\n            const body = target.body;\r\n            this.targetInfo.setBackgroundColor("#FFFFFF");\r\n            const m = new Measurement(body.mass, Mass.Kilogram);\r\n            const x = new measurement_VectorMeasurement(target, Distance.Pixel).to(Distance.Meter);\r\n            const v = new measurement_VectorMeasurement(body.velocity, Velocity.PixelsPerStep).to(Velocity.MetersPerSecond);\r\n            const theta = new Measurement(target.angle, Angle.Degree).to(Angle.Radian);\r\n            const omega = new Measurement(body.angularVelocity, AngularVelocity.DegreesPerStep).to(AngularVelocity.RadiansPerSecond);\r\n            this.targetInfo.setText([\r\n                fixed(1) `m: ${m}`,\r\n                fixed(1) `x: ${x}`,\r\n                fixed(1) `v: ${v}`,\r\n                fixed(1) `θ: ${theta}`,\r\n                fixed(1) `ω: ${omega}`,\r\n            ]);\r\n        }\r\n        if (this.state && this.state.modes) {\r\n            let failed = true;\r\n            for (const mode in this.state.modes) {\r\n                if (!this.state.modes.hasOwnProperty(mode))\r\n                    continue;\r\n                if (this.state.modes[mode] !== 0) {\r\n                    failed = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (failed && this.state.tiles.every(tile => tile.body.speed < 0.05)) {\r\n                // all hope is lost only when everything stops moving\r\n                this.scene.end(LevelOutcome.Failure);\r\n            }\r\n        }\r\n        if (!this.dirty)\r\n            return;\r\n        // update overlays if necessary\r\n        if (this.overlays && this.dirty) {\r\n            this.overlays.clear();\r\n            this.actionInfo.text = "";\r\n            if (this.scene.state.target && this.selector) {\r\n                const { start, end, info, color } = this.selector;\r\n                if (this.selector.show && start instanceof Vector && end instanceof Vector) {\r\n                    this.overlays.lineStyle(4, color);\r\n                    this.overlays.lineBetween(start.x, start.y, end.x, end.y);\r\n                    this.overlays.lineStyle(3, color, 0.6);\r\n                    this.overlays.lineBetween(start.x, start.y, end.x, start.y);\r\n                    this.overlays.lineBetween(end.x, start.y, end.x, end.y);\r\n                    const ray = end.minus(start);\r\n                    const point = ray.plus(10).plus(start);\r\n                    const dir = ray.normalized().times(10);\r\n                    const p1 = Vector.add(end, { x: dir.y, y: -dir.x });\r\n                    const p2 = Vector.add(end, { x: -dir.y, y: dir.x });\r\n                    this.overlays.fillStyle(color, 1);\r\n                    this.overlays.fillTriangle(point.x, point.y, p2.x, p2.y, p1.x, p1.y);\r\n                }\r\n                this.actionInfo.text = info || "";\r\n            }\r\n            this.actionInfo.updateText();\r\n            this.dirty = false;\r\n        }\r\n    }\r\n    pause() {\r\n        this.scene.matter.pause();\r\n        this.pauseIndicator.setVisible(true);\r\n    }\r\n    resume() {\r\n        this.scene.matter.resume();\r\n        this.pauseIndicator.setVisible(false);\r\n    }\r\n    get state() { return this.scene.state; }\r\n    get mode() { return this.state.mode; }\r\n    onpointerup(pointer, x, y) {\r\n        if (this.selector) {\r\n            if (dist(this.selector.start, this.selector.end) > 0) {\r\n                this.selector.activate();\r\n                if (this.state.modes) {\r\n                    // tslint:disable-next-line:prefer-template\r\n                    const btn = this.getByName("mode:" + this.state.mode);\r\n                    btn.setText(this.state.modes[this.state.mode].toFixed());\r\n                }\r\n            }\r\n            this.remove(this.selector, true);\r\n            this.selector = undefined;\r\n            this.dirty = true;\r\n        }\r\n    }\r\n    onpointermove(pointer) {\r\n        if (this.selector) {\r\n            this.selector.move(pointer.x, pointer.y);\r\n            this.dirty = true;\r\n        }\r\n    }\r\n    ontiledown(pointer, tile) {\r\n        this.scene.state.target = tile;\r\n        this.tilePreview.setTexture(tile.texture.key, tile.frame.name);\r\n        if (!tile.allowControl)\r\n            return;\r\n        if (this.state.modes && this.state.modes[this.mode] <= 0)\r\n            return;\r\n        if (this.state.completed)\r\n            return;\r\n        switch (this.scene.state.mode) {\r\n            case GameMode.Force:\r\n                this.selector = new selector_ForceLevelHudSelector(this, pointer);\r\n                break;\r\n            case GameMode.Velocity:\r\n                this.selector = new selector_VelocityLevelHudSelector(this, pointer);\r\n                break;\r\n            case GameMode.Position:\r\n                this.selector = new selector_PositionLevelHudSelector(this, pointer);\r\n                break;\r\n        }\r\n        if (this.selector)\r\n            this.add(this.selector);\r\n        this.dirty = true;\r\n    }\r\n    makeModeHudButton(scene, config) {\r\n        const c = Object.assign({ align: ControlAlignment.Right | ControlAlignment.Bottom, grey: true }, config);\r\n        const btn = new ui_HudButton(scene, c);\r\n        // tslint:disable-next-line:prefer-template\r\n        btn.setName("mode:" + config.mode);\r\n        btn.on("pointerdown", () => {\r\n            this.scene.state.mode = c.mode;\r\n        });\r\n        if (c.grey) {\r\n            if (scene.state.mode !== c.mode)\r\n                btn.sprite.setPipeline("greyscale");\r\n            btn.on("pointerover", () => {\r\n                btn.sprite.resetPipeline();\r\n            });\r\n            btn.on("pointerout", () => {\r\n                if (c.mode !== this.scene.state.mode)\r\n                    btn.sprite.setPipeline("greyscale");\r\n            });\r\n            scene.state.on("update:mode", mode => {\r\n                try {\r\n                    if (c.mode !== mode) {\r\n                        btn.sprite.setPipeline("greyscale");\r\n                        btn.setText(modeBtns[c.mode].text);\r\n                    }\r\n                    else {\r\n                        if (this.scene.state.modes) {\r\n                            btn.setText(this.scene.state.modes[c.mode].toString());\r\n                            btn.sprite.resetPipeline();\r\n                        }\r\n                    }\r\n                }\r\n                catch (_a) {\r\n                }\r\n            });\r\n        }\r\n        return btn;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/util/observable.ts\nfunction observable(target, prop) {\r\n    if (!("__shadow" in target))\r\n        target["__shadow"] = {};\r\n    Object.defineProperty(target, prop, {\r\n        get: () => "__shadow" in target ? target.__shadow[prop] : target[prop],\r\n        set: value => {\r\n            if (target.__shadow[prop] === value)\r\n                return;\r\n            target.__shadow[prop] = value;\r\n            // tslint:disable-next-line:prefer-template\r\n            target.emit("update:" + prop.toString(), value);\r\n        }\r\n    });\r\n}\r\n\n// EXTERNAL MODULE: ./node_modules/events/events.js\nvar events = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./src/scene/level/state.ts\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n\r\nconst uuidv4 = __webpack_require__(1);\r\nclass state_LevelState extends events["EventEmitter"] {\r\n    constructor() {\r\n        super();\r\n        this.goals = [];\r\n        this.tiles = [];\r\n        this.level = null;\r\n        this.target = null;\r\n        this.track = null;\r\n        this.mode = GameMode.Force;\r\n        this.completed = false;\r\n        this.id = uuidv4();\r\n    }\r\n    get modes() { return this.level ? this.level.modes : null; }\r\n}\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "goals", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "tiles", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "level", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "target", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "track", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "mode", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "completed", void 0);\r\n\n// EXTERNAL MODULE: ./node_modules/uuid/v4.js\nvar v4 = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/scene/level/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { sin, cos, random, PI: level_PI, max: level_max, min: level_min, abs: level_abs } = Math;\r\nclass level_LevelScene extends phaserfrom_dll_reference_library["Scene"] {\r\n    constructor() {\r\n        super({ key: "level" });\r\n    }\r\n    init(data) {\r\n        console.log(\'init\', data);\r\n        this.level = data.level;\r\n    }\r\n    preload() {\r\n        // load textures\r\n        if (!("tile-level" in this.textures.list)) {\r\n            const graphics = this.make.graphics({}, false);\r\n            graphics\r\n                .fillStyle(0xFFFFFF)\r\n                .fillRect(0, 0, 128, 128)\r\n                .lineStyle(3, 0x000000, 1)\r\n                .lineBetween(0, 0, 0, 128)\r\n                .lineBetween(0, 0, 128, 0)\r\n                .lineStyle(1, 0x000000, 1)\r\n                .lineBetween(32, 0, 32, 128)\r\n                .lineBetween(0, 32, 128, 32)\r\n                .lineBetween(64, 0, 64, 128)\r\n                .lineBetween(0, 64, 128, 64)\r\n                .lineBetween(96, 0, 96, 128)\r\n                .lineBetween(0, 96, 128, 96);\r\n            graphics.generateTexture("tile-level", 128, 128);\r\n            graphics.destroy();\r\n        }\r\n        if (!("sprites" in this.textures.list))\r\n            this.load.spritesheet("sprites", __webpack_require__(16), { frameWidth: 128, frameHeight: 128 });\r\n        if (!("controls" in this.textures.list))\r\n            this.load.spritesheet("controls", __webpack_require__(2), { frameWidth: 128, frameHeight: 128 });\r\n        if (!("banners" in this.textures.list))\r\n            this.load.spritesheet("banners", __webpack_require__(15), { frameWidth: 640, frameHeight: 128 });\r\n    }\r\n    create() {\r\n        this.state = new state_LevelState();\r\n        this.loadWorld();\r\n    }\r\n    update(total, delta) {\r\n        const cam = this.cameras.main;\r\n        if (!cam)\r\n            return;\r\n        const width = level_min(cam.width, this.bounds.width);\r\n        const height = level_min(cam.height, this.bounds.height);\r\n        const track = this.state.target || this.state.track;\r\n        if (track) {\r\n            cam.scrollX = track.x - width / 2;\r\n            cam.scrollY = track.y - height / 2;\r\n        }\r\n        this.hud.update();\r\n    }\r\n    back(outcome) {\r\n        const { scrollX, scrollY, width, height } = this.cameras.main;\r\n        this.overlay = this.add.tileSprite(scrollX + width / 2, scrollY + height / 2, width, height, "tile-16");\r\n        this.overlay.setAlpha(0);\r\n        this.scene.transition({\r\n            target: "level-select",\r\n            duration: 2000,\r\n            onUpdate: this.ontransitionupdate,\r\n            moveBelow: true,\r\n            data: { level: this.level, outcome }\r\n        });\r\n    }\r\n    end(outcome) {\r\n        this.state.completed = true;\r\n        this.banner = new banner_LevelBanner(this, outcome);\r\n        this.add.existing(this.banner);\r\n        const { scrollX, scrollY, width, height } = this.cameras.main;\r\n        this.banner.setPosition(scrollX + width / 2, scrollY + height / 2);\r\n        this.banner.begin();\r\n        setTimeout(() => this.back(outcome), 2000);\r\n    }\r\n    loadWorld() {\r\n        // load the level\r\n        // duplicate the object to avoid modifying the actual instance\r\n        // that json-loader created\r\n        // tslint:disable-next-line:prefer-template\r\n        this.state.level = JSON.parse(JSON.stringify(__webpack_require__(14)("./" + this.level.toString() + ".json")));\r\n        for (const mode in this.state.level.modes) {\r\n            if (this.state.level.modes.hasOwnProperty(mode)) {\r\n                this.state.mode = mode;\r\n                break;\r\n            }\r\n        }\r\n        //#region Boundaries\r\n        const cam = this.cameras.main;\r\n        const { height, width } = cam;\r\n        this.bounds = new Size(this.state.level.width * 32, this.state.level.height * 32);\r\n        this.padding = new Size(level_max(50, (width - this.bounds.width) / 2), level_max(50, (height - this.bounds.height) / 2));\r\n        this.origin = new Vector(this.padding.width, this.bounds.height + this.padding.height);\r\n        cam.setBounds(0, 0, this.bounds.width + this.padding.width * 2, this.bounds.height + this.padding.height * 2);\r\n        //#endregion\r\n        //#region Grid\r\n        if (this.grid) {\r\n            this.grid.destroy();\r\n        }\r\n        this.grid = this.add.tileSprite(this.padding.width + this.bounds.width / 2, this.padding.height + this.bounds.height / 2, this.bounds.width, this.bounds.height, "tile-level");\r\n        this.grid.flipY = true;\r\n        //#endregion\r\n        if (this.tiles)\r\n            this.tiles.destroy();\r\n        this.tiles = this.make.container({});\r\n        //#region HUD\r\n        if (this.hud)\r\n            this.hud.destroy();\r\n        this.hud = new hud_LevelHud(this);\r\n        this.children.add(this.hud);\r\n        //#endregion\r\n        //#region Physics\r\n        this.matter.world.setBounds(this.padding.width, this.padding.height, this.bounds.width, this.bounds.height, 512);\r\n        const walls = this.matter.world.walls;\r\n        walls.top.friction = 0;\r\n        walls.top.restitution = 0;\r\n        walls.bottom.friction = 0;\r\n        walls.bottom.restitution = 0;\r\n        walls.left.friction = 0;\r\n        walls.left.restitution = 0;\r\n        walls.right.friction = 0;\r\n        walls.right.restitution = 0;\r\n        if (this.state.level.paused)\r\n            this.hud.pause();\r\n        //#endregion\r\n        //#region Tiles\r\n        for (const data of this.state.level.annotations) {\r\n            switch (data.type) {\r\n                case AnnotationType.Text:\r\n                    const textAnnotation = this.make.text({\r\n                        style: Object.assign({}, Text.Header, { stroke: "#FFFFFF", strokeThickness: 10 }),\r\n                        text: data.text,\r\n                        x: this.origin.x + data.x * 32,\r\n                        y: this.origin.y - data.y * 32,\r\n                        origin: { x: 0, y: 1 }\r\n                    });\r\n                    this.tiles.add(textAnnotation);\r\n                    break;\r\n                default:\r\n                    // invalid annotation\r\n                    // don\'t throw error i guess\r\n                    break;\r\n            }\r\n        }\r\n        for (const data of this.state.level.goals) {\r\n            // invert Y coordinate so Y = 0 is at the bottom\r\n            data.y = this.origin.y / 32 - data.y;\r\n            data.x = this.origin.x / 32 + data.x;\r\n            const goal = new goal_Goal(this, data);\r\n            goal.on("update:completed", (completed) => {\r\n                if (this.state.goals.every(g => g.completed)) {\r\n                    this.end(LevelOutcome.Success);\r\n                }\r\n            });\r\n            this.state.goals.push(goal);\r\n            this.tiles.add(goal);\r\n        }\r\n        if (this.state.level.shapes) {\r\n            for (const data of this.state.level.shapes) {\r\n                // invert Y coordinate so Y = 0 is at the bottom\r\n                data.y = this.origin.y / 32 - data.y;\r\n                data.x = this.origin.x / 32 + data.x;\r\n                let [minX, minY, maxX, maxY] = [0, 0, 0, 0];\r\n                const verts = data.data\r\n                    .split(";").map(s => {\r\n                    const [x, y] = s.split(",");\r\n                    const v = { x: parseFloat(x.trim()) * 32, y: parseFloat(y.trim()) * 32 };\r\n                    minX = level_min(v.x, minX);\r\n                    minY = level_min(v.y, minY);\r\n                    maxX = level_max(v.x, maxX);\r\n                    maxY = level_max(v.y, maxY);\r\n                    return v;\r\n                });\r\n                const graphic = this.make.graphics({});\r\n                graphic.lineStyle(3, 0);\r\n                graphic.fillStyle(0xAAAAAA);\r\n                graphic.beginPath();\r\n                for (const { x, y } of verts)\r\n                    graphic.lineTo(x, y);\r\n                graphic.closePath();\r\n                graphic.strokePath();\r\n                graphic.fillPath();\r\n                // tslint:disable-next-line:prefer-template\r\n                const tex = "shape-" + v4();\r\n                graphic.generateTexture(tex, maxX - minX, maxY - minY);\r\n                const shape = this.matter.add.image(data.x * 32, data.y * 32, tex, 0, { shape: { type: "fromVertices", verts } });\r\n                if (data.static)\r\n                    shape.setStatic(true);\r\n                this.tiles.add(shape);\r\n            }\r\n        }\r\n        for (const data of this.state.level.tiles) {\r\n            // invert Y coordinate so Y = 0 is at the bottom\r\n            data.y = this.origin.y / 32 - data.y;\r\n            data.x = this.origin.x / 32 + data.x;\r\n            const tile = new tile_Tile(this, data);\r\n            tile.on("pointerdown", (pointer) => {\r\n                this.events.emit("tiledown", pointer, tile);\r\n            });\r\n            if (data.track)\r\n                this.state.track = tile;\r\n            this.state.tiles.push(tile);\r\n            this.tiles.add(tile);\r\n        }\r\n        //#endregion\r\n    }\r\n    ontransitionupdate(progress) {\r\n        if (this.overlay) {\r\n            this.overlay.setAlpha(progress * 1.2);\r\n            const offset = 100 / (progress * progress);\r\n            this.overlay.setTilePosition(-offset, -offset);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/select.ts\n\r\n\r\n\r\nconst { sin: select_sin, cos: select_cos, random: select_random, PI: select_PI, max: select_max } = Math;\r\nclass select_LevelSelectScene extends phaserfrom_dll_reference_library["Scene"] {\r\n    constructor() {\r\n        super({ key: "level-select" });\r\n        this.speed = 0.05;\r\n        this.size = { rows: 3, cols: 5 };\r\n        this.disabled = {};\r\n        this.initialized = false;\r\n    }\r\n    init(data) {\r\n        if (data) {\r\n            const level = data.level;\r\n            const outcome = data.outcome;\r\n            if (typeof level !== "undefined" && outcome === LevelOutcome.Failure) {\r\n                this.disabled[level] = true;\r\n                setTimeout(() => this.disabled[level] = false, 60000);\r\n            }\r\n        }\r\n    }\r\n    preload() {\r\n        this.events.on("transitioncomplete", this.transitioncomplete, this);\r\n        this.load.spritesheet("controls", __webpack_require__(2), { frameWidth: 128, frameHeight: 128 });\r\n    }\r\n    create() {\r\n        if (this.initialized)\r\n            return;\r\n        const { width, height } = this.cameras.main;\r\n        const self = this;\r\n        if (this.grid)\r\n            this.grid.destroy();\r\n        this.grid = this.add.tileSprite(width / 2, height / 2, width, height, "tile-16");\r\n        if (this.title)\r\n            this.title.destroy();\r\n        this.title =\r\n            this.add.text(20, -50, "Choose a level")\r\n                .setFontFamily("Montserrat Black")\r\n                .setFontSize(32)\r\n                .setFill("#EE0000")\r\n                .setStroke("#FFFFFF", 10)\r\n                .setShadow(0, 0, "#AAAAAA", 6, true, false);\r\n        if (this.btnGrid)\r\n            this.btnGrid.destroy();\r\n        const buttons = [];\r\n        for (let row = 0; row < this.size.rows; row++) {\r\n            for (let col = 0; col < this.size.cols; col++) {\r\n                const level = row * this.size.cols + col;\r\n                const button = new button_Button(this, {\r\n                    text: {\r\n                        style: {\r\n                            fontFamily: "Montserrat Black",\r\n                            fontSize: 32,\r\n                            fill: "#FFFFFF"\r\n                        },\r\n                        text: (level + 1).toString(10)\r\n                    },\r\n                    sprite: {\r\n                        key: "controls",\r\n                        frame: 0\r\n                    }\r\n                });\r\n                button.x = (col - 2) / 3 * 0.45 * width;\r\n                button.y = (row - 1) / 2 * 0.45 * height;\r\n                button.alpha = 0;\r\n                if (this.disabled[level]) {\r\n                    button.sprite.setPipeline("greyscale");\r\n                }\r\n                else {\r\n                    button.on(\'pointerup\', () => {\r\n                        this.goto(level);\r\n                    });\r\n                }\r\n                buttons.push(button);\r\n            }\r\n        }\r\n        this.btnGrid = this.add.container(width / 2, height / 2, buttons);\r\n        this.input.keyboard.on("keydown_T", () => {\r\n            this.goto(15);\r\n        });\r\n    }\r\n    goto(level) {\r\n        var transition = this.scene.transition({\r\n            target: \'level\',\r\n            duration: 1000,\r\n            onUpdate: this.outro,\r\n            moveBelow: true,\r\n            data: { level }\r\n        });\r\n    }\r\n    update(total, delta) {\r\n        if (this.grid) {\r\n            this.grid.tilePositionX = this.speed * total;\r\n            this.grid.tilePositionY = this.speed * total;\r\n        }\r\n    }\r\n    transitioncomplete() {\r\n        this.tweens.add({\r\n            targets: this.title,\r\n            y: 20,\r\n            duration: 1500,\r\n            ease: \'Elastic\',\r\n            easeParams: [1.1, 0.5]\r\n        });\r\n        if (this.btnGrid) {\r\n            for (let row = 0; row < this.size.rows; row++) {\r\n                for (let col = 0; col < this.size.cols; col++) {\r\n                    const btn = this.btnGrid.getAt(row * this.size.cols + col);\r\n                    btn.alpha = 0;\r\n                    this.tweens.add({\r\n                        targets: btn,\r\n                        alpha: 1,\r\n                        duration: 250,\r\n                        delay: col * 125\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    outro(progress) {\r\n        this.speed = 0.05 + progress * progress * 0.15;\r\n        if (this.title)\r\n            this.title.alpha = select_max(0, 1 - progress * 1.7);\r\n        if (this.btnGrid)\r\n            this.btnGrid.alpha = select_max(0, 1 - progress * 1.7);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/title.ts\n\r\nconst { sin: title_sin, cos: title_cos, random: title_random, PI: title_PI, max: title_max } = Math;\r\nclass title_TitleScene extends phaserfrom_dll_reference_library["Scene"] {\r\n    constructor() {\r\n        super({ key: "title" });\r\n        this.speed = 0.05;\r\n    }\r\n    preload() {\r\n        const game = this.sys.game;\r\n        const graphics = this.make.graphics({}, false);\r\n        graphics\r\n            .fillStyle(0xFFFFFF)\r\n            .fillRect(0, 0, 80, 80)\r\n            .lineStyle(1, 0x000000, 1)\r\n            .lineBetween(0, 0, 0, 16)\r\n            .lineBetween(0, 0, 16, 0);\r\n        graphics.generateTexture("tile-16", 16, 16);\r\n        graphics.destroy();\r\n        this.load.image("logo", __webpack_require__(6));\r\n    }\r\n    create() {\r\n        const { width, height } = this.cameras.main;\r\n        this.grid = this.add.tileSprite(width / 2, height / 2, width, height, "tile-16");\r\n        this.logo = this.add.image(width / 2, height / 2, "logo");\r\n        this.logo.setPipeline("add-color");\r\n        this.instructions = this.add\r\n            .text(width / 2, height / 2 + 100, "Click anywhere to start!")\r\n            .setFontFamily("Montserrat Black")\r\n            .setFontSize(32)\r\n            .setFill("#EE0000")\r\n            .setStroke("#FFFFFF", 10)\r\n            .setShadow(0, 0, "#AAAAAA", 6, true, false);\r\n        this.instructions.setOrigin(0.5);\r\n        this.add\r\n            .text(10, height - 10, "© 2018 Ibiyemi Abiodun")\r\n            .setFontFamily("sans-serif")\r\n            .setFill("#000000")\r\n            .setFontSize(12)\r\n            .setStroke("#FFFFFF", 10)\r\n            .setOrigin(0, 1);\r\n        this.input.once(\'pointerup\', (event) => {\r\n            this.scene.transition({\r\n                target: "level-select",\r\n                duration: 1000,\r\n                onUpdate: this.ontransitionupdate,\r\n                moveBelow: true,\r\n                allowInput: false,\r\n            });\r\n        });\r\n    }\r\n    update(total, delta) {\r\n        if (this.grid) {\r\n            this.grid.tilePositionX = this.speed * total;\r\n            this.grid.tilePositionY = this.speed * total;\r\n        }\r\n        if (this.logo) {\r\n            const phase = (title_sin(total / 500 * title_PI) + 1) / 8;\r\n            // this.logo.pipeline.setFloat4("uIntensity", phase, 0, 0, phase);\r\n            this.logo.setOrigin(0.5 + title_random() / 100 - 0.005, 0.5 + title_random() / 100 - 0.005);\r\n        }\r\n    }\r\n    ontransitionupdate(progress) {\r\n        this.speed = 0.05 + progress * progress * 0.15;\r\n        if (this.logo)\r\n            this.logo.alpha = title_max(0, 1 - progress * 1.7);\r\n        if (this.instructions)\r\n            this.instructions.alpha = title_max(0, 1 - progress * 1.7);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/shader/greyscale.ts\n\r\nclass greyscale_GreyscalePipeline extends phaserfrom_dll_reference_library["Renderer"].WebGL.Pipelines.TextureTintPipeline {\r\n    constructor(game) {\r\n        const fragShader = __webpack_require__(5);\r\n        super({\r\n            game,\r\n            renderer: game.renderer,\r\n            fragShader\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\nclass src_TourDeForceGame extends phaserfrom_dll_reference_library["Game"] {\r\n    constructor() {\r\n        super({\r\n            height: window.innerHeight,\r\n            width: window.innerWidth,\r\n            type: phaserfrom_dll_reference_library["WEBGL"],\r\n            backgroundColor: "#FFFFFF",\r\n            physics: { default: "matter", matter: { gravity: { y: 0.981 } }, debug: true },\r\n            scene: [title_TitleScene, select_LevelSelectScene, level_LevelScene]\r\n        });\r\n        const renderer = this.renderer;\r\n        renderer.addPipeline("greyscale", new greyscale_GreyscalePipeline(this));\r\n    }\r\n}\r\nwindow.addEventListener("load", () => {\r\n    let game = new src_TourDeForceGame();\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')},function(module,exports){eval('module.exports = "precision mediump float;\\r\\n\\r\\nuniform sampler2D uMainSampler;\\r\\nvarying vec2 outTexCoord;\\r\\n\\r\\nvoid main(void) {\\r\\n\\tvec4 color = texture2D(uMainSampler, outTexCoord);\\r\\n\\tfloat gray = dot(color.rgb, vec3(0.299, 0.587, 0.114));\\r\\n\\tgl_FragColor = vec4(vec3(gray), color.a);\\r\\n}"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL3NoYWRlci9ncmV5Lmdsc2w/MTlhYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEMsdUNBQXVDLDZCQUE2Qix5QkFBeUIsd0RBQXdELDZEQUE2RCwrQ0FBK0MsS0FBSyIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcclxcblxcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVNYWluU2FtcGxlcjtcXHJcXG52YXJ5aW5nIHZlYzIgb3V0VGV4Q29vcmQ7XFxyXFxuXFxyXFxudm9pZCBtYWluKHZvaWQpIHtcXHJcXG5cXHR2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVNYWluU2FtcGxlciwgb3V0VGV4Q29vcmQpO1xcclxcblxcdGZsb2F0IGdyYXkgPSBkb3QoY29sb3IucmdiLCB2ZWMzKDAuMjk5LCAwLjU4NywgMC4xMTQpKTtcXHJcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHZlYzMoZ3JheSksIGNvbG9yLmEpO1xcclxcbn1cIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "src/res/img/logo-stylized.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2ltZy9sb2dvLXN0eWxpemVkLnBuZz8zZTNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzcmMvcmVzL2ltZy9sb2dvLXN0eWxpemVkLnBuZ1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n')},function(module){eval('module.exports = {"index":5,"width":36,"height":18,"time":30,"paused":true,"modes":{"velocity":1},"annotations":[{"type":"text","text":"↑ This level starts out paused.","x":1,"y":16},{"type":"text","text":"Click on the aluminum crate to see its velocity.","x":5,"y":6}],"tiles":[{"x":2,"y":2,"type":"aluminum","control":false,"rotation":false,"velocity":{"x":4,"y":0}},{"x":34,"y":2,"type":"wood","control":true,"rotation":false}],"goals":[{"x":13,"y":2.5,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"aluminum"},{"type":"velocity","target":0}]},{"x":19,"y":2.5,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"wood"},{"type":"velocity","target":0}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI3LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n')},function(module){eval('module.exports = {"index":4,"width":18,"height":18,"time":30,"modes":{"force":4},"annotations":[{"type":"text","text":"It\'s time for torque.","x":5,"y":12}],"tiles":[{"x":2,"y":10,"type":"aluminum","track":true,"control":true,"rotation":true,"show":{"mass":true}}],"shapes":[{"data":"1, 0; 0, 8; 4, 8; 3, 0","x":2,"y":4,"static":true}],"goals":[{"x":15,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"angular-velocity","target":{"minimum":0.1}}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI4LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n')},function(module){eval('module.exports = {"index":3,"width":32,"height":18,"time":30,"modes":{"force":1},"annotations":[{"type":"text","text":"Isn\'t it cool how you can use any of these blocks to hit that goal?","x":6,"y":6}],"tiles":[{"x":2,"y":2,"type":"aluminum","track":true,"control":true,"rotation":false,"show":{"mass":true}},{"x":2,"y":6,"type":"wood","control":true,"rotation":false,"show":{"mass":true}},{"x":2,"y":10,"type":"steel","control":true,"rotation":false,"show":{"mass":true}}],"goals":[{"x":28,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"momentum","target":{"minimum":490}}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI5LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module){eval('module.exports = {"index":2,"width":32,"height":12,"time":30,"modes":{"force":4},"annotations":[{"type":"text","text":"Now do it again, but take it slow.\\nThis time you can\'t control the wooden crate.","x":1,"y":6}],"tiles":[{"x":3,"y":3,"type":"aluminum","track":true,"control":true,"rotation":false,"show":{"mass":true}},{"x":10,"y":3,"type":"wood","rotation":false,"show":{"mass":true}}],"goals":[{"x":28,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"wood"},{"type":"velocity","target":{"maximum":0.2}}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxMC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n')},function(module){eval('module.exports = {"index":15,"width":320,"height":12,"time":30,"modes":{"force":40,"velocity":30,"position":20},"annotations":[{"type":"text","text":"This is a test level. How did you even get in here?","x":1,"y":6}],"tiles":[{"x":3,"y":3,"type":"aluminum","track":true,"control":true,"show":{"mass":true}},{"x":10,"y":3,"type":"wood","show":{"mass":true}}],"shapes":[{"data":"0, 3; 3, 3; 3, 0; 6, 0; 6, 6; 0, 6","x":3,"y":7,"static":true}],"goals":[{"x":280,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"wood"}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxMS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n')},function(module){eval('module.exports = {"index":1,"width":32,"height":12,"time":30,"modes":{"force":4},"annotations":[{"type":"text","text":"Get the wooden crate into the goal.","x":1,"y":6}],"tiles":[{"x":3,"y":3,"type":"aluminum","track":true,"control":true,"rotation":false,"show":{"mass":true}},{"x":10,"y":3,"type":"wood","control":true,"rotation":false,"show":{"mass":true}}],"goals":[{"x":28,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"wood"}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxMi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n')},function(module){eval('module.exports = {"index":0,"width":32,"height":12,"time":30,"modes":{"force":4},"annotations":[{"type":"text","text":"Get the crate into the goal.","x":1,"y":6}],"tiles":[{"x":3,"y":3,"type":"aluminum","track":true,"control":true,"rotation":false,"show":{"mass":true}}],"goals":[{"x":28,"y":3,"width":6,"height":6,"type":"required","objectives":[]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxMy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n')},function(module,exports,__webpack_require__){eval('var map = {\n\t"./0.json": 13,\n\t"./1.json": 12,\n\t"./15.json": 11,\n\t"./2.json": 10,\n\t"./3.json": 9,\n\t"./4.json": 8,\n\t"./5.json": 7\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\tvar module = __webpack_require__(id);\n\treturn module;\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\'Cannot find module "\' + req + \'".\');\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 14;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2xldmVsIHN5bmMgXlxcLlxcLy4qXFwuanNvbiQ/M2E0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIxNC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi8wLmpzb25cIjogMTMsXG5cdFwiLi8xLmpzb25cIjogMTIsXG5cdFwiLi8xNS5qc29uXCI6IDExLFxuXHRcIi4vMi5qc29uXCI6IDEwLFxuXHRcIi4vMy5qc29uXCI6IDksXG5cdFwiLi80Lmpzb25cIjogOCxcblx0XCIuLzUuanNvblwiOiA3XG59O1xuXG5cbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHR2YXIgaWQgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKTtcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19yZXF1aXJlX18oaWQpO1xuXHRyZXR1cm4gbW9kdWxlO1xufVxuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHR2YXIgaWQgPSBtYXBbcmVxXTtcblx0aWYoIShpZCArIDEpKSB7IC8vIGNoZWNrIGZvciBudW1iZXIgb3Igc3RyaW5nXG5cdFx0dmFyIGUgPSBuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIG1vZHVsZSBcIicgKyByZXEgKyAnXCIuJyk7XG5cdFx0ZS5jb2RlID0gJ01PRFVMRV9OT1RfRk9VTkQnO1xuXHRcdHRocm93IGU7XG5cdH1cblx0cmV0dXJuIGlkO1xufVxud2VicGFja0NvbnRleHQua2V5cyA9IGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0S2V5cygpIHtcblx0cmV0dXJuIE9iamVjdC5rZXlzKG1hcCk7XG59O1xud2VicGFja0NvbnRleHQucmVzb2x2ZSA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZTtcbm1vZHVsZS5leHBvcnRzID0gd2VicGFja0NvbnRleHQ7XG53ZWJwYWNrQ29udGV4dC5pZCA9IDE0OyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///14\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "src/res/img/banner-sprites.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2ltZy9iYW5uZXItc3ByaXRlcy5wbmc/NThjZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNyYy9yZXMvaW1nL2Jhbm5lci1zcHJpdGVzLnBuZ1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///15\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "src/res/img/item-sprites.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2ltZy9pdGVtLXNwcml0ZXMucG5nP2MyZWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMTYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzcmMvcmVzL2ltZy9pdGVtLXNwcml0ZXMucG5nXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},function(module,exports){eval("/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanM/MjM2NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjE3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIHJldHVybiBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnl0ZXNUb1V1aWQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///17\n")},function(module,exports){eval("// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvcm5nLWJyb3dzZXIuanM/ZTFmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIxOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuICBJbiB0aGVcbi8vIGJyb3dzZXIgdGhpcyBpcyBhIGxpdHRsZSBjb21wbGljYXRlZCBkdWUgdG8gdW5rbm93biBxdWFsaXR5IG9mIE1hdGgucmFuZG9tKClcbi8vIGFuZCBpbmNvbnNpc3RlbnQgc3VwcG9ydCBmb3IgdGhlIGBjcnlwdG9gIEFQSS4gIFdlIGRvIHRoZSBiZXN0IHdlIGNhbiB2aWFcbi8vIGZlYXR1cmUtZGV0ZWN0aW9uXG5cbi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi5cbnZhciBnZXRSYW5kb21WYWx1ZXMgPSAodHlwZW9mKGNyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZihtc0NyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pKTtcbmlmIChnZXRSYW5kb21WYWx1ZXMpIHtcbiAgLy8gV0hBVFdHIGNyeXB0byBSTkcgLSBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvQ3J5cHRvXG4gIHZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkge1xuICAgIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG4gICAgcmV0dXJuIHJuZHM4O1xuICB9O1xufSBlbHNlIHtcbiAgLy8gTWF0aC5yYW5kb20oKS1iYXNlZCAoUk5HKVxuICAvL1xuICAvLyBJZiBhbGwgZWxzZSBmYWlscywgdXNlIE1hdGgucmFuZG9tKCkuICBJdCdzIGZhc3QsIGJ1dCBpcyBvZiB1bnNwZWNpZmllZFxuICAvLyBxdWFsaXR5LlxuICB2YXIgcm5kcyA9IG5ldyBBcnJheSgxNik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRoUk5HKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykge1xuICAgICAgaWYgKChpICYgMHgwMykgPT09IDApIHIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDA7XG4gICAgICBybmRzW2ldID0gciA+Pj4gKChpICYgMHgwMykgPDwgMykgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiBybmRzO1xuICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n")},function(module,exports){eval("module.exports = library;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJsaWJyYXJ5XCI/OWIzMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIxOS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gbGlicmFyeTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///19\n")}]);