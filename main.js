!function(Q){var U={};function F(B){if(U[B])return U[B].exports;var I=U[B]={i:B,l:!1,exports:{}};return Q[B].call(I.exports,I,I.exports,F),I.l=!0,I.exports}F.m=Q,F.c=U,F.d=function(Q,U,B){F.o(Q,U)||Object.defineProperty(Q,U,{configurable:!1,enumerable:!0,get:B})},F.r=function(Q){Object.defineProperty(Q,"__esModule",{value:!0})},F.n=function(Q){var U=Q&&Q.__esModule?function(){return Q.default}:function(){return Q};return F.d(U,"a",U),U},F.o=function(Q,U){return Object.prototype.hasOwnProperty.call(Q,U)},F.p="",F(F.s=4)}([function(module,exports,__webpack_require__){eval("module.exports = (__webpack_require__(25))(1062);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZGVsZWdhdGVkIC4vbm9kZV9tb2R1bGVzL3BoYXNlci9zcmMvcGhhc2VyLmpzIGZyb20gZGxsLXJlZmVyZW5jZSBsaWJyYXJ5PzFhNmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gKF9fd2VicGFja19yZXF1aXJlX18oMjUpKSgxMDYyKTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},function(module,exports,__webpack_require__){eval("var rng = __webpack_require__(24);\nvar bytesToUuid = __webpack_require__(23);\n\nfunction v4(options, buf, offset) {\n  var i = buf && offset || 0;\n\n  if (typeof(options) == 'string') {\n    buf = options === 'binary' ? new Array(16) : null;\n    options = null;\n  }\n  options = options || {};\n\n  var rnds = options.random || (options.rng || rng)();\n\n  // Per 4.4, set bits for version and `clock_seq_hi_and_reserved`\n  rnds[6] = (rnds[6] & 0x0f) | 0x40;\n  rnds[8] = (rnds[8] & 0x3f) | 0x80;\n\n  // Copy bytes to buffer, if provided\n  if (buf) {\n    for (var ii = 0; ii < 16; ++ii) {\n      buf[i + ii] = rnds[ii];\n    }\n  }\n\n  return buf || bytesToUuid(rnds);\n}\n\nmodule.exports = v4;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC92NC5qcz9jNjRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0Esb0JBQW9CLFNBQVM7QUFDN0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEiLCJmaWxlIjoiMS5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBybmcgPSByZXF1aXJlKCcuL2xpYi9ybmcnKTtcbnZhciBieXRlc1RvVXVpZCA9IHJlcXVpcmUoJy4vbGliL2J5dGVzVG9VdWlkJyk7XG5cbmZ1bmN0aW9uIHY0KG9wdGlvbnMsIGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gYnVmICYmIG9mZnNldCB8fCAwO1xuXG4gIGlmICh0eXBlb2Yob3B0aW9ucykgPT0gJ3N0cmluZycpIHtcbiAgICBidWYgPSBvcHRpb25zID09PSAnYmluYXJ5JyA/IG5ldyBBcnJheSgxNikgOiBudWxsO1xuICAgIG9wdGlvbnMgPSBudWxsO1xuICB9XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIHZhciBybmRzID0gb3B0aW9ucy5yYW5kb20gfHwgKG9wdGlvbnMucm5nIHx8IHJuZykoKTtcblxuICAvLyBQZXIgNC40LCBzZXQgYml0cyBmb3IgdmVyc2lvbiBhbmQgYGNsb2NrX3NlcV9oaV9hbmRfcmVzZXJ2ZWRgXG4gIHJuZHNbNl0gPSAocm5kc1s2XSAmIDB4MGYpIHwgMHg0MDtcbiAgcm5kc1s4XSA9IChybmRzWzhdICYgMHgzZikgfCAweDgwO1xuXG4gIC8vIENvcHkgYnl0ZXMgdG8gYnVmZmVyLCBpZiBwcm92aWRlZFxuICBpZiAoYnVmKSB7XG4gICAgZm9yICh2YXIgaWkgPSAwOyBpaSA8IDE2OyArK2lpKSB7XG4gICAgICBidWZbaSArIGlpXSA9IHJuZHNbaWldO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBidWYgfHwgYnl0ZXNUb1V1aWQocm5kcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdjQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///1\n")},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "src/res/img/control-sprites.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2ltZy9jb250cm9sLXNwcml0ZXMucG5nPzEyNTAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMi5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNyYy9yZXMvaW1nL2NvbnRyb2wtc3ByaXRlcy5wbmdcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///2\n')},function(module,exports){eval("// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\nEventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///3\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./src/lib/level.ts\nvar GameMode;\r\n(function (GameMode) {\r\n    GameMode["View"] = "view";\r\n    GameMode["Force"] = "force";\r\n    GameMode["Velocity"] = "velocity";\r\n    GameMode["Position"] = "position";\r\n})(GameMode || (GameMode = {}));\r\nvar TileType;\r\n(function (TileType) {\r\n    TileType["Wood"] = "wood";\r\n    TileType["Steel"] = "steel";\r\n    TileType["Aluminum"] = "aluminum";\r\n    TileType["Styrofoam"] = "plastic";\r\n})(TileType || (TileType = {}));\r\nvar AnnotationType;\r\n(function (AnnotationType) {\r\n    AnnotationType["Text"] = "text";\r\n})(AnnotationType || (AnnotationType = {}));\r\nvar ObjectiveType;\r\n(function (ObjectiveType) {\r\n    ObjectiveType["Type"] = "type";\r\n    ObjectiveType["Velocity"] = "velocity";\r\n    ObjectiveType["Momentum"] = "momentum";\r\n    ObjectiveType["AngularVelocity"] = "angular-velocity";\r\n})(ObjectiveType || (ObjectiveType = {}));\r\nvar GoalType;\r\n(function (GoalType) {\r\n    GoalType[GoalType["Required"] = 0] = "Required";\r\n    GoalType[GoalType["Bonus"] = 1] = "Bonus";\r\n})(GoalType || (GoalType = {}));\r\n\n// EXTERNAL MODULE: delegated ./node_modules/phaser/src/phaser.js from dll-reference library\nvar phaserfrom_dll_reference_library = __webpack_require__(0);\n\n// CONCATENATED MODULE: ./src/scene/level/banner.ts\n\r\nvar LevelOutcome;\r\n(function (LevelOutcome) {\r\n    LevelOutcome[LevelOutcome["Success"] = 0] = "Success";\r\n    LevelOutcome[LevelOutcome["Failure"] = 1] = "Failure";\r\n})(LevelOutcome || (LevelOutcome = {}));\r\nclass banner_LevelBanner extends phaserfrom_dll_reference_library["GameObjects"].Container {\r\n    constructor(scene, type) {\r\n        super(scene);\r\n        this.bannerType = type;\r\n        this.banner = scene.make.image({\r\n            key: "banners",\r\n            frame: type,\r\n            alpha: 0,\r\n            scale: 0\r\n        });\r\n        this.add(this.banner);\r\n    }\r\n    begin() {\r\n        this.scene.tweens.add({\r\n            targets: this.banner,\r\n            alpha: 1,\r\n            scaleX: 1,\r\n            scaleY: 1,\r\n            duration: 1000,\r\n            ease: \'Elastic\',\r\n            easeParams: [1.1, 0.5]\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/util/index.ts\nconst { sqrt, pow, PI } = Math;\r\nfunction last(arr) {\r\n    return arr.length > 0 ? arr[arr.length - 1] : null;\r\n}\r\nfunction promise(anim) {\r\n    return new Promise(resolve => anim.onComplete(resolve));\r\n}\r\nfunction noop() {\r\n    return new Promise(resolve => resolve());\r\n}\r\nfunction inset(rect, amount) {\r\n    return rect.setTo(rect.left + amount, rect.top + amount, rect.width - amount * 2, rect.height - amount * 2);\r\n}\r\nfunction reverseEnum(type) {\r\n    for (const member in type) {\r\n        if (type.hasOwnProperty(member)) {\r\n            type[type[member]] = member;\r\n        }\r\n    }\r\n}\r\nfunction find(arr, predicate) {\r\n    const index = arr.findIndex(predicate);\r\n    if (index !== -1)\r\n        return arr[index];\r\n    else\r\n        return null;\r\n}\r\n\n// CONCATENATED MODULE: ./src/util/math.ts\nconst { pow: math_pow, sqrt: math_sqrt, hypot, abs } = Math;\r\nfunction square(n) {\r\n    return n * n;\r\n}\r\nfunction clamp(min, x, max) {\r\n    return Math.min(Math.max(x, min), max);\r\n}\r\nfunction dist(a, b) {\r\n    if (typeof a === "number" && typeof b === "number")\r\n        return abs(a - b);\r\n    if (typeof a === "number" && typeof b === "object")\r\n        return abs(a - Vector.len(b));\r\n    if (typeof a === "object" && typeof b === "number")\r\n        return abs(Vector.len(a) - b);\r\n    if (typeof a === "object" && typeof b === "object")\r\n        return Vector.dist(a, b);\r\n    throw new Error("Operands must both be of the same type!");\r\n}\r\n// tslint:disable:no-use-before-declare\r\nclass Vector {\r\n    static get zero() { return new Vector(0, 0); }\r\n    /**\r\n     * Returns a < b.\r\n     */\r\n    static lt(a, b) {\r\n        if (typeof a === "number")\r\n            return a < Vector.len(b);\r\n        return a.x < b.x && a.y < b.y;\r\n    }\r\n    /**\r\n     * Returns a > b.\r\n     */\r\n    static gt(a, b) {\r\n        if (typeof a === "number")\r\n            return a > Vector.len(b);\r\n        return a.x > b.x && a.y > b.y;\r\n    }\r\n    static lensq(v) {\r\n        return Vector.dot(v, v);\r\n    }\r\n    static dot(a, b) {\r\n        return a.x * b.x + a.y * b.y;\r\n    }\r\n    static len(v) {\r\n        return hypot(v.x, v.y);\r\n    }\r\n    static dist(a, b) {\r\n        return Vector.sub(a, b).length();\r\n    }\r\n    static div(a, b) {\r\n        return typeof b === "number" ?\r\n            new Vector(a.x / b, a.y / b) :\r\n            new Vector(a.x / b.x, a.y / b.y);\r\n    }\r\n    static mult(a, b) {\r\n        return typeof b === "number" ?\r\n            new Vector(a.x * b, a.y * b) :\r\n            new Vector(a.x * b.x, a.y * b.y);\r\n    }\r\n    static sub(a, b) {\r\n        if (typeof b === "number") {\r\n            const len = Vector.len(a);\r\n            return new Vector(a.x - b * a.x / len, a.y - b * a.y / len);\r\n        }\r\n        return new Vector(a.x - b.x, a.y - b.y);\r\n    }\r\n    static add(a, b) {\r\n        if (typeof b === "number") {\r\n            const len = Vector.len(a);\r\n            return new Vector(a.x + b * a.x / len, a.y + b * a.y / len);\r\n        }\r\n        return new Vector(a.x + b.x, a.y + b.y);\r\n    }\r\n    static normalize(v) {\r\n        const l = Vector.len(v);\r\n        return new Vector(v.x / l, v.y / l);\r\n    }\r\n    constructor(x, y) {\r\n        if (typeof x === "number") {\r\n            this.x = x;\r\n            this.y = typeof y === "number" ? y : x;\r\n        }\r\n        else {\r\n            this.x = x.x;\r\n            this.y = x.y;\r\n        }\r\n    }\r\n    length() { return Vector.len(this); }\r\n    normalized() { return Vector.normalize(this); }\r\n    plus(v) { return Vector.add(this, v); }\r\n    minus(v) { return Vector.sub(this, v); }\r\n    times(v) { return Vector.mult(this, v); }\r\n    over(v) { return Vector.div(this, v); }\r\n    dot(v) { return Vector.dot(this, v); }\r\n    ray() { return new Ray(Vector.zero, this); }\r\n    toString() { return `⟨${this.x}, ${this.y}⟩`; }\r\n    toFixed(p) { return `⟨${this.x.toFixed(p)}, ${this.y.toFixed(p)}⟩`; }\r\n    toPrecision(p) { return `⟨${this.x.toPrecision(p)}, ${this.y.toPrecision(p)}⟩`; }\r\n    toExponential(p) { return `⟨${this.x.toExponential(p)}, ${this.y.toExponential(p)}⟩`; }\r\n}\r\nclass Ray {\r\n    constructor(source, direction) {\r\n        this.source = { x: source.x, y: source.y };\r\n        this.direction = { x: direction.x, y: direction.y };\r\n    }\r\n    get x1() { return this.source.x; }\r\n    get y1() { return this.source.y; }\r\n    get x2() { return this.x1 + this.direction.x; }\r\n    get y2() { return this.y1 + this.direction.y; }\r\n    get end() { return Vector.add(this.source, this.direction); }\r\n    ;\r\n    get length() { return Vector.len(this.direction); }\r\n    get angle() { return Math.atan2(this.direction.y, this.direction.x); }\r\n    get unit() { return new Ray(this.source, Vector.div(this.direction, this.length)); }\r\n    plus(x) {\r\n        if (typeof x === "number")\r\n            return new Ray(this.source, Vector.add(this.direction, Vector.normalize(this.direction).times(x)));\r\n        return new Ray(this.source, Vector.add(this.direction, x));\r\n    }\r\n    times(x) {\r\n        return new Ray(this.source, Vector.mult(this.direction, x));\r\n    }\r\n}\r\nclass Size {\r\n    static from(v) {\r\n        return new Size(v.x, v.y);\r\n    }\r\n    constructor(width, height) {\r\n        if (typeof width === "number") {\r\n            this.width = width;\r\n            this.height = typeof height === "number" ? height : width;\r\n        }\r\n        else {\r\n            this.width = width.width;\r\n            this.height = width.height;\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/util/measurement.ts\n\r\n\r\nconst { PI: measurement_PI, pow: measurement_pow } = Math;\r\nfunction measurement_abs(x) {\r\n    if (typeof x === "number")\r\n        return Math.abs(x);\r\n    else\r\n        return new Measurement(Math.abs(x.value), x.unit);\r\n}\r\nfunction precision(p) {\r\n    return (tags, ...keys) => {\r\n        let str = tags[0];\r\n        for (let i = 1; i < tags.length; i++) {\r\n            str += keys[i - 1].toPrecision(p);\r\n            str += tags[i];\r\n        }\r\n        return str;\r\n    };\r\n}\r\nfunction fixed(p) {\r\n    return (tags, ...keys) => {\r\n        let str = tags[0];\r\n        for (let i = 1; i < tags.length; i++) {\r\n            let num = keys[i - 1];\r\n            if (!(num instanceof Vector) && typeof p === "number" && measurement_abs(num).valueOf() < measurement_pow(10, -p))\r\n                num = measurement_abs(num); // fixes -0.0\r\n            str += num.toFixed(p);\r\n            str += tags[i];\r\n        }\r\n        return str;\r\n    };\r\n}\r\nvar Distance;\r\n(function (Distance) {\r\n    Distance["Pixel"] = "px";\r\n    Distance["Meter"] = "m";\r\n})(Distance || (Distance = {}));\r\nvar Time;\r\n(function (Time) {\r\n    Time["Second"] = "s";\r\n    Time["Step"] = "step";\r\n})(Time || (Time = {}));\r\nvar Force;\r\n(function (Force) {\r\n    Force["Newton"] = "N";\r\n})(Force || (Force = {}));\r\nvar Mass;\r\n(function (Mass) {\r\n    Mass["Kilogram"] = "kg";\r\n})(Mass || (Mass = {}));\r\nvar Angle;\r\n(function (Angle) {\r\n    Angle["Degree"] = "\\u00B0";\r\n    Angle["Radian"] = "rad";\r\n})(Angle || (Angle = {}));\r\nreverseEnum(Distance);\r\nreverseEnum(Time);\r\nreverseEnum(Force);\r\nreverseEnum(Mass);\r\nreverseEnum(Angle);\r\nclass Unit {\r\n    constructor(num, den) {\r\n        this.numerator = typeof num === "string" ? [num] : num.sort();\r\n        this.denominator = typeof den === "string" ? [den] : (den ? den.sort() : []);\r\n    }\r\n    expanded() {\r\n        const [num, den] = [[...this.numerator], [...this.denominator]];\r\n        const expand = (n, d) => {\r\n            for (const u of [...n]) {\r\n                let ni = n.indexOf(u);\r\n                if (ni === -1)\r\n                    continue;\r\n                switch (u) {\r\n                    case Force.Newton:\r\n                        n.splice(ni, 1, Mass.Kilogram, Distance.Meter);\r\n                        d.push(Time.Second, Time.Second);\r\n                        break;\r\n                }\r\n            }\r\n        };\r\n        expand(num, den);\r\n        expand(den, num);\r\n        return new Unit(num, den);\r\n    }\r\n    simplified() {\r\n        const [num, den] = [[...this.numerator], [...this.denominator]];\r\n        for (const u of [...num, ...den]) {\r\n            let ni = num.indexOf(u);\r\n            let di = den.indexOf(u);\r\n            while (ni !== -1 && di !== -1) {\r\n                num.splice(ni, 1);\r\n                den.splice(di, 1);\r\n                ni = num.indexOf(u);\r\n                di = den.indexOf(u);\r\n            }\r\n        }\r\n        const simplify = (n, d) => {\r\n            let found = false;\r\n            do {\r\n                found = false;\r\n                if (n.indexOf(Mass.Kilogram) !== -1 &&\r\n                    n.indexOf(Distance.Meter) !== -1 &&\r\n                    d.indexOf(Time.Second) !== -1 &&\r\n                    d.indexOf(Time.Second) !== d.lastIndexOf(Time.Second)) {\r\n                    n.splice(n.indexOf(Mass.Kilogram), 1);\r\n                    n.splice(n.indexOf(Distance.Meter), 1);\r\n                    d.splice(n.indexOf(Time.Second), 1);\r\n                    d.splice(n.indexOf(Time.Second), 1);\r\n                    n.push(Force.Newton);\r\n                    found = true;\r\n                }\r\n            } while (found);\r\n        };\r\n        simplify(num, den);\r\n        simplify(den, num);\r\n        return new Unit(num, den);\r\n    }\r\n    toString() {\r\n        let str = "";\r\n        for (let ni = 0; ni < this.numerator.length; ni++) {\r\n            if (ni > 0) {\r\n                if (this.numerator[ni] === this.numerator[ni - 1]) {\r\n                    str += "²";\r\n                    continue;\r\n                }\r\n                str += " × ";\r\n            }\r\n            str += this.numerator[ni];\r\n        }\r\n        for (let di = 0; di < this.denominator.length; di++) {\r\n            if (di > 0 && this.denominator[di] === this.denominator[di - 1]) {\r\n                str += "²";\r\n                continue;\r\n            }\r\n            str += " / ";\r\n            str += this.denominator[di];\r\n        }\r\n        return str;\r\n    }\r\n    times(other) { return Unit.mult(this, other); }\r\n    over(other) { return Unit.div(this, other); }\r\n    static mult(u1, u2) {\r\n        u1 = u1.expanded();\r\n        u2 = u2.expanded();\r\n        return new Unit([...u1.numerator, ...u2.numerator], [...u1.denominator, ...u2.denominator])\r\n            .simplified();\r\n    }\r\n    static div(u1, u2) {\r\n        u1 = u1.expanded();\r\n        u2 = u2.expanded();\r\n        return new Unit([...u1.numerator, ...u2.denominator], [...u1.denominator, ...u2.numerator])\r\n            .simplified();\r\n    }\r\n}\r\nUnit.scalar = new Unit([]);\r\n(function (Force) {\r\n    Force.PixelNewton = new Unit([Mass.Kilogram, Distance.Pixel], [Time.Second, Time.Second]);\r\n})(Force || (Force = {}));\r\nvar Velocity;\r\n(function (Velocity) {\r\n    Velocity.PixelsPerStep = new Unit(Distance.Pixel, Time.Step);\r\n    Velocity.MetersPerSecond = new Unit(Distance.Meter, Time.Second);\r\n})(Velocity || (Velocity = {}));\r\nvar AngularVelocity;\r\n(function (AngularVelocity) {\r\n    AngularVelocity.DegreesPerStep = new Unit(Angle.Degree, Time.Step);\r\n    AngularVelocity.DegreesPerSecond = new Unit(Angle.Degree, Time.Second);\r\n    AngularVelocity.RadiansPerStep = new Unit(Angle.Radian, Time.Step);\r\n    AngularVelocity.RadiansPerSecond = new Unit(Angle.Radian, Time.Second);\r\n})(AngularVelocity || (AngularVelocity = {}));\r\nvar Momentum;\r\n(function (Momentum) {\r\n    Momentum.KilogramMetersPerSecond = new Unit([Mass.Kilogram, Distance.Meter], [Time.Second]);\r\n})(Momentum || (Momentum = {}));\r\nvar convert;\r\n(function (convert) {\r\n    function angle(value, from, to) {\r\n        if (from === to)\r\n            return value;\r\n        // base unit is radians\r\n        switch (from) {\r\n            case Angle.Degree:\r\n                value = value / 180 * measurement_PI;\r\n                break;\r\n        }\r\n        switch (to) {\r\n            case Angle.Degree:\r\n                return value * 180 / measurement_PI;\r\n            case Angle.Radian:\r\n                return value;\r\n        }\r\n    }\r\n    convert.angle = angle;\r\n    function distance(value, from, to) {\r\n        if (from === to)\r\n            return value;\r\n        // base unit is meters\r\n        switch (from) {\r\n            case Distance.Pixel:\r\n                value = value / 100;\r\n                break;\r\n        }\r\n        switch (to) {\r\n            case Distance.Pixel:\r\n                return value * 100;\r\n            case Distance.Meter:\r\n                return value;\r\n        }\r\n    }\r\n    convert.distance = distance;\r\n    function time(value, from, to) {\r\n        if (from === to)\r\n            return value;\r\n        // base unit is seconds\r\n        switch (from) {\r\n            case Time.Step:\r\n                value = value / 60;\r\n                break;\r\n        }\r\n        switch (to) {\r\n            case Time.Step:\r\n                return value * 60;\r\n            case Time.Second:\r\n                return value;\r\n        }\r\n    }\r\n    convert.time = time;\r\n    function auto(value, from, to) {\r\n        if (!possible(from, to))\r\n            throw new Error(`Incompatible units: ${from}, ${to}`);\r\n        if (from === to)\r\n            return value;\r\n        if (from in Angle)\r\n            return angle(value, from, to);\r\n        if (from in Distance)\r\n            return distance(value, from, to);\r\n        if (from in Time)\r\n            return time(value, from, to);\r\n        return value;\r\n    }\r\n    convert.auto = auto;\r\n    function possible(from, to) {\r\n        if (from === to)\r\n            return true;\r\n        if (from in Angle && to in Angle)\r\n            return true;\r\n        if (from in Distance && to in Distance)\r\n            return true;\r\n        if (from in Time && to in Time)\r\n            return true;\r\n        return false;\r\n    }\r\n    convert.possible = possible;\r\n})(convert || (convert = {}));\r\nclass Measurement {\r\n    // tslint:disable-next-line:no-shadowed-variable\r\n    constructor(value, unit) {\r\n        this.value = value;\r\n        this.unit = unit instanceof Unit ? unit : new Unit([unit]);\r\n    }\r\n    toString(radix) {\r\n        // tslint:disable-next-line:prefer-template\r\n        return `${this.value.toString(radix)} ${this.unit}`;\r\n    }\r\n    toFixed(fractionDigits) {\r\n        // tslint:disable-next-line:prefer-template\r\n        return `${this.value.toFixed(fractionDigits)} ${this.unit}`;\r\n    }\r\n    toExponential(fractionDigits) {\r\n        // tslint:disable-next-line:prefer-template\r\n        return `${this.value.toExponential(fractionDigits)} ${this.unit}`;\r\n    }\r\n    // tslint:disable-next-line:no-shadowed-variable\r\n    toPrecision(precision) {\r\n        // tslint:disable-next-line:prefer-template\r\n        return `${this.value.toPrecision(precision)} ${this.unit}`;\r\n    }\r\n    valueOf() {\r\n        return this.value;\r\n    }\r\n    toLocaleString(locales, options) {\r\n        throw new Error("Method not implemented.");\r\n    }\r\n    times(m) {\r\n        if (typeof m === "number")\r\n            return new Measurement(this.value * m, this.unit);\r\n        return new Measurement(this.value * m.value, Unit.mult(this.unit, m.unit));\r\n    }\r\n    over(m) {\r\n        if (typeof m === "number")\r\n            return new Measurement(this.value * m, this.unit);\r\n        return new Measurement(this.value / m.value, Unit.div(this.unit, m.unit));\r\n    }\r\n    to(target, denominator) {\r\n        let val = this.value;\r\n        const unit = this.unit.expanded();\r\n        const num = [...unit.numerator];\r\n        const den = [...unit.denominator];\r\n        if (!(target instanceof Unit))\r\n            target = new Unit(target, denominator);\r\n        const targetExpanded = target.expanded();\r\n        const targetNum = [...targetExpanded.numerator];\r\n        const targetDen = [...targetExpanded.denominator];\r\n        for (const numUnit of num) {\r\n            const i = targetNum.findIndex(n => convert.possible(n, numUnit));\r\n            const [targetNumUnit] = targetNum.splice(i, 1);\r\n            val = convert.auto(val, numUnit, targetNumUnit);\r\n        }\r\n        for (const denUnit of den) {\r\n            const i = targetDen.findIndex(d => convert.possible(d, denUnit));\r\n            const [targetDenUnit] = targetDen.splice(i, 1);\r\n            val = 1 / convert.auto(1 / val, denUnit, targetDenUnit);\r\n        }\r\n        return new Measurement(val, target);\r\n    }\r\n}\r\nclass measurement_VectorMeasurement extends Vector {\r\n    static get zero() { return new measurement_VectorMeasurement(0, 0, Unit.scalar); }\r\n    constructor(x, y, u) {\r\n        if (u) {\r\n            super(x, y);\r\n            this.unit = u instanceof Unit ? u : new Unit(u);\r\n        }\r\n        else {\r\n            super(x);\r\n            this.unit = y instanceof Unit ? y : new Unit(y);\r\n        }\r\n    }\r\n    toString() {\r\n        return `⟨${this.x}, ${this.y}⟩ ${this.unit}`;\r\n    }\r\n    toFixed(p) {\r\n        return fixed(p) `⟨${this.x}, ${this.y}⟩ ` + this.unit.toString();\r\n    }\r\n    toPrecision(p) {\r\n        return precision(p) `⟨${this.x}, ${this.y}⟩ ` + this.unit.toString();\r\n    }\r\n    toExponential(p) {\r\n        return `⟨${this.x.toExponential(p)}, ${this.y.toExponential(p)}⟩ ${this.unit}`;\r\n    }\r\n    to(target, denominator) {\r\n        let unit;\r\n        if (target instanceof Unit)\r\n            unit = target;\r\n        else {\r\n            if (denominator)\r\n                unit = new Unit([target], [denominator]);\r\n            else\r\n                unit = new Unit([target]);\r\n        }\r\n        const xm = new Measurement(this.x, this.unit).to(unit);\r\n        const ym = new Measurement(this.y, this.unit).to(unit);\r\n        return new measurement_VectorMeasurement(xm.value, ym.value, unit);\r\n    }\r\n    magnitude() {\r\n        return new Measurement(super.length(), this.unit);\r\n    }\r\n    times(v) {\r\n        if (v instanceof Measurement)\r\n            return new measurement_VectorMeasurement(super.times(v.value), this.unit.times(v.unit));\r\n        if (v instanceof measurement_VectorMeasurement)\r\n            return new measurement_VectorMeasurement(super.times(v), this.unit.times(v.unit));\r\n        return new measurement_VectorMeasurement(super.times(v), this.unit);\r\n    }\r\n    over(v) {\r\n        if (v instanceof Measurement)\r\n            return new measurement_VectorMeasurement(super.over(v.value), this.unit.over(v.unit));\r\n        if (v instanceof measurement_VectorMeasurement)\r\n            return new measurement_VectorMeasurement(super.over(v), this.unit.over(v.unit));\r\n        return new measurement_VectorMeasurement(super.over(v), this.unit);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/level/tile.ts\n\r\n\r\nconst phaser = __webpack_require__(0);\r\nconst TileStats = {\r\n    [TileType.Wood]: {\r\n        frame: 5,\r\n        mass: 75,\r\n    },\r\n    [TileType.Steel]: {\r\n        frame: 6,\r\n        mass: 120\r\n    },\r\n    [TileType.Aluminum]: {\r\n        frame: 7,\r\n        mass: 100\r\n    },\r\n    [TileType.Styrofoam]: {\r\n        frame: 9,\r\n        mass: 20\r\n    }\r\n};\r\nclass tile_Tile extends Phaser.GameObjects.Sprite {\r\n    constructor(scene, config) {\r\n        const { frame, mass } = TileStats[config.type];\r\n        super(scene, config ? config.x * 32 || 0 : 0, config ? config.y * 32 || 0 : 0, "sprites", frame);\r\n        const matterObj = scene.matter.add.gameObject(this, {\r\n            chamfer: { radius: 16 },\r\n            mass,\r\n            inertia: !config.rotation ? Infinity : undefined,\r\n            friction: config.friction || 0,\r\n            frictionAir: 0,\r\n            frictionStatic: 0,\r\n            restitution: config.elastic ? 1 : 0\r\n        });\r\n        if (config.velocity) {\r\n            const { x, y } = new measurement_VectorMeasurement(config.velocity, Velocity.MetersPerSecond).to(Velocity.PixelsPerStep);\r\n            matterObj.setVelocity(x, y);\r\n        }\r\n        if (typeof config.angularVelocity === "number") {\r\n            const w = new Measurement(config.angularVelocity, AngularVelocity.RadiansPerSecond).to(AngularVelocity.DegreesPerStep);\r\n            matterObj.setAngularVelocity(w.value);\r\n        }\r\n        matterObj.type = "tile";\r\n        matterObj.setInteractive();\r\n        this.tileType = config.type;\r\n        this.allowControl = typeof config.control === "boolean" ? config.control : false;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/config.ts\nvar Text;\r\n(function (Text) {\r\n    Text.Font = {\r\n        Normal: "Clear Sans",\r\n        Display: "Montserrat"\r\n    };\r\n    Text.Header = {\r\n        fontFamily: Text.Font.Display,\r\n        fontStyle: "bold",\r\n        fontSize: 24,\r\n        fill: "black"\r\n    };\r\n    Text.Display = {\r\n        Light: {\r\n            fontFamily: Text.Font.Display,\r\n            fontSize: 16,\r\n            fill: "black"\r\n        },\r\n        Dark: {\r\n            fontFamily: Text.Font.Display,\r\n            fontSize: 16,\r\n            fill: "white"\r\n        }\r\n    };\r\n    Text.Normal = {\r\n        Light: {\r\n            fontFamily: Text.Font.Normal,\r\n            fontSize: 16,\r\n            fill: "black"\r\n        },\r\n        Dark: {\r\n            fontFamily: Text.Font.Normal,\r\n            fontSize: 16,\r\n            fill: "white"\r\n        }\r\n    };\r\n    Text.Small = {\r\n        Light: {\r\n            fontFamily: Text.Font.Normal,\r\n            fontSize: 13,\r\n            fill: "black"\r\n        },\r\n        Dark: {\r\n            fontFamily: Text.Font.Normal,\r\n            fontSize: 13,\r\n            fill: "white"\r\n        }\r\n    };\r\n})(Text || (Text = {}));\r\n\n// CONCATENATED MODULE: ./src/scene/level/goal.ts\n\r\n\r\n\r\n\r\n\r\n\r\nclass goal_Goal extends Phaser.GameObjects.Container {\r\n    constructor(scene, config) {\r\n        super(scene);\r\n        this._completed = false;\r\n        this.tiles = [];\r\n        this.objectives = config.objectives;\r\n        let { x, y } = Vector.mult({ x: config.x, y: config.y }, 32);\r\n        let { x: width, y: height } = Vector.mult({ x: config.width, y: config.height }, 32);\r\n        this.setPosition(x, y);\r\n        this.background = new Phaser.GameObjects.TileSprite(scene, 0, 0, width, height, "sprites", 13);\r\n        this.background.tint = 0xFFAAAA;\r\n        this.add(this.background);\r\n        const border = scene.make.graphics({}, false)\r\n            .lineStyle(2, 0x000000, 0.5)\r\n            .fillStyle(0x000000, 0.25)\r\n            .strokeRect(-width / 2 + 4, -height / 2 + 4, width - 8, height - 8);\r\n        this.add(border);\r\n        const typeObjective = find(this.objectives, o => o.type === ObjectiveType.Type);\r\n        if (typeObjective) {\r\n            const tileImage = scene.make.image({\r\n                key: "sprites",\r\n                frame: TileStats[typeObjective.target].frame,\r\n                alpha: 0.5\r\n            });\r\n            this.add(tileImage);\r\n        }\r\n        const lines = [];\r\n        for (const o of this.objectives) {\r\n            let variable = "";\r\n            let unit = Unit.scalar;\r\n            switch (o.type) {\r\n                case ObjectiveType.Type:\r\n                    continue;\r\n                case ObjectiveType.Velocity:\r\n                    variable = "v";\r\n                    unit = Velocity.MetersPerSecond;\r\n                    break;\r\n                case ObjectiveType.Momentum:\r\n                    variable = "ρ";\r\n                    unit = Momentum.KilogramMetersPerSecond;\r\n                    break;\r\n                case ObjectiveType.AngularVelocity:\r\n                    variable = "ω";\r\n                    unit = AngularVelocity.RadiansPerSecond;\r\n                    break;\r\n            }\r\n            if (typeof o.target === "number") // number\r\n                lines.push(`${variable} = ${new Measurement(o.target, unit).toPrecision(3)}`);\r\n            else if ("x" in o.target) // vector\r\n                lines.push(`${variable} = ${new measurement_VectorMeasurement(o.target, unit).toPrecision(1)}`);\r\n            else // min and max\r\n             {\r\n                let line = variable;\r\n                if (typeof o.target.maximum === "number")\r\n                    line = `${line} < ${new Measurement(o.target.maximum, unit).toPrecision(3)}`;\r\n                if (typeof o.target.maximum === "object")\r\n                    line = `${line} < ${new measurement_VectorMeasurement(o.target.maximum, unit).toPrecision(1)}`;\r\n                if (typeof o.target.minimum === "number")\r\n                    line = `${new Measurement(o.target.minimum, unit).toPrecision(3)} < ${line}`;\r\n                if (typeof o.target.minimum === "object")\r\n                    line = `${new measurement_VectorMeasurement(o.target.minimum, unit).toPrecision(1)} < ${line}`;\r\n                lines.push(line);\r\n            }\r\n        }\r\n        const description = scene.make.text({\r\n            style: Object.assign({ align: "center" }, Text.Header),\r\n            alpha: 0.7,\r\n            origin: 0.5,\r\n            text: lines.join("\\n")\r\n        });\r\n        description.setScale(Math.min(1, (width - 32) / description.width));\r\n        this.add(description);\r\n        const body = scene.matter.add.gameObject(this, {\r\n            isStatic: true,\r\n            isSensor: true,\r\n            shape: {\r\n                type: "rectangle",\r\n                width,\r\n                height\r\n            }\r\n        });\r\n        const world = body.world;\r\n        world.on("collisionstart", this.collisionstart, this);\r\n        world.on("collisionactive", this.collisionactive, this);\r\n        world.on("afterupdate", this.afterupdate, this);\r\n        world.on("collisionend", this.collisionend, this);\r\n    }\r\n    get completed() { return this._completed; }\r\n    set completed(value) {\r\n        const old = this._completed;\r\n        this._completed = value;\r\n        this.background.tint = value ? 0xAAFFAA : 0xFFAAAA;\r\n        if (old !== value)\r\n            this.emit("update:completed", value);\r\n    }\r\n    meetsObjectives(tile) {\r\n        const body = tile.body;\r\n        const bounds = this.body.bounds;\r\n        const epsilon = 10; // these are pixels, so ε = 1 is fine\r\n        const within = body.vertices.every(v => v.x <= bounds.max.x + epsilon && bounds.min.x <= v.x + epsilon &&\r\n            v.y <= bounds.max.y + epsilon && bounds.min.y <= v.y + epsilon);\r\n        return within && this.objectives.every(o => {\r\n            let quantity;\r\n            switch (o.type) {\r\n                case ObjectiveType.Type:\r\n                    return o.target === tile.tileType;\r\n                case ObjectiveType.Velocity:\r\n                    quantity =\r\n                        new measurement_VectorMeasurement(body.velocity, Velocity.PixelsPerStep)\r\n                            .to(Velocity.MetersPerSecond);\r\n                    break;\r\n                case ObjectiveType.Momentum:\r\n                    quantity =\r\n                        new measurement_VectorMeasurement(body.velocity, Velocity.PixelsPerStep)\r\n                            .to(Velocity.MetersPerSecond)\r\n                            .times(new Measurement(body.mass, Mass.Kilogram));\r\n                    break;\r\n                case ObjectiveType.AngularVelocity:\r\n                    quantity =\r\n                        new Measurement(body.angularVelocity, AngularVelocity.DegreesPerStep)\r\n                            .to(AngularVelocity.RadiansPerSecond)\r\n                            .valueOf();\r\n                    break;\r\n                default:\r\n                    return false;\r\n            }\r\n            if (typeof o.target === "number" || "x" in o.target) {\r\n                return dist(quantity, o.target) < 0.05;\r\n            }\r\n            else {\r\n                // min and max\r\n                if (typeof quantity === "object") {\r\n                    if (typeof o.target.maximum !== "undefined")\r\n                        if (Vector.lt(o.target.maximum, quantity))\r\n                            return false;\r\n                    if (typeof o.target.minimum !== "undefined")\r\n                        if (Vector.gt(o.target.minimum, quantity))\r\n                            return false;\r\n                }\r\n                else {\r\n                    if (typeof o.target.maximum === "number" && o.target.maximum < quantity)\r\n                        return false;\r\n                    if (typeof o.target.maximum === "object" && Vector.len(o.target.maximum) < quantity)\r\n                        return false;\r\n                    if (typeof o.target.minimum === "number" && o.target.minimum > quantity)\r\n                        return false;\r\n                    if (typeof o.target.minimum === "object" && Vector.len(o.target.minimum) > quantity)\r\n                        return false;\r\n                }\r\n            }\r\n            return true;\r\n        });\r\n    }\r\n    collisionstart(event) {\r\n        if (this.completed)\r\n            return;\r\n        for (const pair of event.pairs) {\r\n            const { bodyA: a, bodyB: b } = pair;\r\n            if (a !== this.body && b !== this.body)\r\n                continue;\r\n            const tile = (b === this.body ? a : b).gameObject;\r\n            if (tile instanceof tile_Tile) {\r\n                if (this.meetsObjectives(tile)) {\r\n                    this.completed = true;\r\n                }\r\n                else {\r\n                    this.tiles.push(tile);\r\n                }\r\n            }\r\n            else {\r\n                console.warn("huh!!!");\r\n            }\r\n        }\r\n    }\r\n    collisionactive(event) {\r\n        for (const pair of event.pairs) {\r\n            const { bodyA: a, bodyB: b } = pair;\r\n            if (a !== this.body && b !== this.body)\r\n                continue;\r\n            const tile = (b === this.body ? a : b).gameObject;\r\n            if (tile instanceof tile_Tile) {\r\n                if (this.meetsObjectives(tile)) {\r\n                    this.completed = true;\r\n                }\r\n            }\r\n            else {\r\n                console.warn("huh!!");\r\n            }\r\n        }\r\n    }\r\n    collisionend(event) {\r\n        if (this.tiles.length === 0)\r\n            return;\r\n        for (const pair of event.pairs) {\r\n            const { bodyA: a, bodyB: b } = pair;\r\n            if (a !== this.body && b !== this.body)\r\n                continue;\r\n            const tile = (b === this.body ? a : b).gameObject;\r\n            if (tile instanceof tile_Tile) {\r\n                this.tiles.splice(this.tiles.indexOf(tile), 1);\r\n            }\r\n            else {\r\n                console.warn("huh!");\r\n            }\r\n        }\r\n    }\r\n    afterupdate() {\r\n        if (!this.tiles.length) {\r\n            this.completed = false;\r\n            return;\r\n        }\r\n        for (const tile of this.tiles) {\r\n            if (this.meetsObjectives(tile)) {\r\n                this.completed = true;\r\n                return;\r\n            }\r\n        }\r\n        this.completed = false;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/level/selector.ts\n\r\n\r\n\r\n\r\nclass selector_VectorLevelHudSelector extends Phaser.GameObjects.Container {\r\n    constructor(hud, config) {\r\n        super(hud.scene);\r\n        this.scale = 1;\r\n        this.dirty = false;\r\n        this.scene = hud.scene;\r\n        this.hud = hud;\r\n        this.mode = config.mode;\r\n        this.unit = config.unit;\r\n        this.show = config.show;\r\n        this.ray = new Ray({ x: config.x, y: config.y }, Vector.zero);\r\n        if (typeof config.scale === "number")\r\n            this.scale = config.scale;\r\n        const label = {\r\n            x: config.x,\r\n            y: config.y,\r\n            style: Object.assign({ fontWeight: "bold", backgroundColor: "#111111" }, Text.Normal.Dark),\r\n            origin: 0.5,\r\n            padding: 5,\r\n            alpha: 0\r\n        };\r\n        this.labelX = this.scene.make.text(label).setOrigin(0.5);\r\n        this.labelY = this.scene.make.text(label).setOrigin(0.5);\r\n        this.add(this.labelX);\r\n        this.add(this.labelY);\r\n    }\r\n    get state() {\r\n        return this.scene.state;\r\n    }\r\n    query() {\r\n        if (!this.ray)\r\n            return measurement_VectorMeasurement.zero;\r\n        return new measurement_VectorMeasurement(Vector.mult(this.ray.direction, this.scale), this.unit);\r\n    }\r\n    move(x, y) {\r\n        if (this.ray) {\r\n            let d = Vector.sub({ x, y }, this.ray.source);\r\n            let dlen = d.length();\r\n            d = d.times(Math.min(1, 300 / dlen));\r\n            this.ray.direction = d;\r\n            const offset = Vector.div(d, 2);\r\n            const source = this.ray.source;\r\n            const alpha = Math.min(1, dlen / 50);\r\n            const vec = this.query();\r\n            if (this.labelX) {\r\n                this.labelX.setText(new Measurement(vec.x, vec.unit).toPrecision(3));\r\n                this.labelX.setPosition(source.x + offset.x, source.y);\r\n                this.labelX.setAlpha(alpha);\r\n            }\r\n            if (this.labelY) {\r\n                this.labelY.setText(new Measurement(vec.y, vec.unit).toPrecision(3));\r\n                this.labelY.setPosition(source.x + d.x, source.y + offset.y);\r\n                this.labelY.setAlpha(alpha);\r\n            }\r\n        }\r\n    }\r\n    get start() { return new Vector(this.ray.source); }\r\n    get end() { return this.ray.end; }\r\n}\r\nclass selector_ForceLevelHudSelector extends selector_VectorLevelHudSelector {\r\n    constructor(hud, origin) {\r\n        super(hud, {\r\n            mode: GameMode.Force,\r\n            unit: new Unit(Force.Newton),\r\n            scale: 100,\r\n            x: origin.x,\r\n            y: origin.y,\r\n            show: true\r\n        });\r\n    }\r\n    get color() { return 0x800000; }\r\n    get info() {\r\n        if (!this.state.target)\r\n            return "";\r\n        const body = this.state.target.body;\r\n        const time = new Measurement(1 / 60, Time.Second);\r\n        const mass = new Measurement(body.mass, Mass.Kilogram);\r\n        const force = this.query().magnitude();\r\n        const accel = force.over(mass);\r\n        const velo = accel.times(time);\r\n        const acceleration = precision(3) `F (${force}) / m (${mass}) = a (${accel})`;\r\n        const velocity = precision(3) `a (${accel}) × Δt (1/60 s) = Δv (${velo})`;\r\n        return [acceleration, velocity].join("\\n");\r\n    }\r\n    activate() {\r\n        if (!this.ray)\r\n            return;\r\n        this.hud.resume();\r\n        if (this.state.modes) {\r\n            this.state.modes[this.mode]--;\r\n        }\r\n        if (this.ray && this.state.target) {\r\n            const body = this.state.target.body;\r\n            const s = this.ray.source;\r\n            const d = this.ray.direction;\r\n            // gonna treat the arrow length as 100 * matter-newton   \r\n            let force = new measurement_VectorMeasurement(Vector.div(d, 100), Force.PixelNewton);\r\n            // maximum 3 matter-newton = 300 N\r\n            force = force.times(Math.min(1, 3 / force.length()));\r\n            // kg * px / s^2 is matterjs\'s internal force unit\r\n            // see http://brm.io/matter-js/docs/files/src_body_Body.js.html line 582\r\n            // so no conversion necessary\r\n            this.state.target.applyForceFrom(new Phaser.Math.Vector2(s.x, s.y), new Phaser.Math.Vector2(force.x, force.y));\r\n        }\r\n    }\r\n}\r\nclass selector_VelocityLevelHudSelector extends selector_VectorLevelHudSelector {\r\n    constructor(hud, origin) {\r\n        super(hud, {\r\n            mode: GameMode.Velocity,\r\n            unit: Velocity.MetersPerSecond,\r\n            scale: 1 / 30,\r\n            x: origin.x,\r\n            y: origin.y,\r\n            show: true\r\n        });\r\n    }\r\n    get color() { return 0x006ad1; }\r\n    get info() {\r\n        if (!this.state.target)\r\n            return "";\r\n        const body = this.state.target.body;\r\n        const mass = new Measurement(body.mass, Mass.Kilogram);\r\n        const velo = this.query().magnitude();\r\n        const momentum = precision(3) `m (${mass}) * v (${velo}) = ρ (${velo.times(mass)})`;\r\n        return momentum;\r\n    }\r\n    activate() {\r\n        if (!this.ray)\r\n            return;\r\n        this.hud.resume();\r\n        if (this.state.modes) {\r\n            this.state.modes[this.mode]--;\r\n        }\r\n        if (this.ray && this.state.target) {\r\n            const body = this.state.target;\r\n            const s = this.ray.source;\r\n            const d = this.ray.direction;\r\n            // gonna treat the arrow length as 30 * m / s\r\n            let velocity = new measurement_VectorMeasurement(Vector.div(d, 30), Velocity.MetersPerSecond);\r\n            // maximum 10 m/s\r\n            velocity = velocity.times(Math.min(1, 10 / velocity.length()));\r\n            velocity = velocity.to(Velocity.PixelsPerStep);\r\n            this.state.target.setVelocity(velocity.x, velocity.y);\r\n        }\r\n    }\r\n}\r\nclass selector_PositionLevelHudSelector extends selector_VectorLevelHudSelector {\r\n    constructor(hud, origin) {\r\n        super(hud, {\r\n            mode: GameMode.Position,\r\n            unit: new Unit(Distance.Meter),\r\n            scale: 0.01,\r\n            x: origin.x,\r\n            y: origin.y,\r\n            show: true\r\n        });\r\n    }\r\n    get color() { return 0x228b22; }\r\n    get info() {\r\n        if (!this.state.target)\r\n            return "";\r\n        const { x, y } = this.state.target;\r\n        const pos = new measurement_VectorMeasurement({ x, y }, Distance.Pixel).to(Distance.Meter);\r\n        return precision(3) `x = ${pos.plus(this.query())}`;\r\n    }\r\n    activate() {\r\n        if (!this.ray)\r\n            return;\r\n        if (this.state.modes) {\r\n            this.state.modes[this.mode]--;\r\n        }\r\n        if (this.ray && this.state.target) {\r\n            const pos = Vector.add({ x: this.state.target.x, y: this.state.target.y }, this.ray.direction);\r\n            this.state.target.setPosition(pos.x, pos.y);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/control/tooltip.ts\n\r\nclass tooltip_Tooltip extends phaserfrom_dll_reference_library["GameObjects"].Container {\r\n    constructor(scene, config) {\r\n        super(scene, config.x, config.y);\r\n        const padding = config.padding || 5;\r\n        if (config.style.fontSize)\r\n            config.style.fontSize *= window.devicePixelRatio;\r\n        config.scale = ("scale" in config ? config.scale : 1) / window.devicePixelRatio;\r\n        this.text = scene.make.text(config);\r\n        this.text.resolution = window.devicePixelRatio;\r\n        const { width, height } = this.text;\r\n        this.graphics = scene.make.graphics({ width: width + padding * 2, height: height + padding * 2 + 10 });\r\n        this.graphics.fillStyle(0xAAAAAA, 0.85);\r\n        this.graphics.fillRect(-padding - width / 2, -padding - height / 2, width + padding * 2, height + padding * 2);\r\n        this.graphics.fillTriangle(-5, height / 2 + padding, 5, height / 2 + padding, 0, height / 2 + padding + 7);\r\n        this.add([this.graphics, this.text]);\r\n        this.alpha = 0;\r\n        [this.width, this.height] = [width + padding * 2, height + padding * 2];\r\n        const target = config.target;\r\n        if (!target)\r\n            throw new Error("Tooltip must have a target.");\r\n        target.on("pointerover", this.pointerover, this);\r\n        target.on("pointerout", this.pointerout, this);\r\n    }\r\n    pointerover(pointer) {\r\n        if (this.tween)\r\n            this.tween.stop();\r\n        this.tween = this.scene.tweens.add({\r\n            targets: this,\r\n            alpha: 1,\r\n            duration: 100,\r\n            delay: 500,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n    }\r\n    pointerout(pointer) {\r\n        if (this.tween)\r\n            this.tween.stop();\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            alpha: 0,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/control/button.ts\n\r\nclass button_Button extends Phaser.GameObjects.Container {\r\n    constructor(scene, config) {\r\n        super(scene, config.x, config.y);\r\n        this.sprite = scene.make.sprite(config.sprite, false);\r\n        if (config.sprite.tint)\r\n            this.sprite.tint = config.sprite.tint;\r\n        this.add(this.sprite);\r\n        if ("text" in config) {\r\n            const textConfig = Object.assign({ origin: 0.5 }, config.text);\r\n            if (textConfig.style.fontSize)\r\n                textConfig.style.fontSize *= window.devicePixelRatio;\r\n            textConfig.scale = ("scale" in textConfig ? textConfig.scale : 1) / window.devicePixelRatio;\r\n            this.text = scene.make.text(textConfig, false);\r\n            this.add(this.text);\r\n        }\r\n        if ("tooltip" in config) {\r\n            this.tooltip = new tooltip_Tooltip(scene, Object.assign({ target: this, origin: 0.5 }, config.tooltip));\r\n            this.tooltip.y = -45;\r\n            this.add(this.tooltip);\r\n        }\r\n        this.sprite.setInteractive();\r\n        this.sprite.on("pointerover", this.pointerover, this);\r\n        this.sprite.on("pointerout", this.pointerout, this);\r\n        this.sprite.on("pointerdown", this.pointerdown, this);\r\n        this.sprite.on("pointerup", this.pointerup, this);\r\n    }\r\n    setText(text) {\r\n        if (this.text) {\r\n            this.text.setText(text);\r\n        }\r\n    }\r\n    pointerover(pointer) {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            scaleX: 0.9,\r\n            scaleY: 0.9,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n        this.emit("pointerover", ...arguments);\r\n    }\r\n    pointerout(pointer) {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            scaleX: 1.0,\r\n            scaleY: 1.0,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n        this.emit("pointerout", ...arguments);\r\n    }\r\n    pointerdown(pointer) {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            scaleX: 0.8,\r\n            scaleY: 0.8,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n        this.emit("pointerdown", ...arguments);\r\n    }\r\n    pointerup(pointer) {\r\n        this.scene.tweens.add({\r\n            targets: this,\r\n            scaleX: 0.9,\r\n            scaleY: 0.9,\r\n            duration: 100,\r\n            easing: "Cubic.easeIn"\r\n        });\r\n        this.emit("pointerup", ...arguments);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/util/ui.ts\n\r\nvar ControlAlignment;\r\n(function (ControlAlignment) {\r\n    ControlAlignment[ControlAlignment["Left"] = 1] = "Left";\r\n    ControlAlignment[ControlAlignment["Right"] = 2] = "Right";\r\n    ControlAlignment[ControlAlignment["Center"] = 4] = "Center";\r\n    ControlAlignment[ControlAlignment["Top"] = 8] = "Top";\r\n    ControlAlignment[ControlAlignment["Bottom"] = 16] = "Bottom";\r\n})(ControlAlignment || (ControlAlignment = {}));\r\nclass ui_HudButton extends button_Button {\r\n    constructor(scene, config) {\r\n        const { height, width } = scene.cameras.main;\r\n        const c = Object.assign({ align: ControlAlignment.Left }, config);\r\n        let offset = c.offset || { x: 0, y: 0 };\r\n        if ((c.align & ControlAlignment.Right) === ControlAlignment.Right)\r\n            offset = { x: width - offset.x, y: offset.y };\r\n        if ((c.align & ControlAlignment.Bottom) === ControlAlignment.Bottom)\r\n            offset = { x: offset.x, y: height - offset.y };\r\n        super(scene, Object.assign({}, offset, { text: {\r\n                text: c.text,\r\n                style: {\r\n                    fontFamily: "Clear Sans",\r\n                    fontStyle: "bold",\r\n                    fontSize: 24,\r\n                    fill: "white"\r\n                }\r\n            }, sprite: {\r\n                key: c.sprite,\r\n                frame: c.frame,\r\n                scale: 0.5\r\n            }, tooltip: {\r\n                text: c.tooltip,\r\n                style: {\r\n                    fontFamily: "Clear Sans",\r\n                    fontSize: 12,\r\n                    fill: "white"\r\n                }\r\n            } }));\r\n        if (c.handler)\r\n            this.on("pointerdown", c.handler);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/level/hud.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { min, max } = Math;\r\nconst modeBtns = {\r\n    [GameMode.Force]: {\r\n        frame: 1,\r\n        text: "F",\r\n        tooltip: "Force Mode"\r\n    },\r\n    [GameMode.Velocity]: {\r\n        frame: 5,\r\n        text: "V",\r\n        tooltip: "Velocity Mode"\r\n    },\r\n    [GameMode.Position]: {\r\n        frame: 3,\r\n        text: "X",\r\n        tooltip: "Position Mode"\r\n    }\r\n};\r\nclass hud_LevelHud extends Phaser.GameObjects.Container {\r\n    constructor(scene) {\r\n        super(scene);\r\n        this.dirty = false;\r\n        this.paused = false;\r\n        this.scene = scene;\r\n        const cam = scene.cameras.main;\r\n        const { height: py, width: px } = scene.padding;\r\n        const height = Math.min(scene.bounds.height, cam.height - py * 2);\r\n        const width = Math.min(scene.bounds.width, cam.width - px * 2);\r\n        this.frame = scene.make.graphics({})\r\n            .fillStyle(0xFFFFFF)\r\n            .fillRect(0, 0, px, height + py * 2)\r\n            .fillRect(width + px, 0, px, height + py * 2)\r\n            .fillRect(0, 0, width + px * 2, py)\r\n            .fillRect(0, height + py, width + px * 2, py)\r\n            .lineStyle(4, 0x000000)\r\n            .strokeRect(px, py, width, height);\r\n        this.add(this.frame);\r\n        this.overlays = scene.make.graphics({});\r\n        this.add(this.overlays);\r\n        // current level\r\n        this.add(new ui_HudButton(scene, {\r\n            frame: 1,\r\n            sprite: "controls",\r\n            offset: { x: px + 24, y: py + height + 32 },\r\n            text: "«",\r\n            tooltip: "Back to Level Select",\r\n            handler: () => scene.back()\r\n        }));\r\n        this.add(new ui_HudButton(scene, {\r\n            frame: 1,\r\n            sprite: "controls",\r\n            offset: { x: px + 24 + 64, y: py + height + 32 },\r\n            text: "↺",\r\n            tooltip: "Retry",\r\n            handler: () => scene.scene.restart({ level: scene.level })\r\n        }));\r\n        this.add(scene.make.text({\r\n            x: px + 24 + 64 + 64,\r\n            y: py + height + 18,\r\n            text: `Level ${scene.state.level.index + 1}`,\r\n            style: Text.Header\r\n        }));\r\n        // information\r\n        this.add(this.actionInfo = scene.make.text({\r\n            x: px + width / 2,\r\n            y: py + height + 30,\r\n            text: "",\r\n            origin: 0.5,\r\n            style: Text.Normal.Light\r\n        }));\r\n        this.add(this.targetInfo = scene.make.text({\r\n            x: px + width,\r\n            y: py,\r\n            text: "",\r\n            origin: { x: 1, y: 0 },\r\n            backgroundColor: "white",\r\n            padding: 10,\r\n            style: Text.Normal.Light\r\n        }));\r\n        this.add(this.tilePreview = scene.make.image({\r\n            alpha: 0.5,\r\n            x: px + width - 150,\r\n            y: py + 8,\r\n            scale: 0.75,\r\n            origin: { x: 1, y: 0 },\r\n            key: scene.state.target && scene.state.target.texture.key,\r\n            frame: scene.state.target && scene.state.target.frame.name,\r\n            visible: false\r\n        }));\r\n        this.add(this.pauseIndicator = scene.make.text({\r\n            x: px,\r\n            y: py - 16,\r\n            origin: { x: 0, y: 1 },\r\n            text: "PAUSED",\r\n            style: Text.Header,\r\n            visible: false\r\n        }));\r\n        if (scene.state.modes) {\r\n            // mode buttons\r\n            let x = scene.padding.width + 24;\r\n            for (const mode in scene.state.modes) {\r\n                if (!scene.state.modes.hasOwnProperty(mode))\r\n                    continue;\r\n                const btn = this.makeModeHudButton(scene, Object.assign({ sprite: "controls", offset: { x, y: py - 32 }, mode }, modeBtns[mode]));\r\n                this.add(btn);\r\n                x += 48;\r\n            }\r\n        }\r\n        // events \r\n        scene.input.on("pointermove", this.onpointermove, this);\r\n        scene.input.on("pointerup", this.onpointerup, this);\r\n        scene.input.on("pointerdown", this.onpointerdown, this);\r\n        scene.events.on("tiledown", this.ontiledown, this);\r\n    }\r\n    destroy() {\r\n        if (this.scene) {\r\n            this.scene.input.off("pointermove", this.onpointermove, this, false);\r\n            this.scene.input.off("pointerup", this.onpointerup, this, false);\r\n            this.scene.events.off("tiledown", this.ontiledown, this, false);\r\n        }\r\n        super.destroy();\r\n    }\r\n    update() {\r\n        const cam = this.scene.cameras.main;\r\n        const level = this.scene.state.level;\r\n        const target = this.scene.state.target;\r\n        const width = min(cam.width - this.scene.padding.width * 2, this.scene.bounds.width);\r\n        const height = min(cam.height - this.scene.padding.height * 2, this.scene.bounds.height);\r\n        const clampedX = clamp(0, cam.scrollX, this.scene.bounds.width - width);\r\n        const clampedY = clamp(0, cam.scrollY, this.scene.bounds.height - height);\r\n        this.setPosition(clampedX, clampedY);\r\n        if (target) {\r\n            const body = target.body;\r\n            this.targetInfo.setBackgroundColor("#FFFFFF");\r\n            const m = new Measurement(body.mass, Mass.Kilogram);\r\n            const x = new measurement_VectorMeasurement(target, Distance.Pixel).to(Distance.Meter);\r\n            const v = new measurement_VectorMeasurement(body.velocity, Velocity.PixelsPerStep).to(Velocity.MetersPerSecond);\r\n            const theta = new Measurement(target.angle, Angle.Degree).to(Angle.Radian);\r\n            const omega = new Measurement(body.angularVelocity, AngularVelocity.DegreesPerStep).to(AngularVelocity.RadiansPerSecond);\r\n            this.targetInfo.setText([\r\n                fixed(1) `m: ${m}`,\r\n                fixed(1) `x: ${x}`,\r\n                fixed(1) `v: ${v}`,\r\n                fixed(1) `θ: ${theta}`,\r\n                fixed(1) `ω: ${omega}`,\r\n            ]);\r\n        }\r\n        else {\r\n            this.targetInfo.setText("No selection");\r\n        }\r\n        if (this.state && this.state.modes) {\r\n            let failed = true;\r\n            for (const mode in this.state.modes) {\r\n                if (!this.state.modes.hasOwnProperty(mode))\r\n                    continue;\r\n                if (this.state.modes[mode] !== 0) {\r\n                    failed = false;\r\n                    break;\r\n                }\r\n            }\r\n            if (failed && this.state.tiles.every(tile => tile.body.speed < 0.05)) {\r\n                // all hope is lost only when everything stops moving\r\n                this.scene.end(LevelOutcome.Failure);\r\n            }\r\n        }\r\n        if (!this.dirty)\r\n            return;\r\n        // update overlays if necessary\r\n        if (this.overlays) {\r\n            this.overlays.clear();\r\n            this.actionInfo.text = "";\r\n            if (this.scene.state.target && this.selector) {\r\n                const { start, end, info, color } = this.selector;\r\n                if (this.selector.show && start instanceof Vector && end instanceof Vector) {\r\n                    this.overlays.lineStyle(4, color);\r\n                    this.overlays.lineBetween(start.x, start.y, end.x, end.y);\r\n                    this.overlays.lineStyle(3, color, 0.6);\r\n                    this.overlays.lineBetween(start.x, start.y, end.x, start.y);\r\n                    this.overlays.lineBetween(end.x, start.y, end.x, end.y);\r\n                    const ray = end.minus(start);\r\n                    const point = ray.plus(10).plus(start);\r\n                    const dir = ray.normalized().times(10);\r\n                    const p1 = Vector.add(end, { x: dir.y, y: -dir.x });\r\n                    const p2 = Vector.add(end, { x: -dir.y, y: dir.x });\r\n                    this.overlays.fillStyle(color, 1);\r\n                    this.overlays.fillTriangle(point.x, point.y, p2.x, p2.y, p1.x, p1.y);\r\n                }\r\n                this.actionInfo.text = info || "";\r\n            }\r\n            this.actionInfo.updateText();\r\n            this.dirty = false;\r\n        }\r\n    }\r\n    pause() {\r\n        this.paused = true;\r\n        this.scene.matter.pause();\r\n        this.pauseIndicator.setVisible(true);\r\n    }\r\n    resume() {\r\n        this.paused = false;\r\n        this.scene.matter.resume();\r\n        this.pauseIndicator.setVisible(false);\r\n    }\r\n    get state() { return this.scene.state; }\r\n    get mode() { return this.state.mode; }\r\n    onpointerdown(pointer, x, y) {\r\n        if (this.selector) {\r\n            this.remove(this.selector, true);\r\n            this.selector = undefined;\r\n        }\r\n        if (!this.paused) {\r\n            this.state.target = null;\r\n            this.tilePreview.setVisible(false);\r\n        }\r\n        else {\r\n            this.resume();\r\n        }\r\n        this.dirty = true;\r\n    }\r\n    onpointerup(pointer, x, y) {\r\n        if (this.selector) {\r\n            if (dist(this.selector.start, this.selector.end) > 0) {\r\n                this.selector.activate();\r\n                if (this.state.modes) {\r\n                    // tslint:disable-next-line:prefer-template\r\n                    const btn = this.getByName("mode:" + this.state.mode);\r\n                    btn.setText(this.state.modes[this.state.mode].toFixed());\r\n                }\r\n            }\r\n            this.remove(this.selector, true);\r\n            this.selector = undefined;\r\n            this.dirty = true;\r\n        }\r\n    }\r\n    onpointermove(pointer) {\r\n        if (this.selector) {\r\n            this.selector.move(pointer.x, pointer.y);\r\n            this.dirty = true;\r\n        }\r\n    }\r\n    ontiledown(pointer, tile) {\r\n        this.scene.state.target = tile;\r\n        this.tilePreview.setVisible(true);\r\n        this.tilePreview.setTexture(tile.texture.key, tile.frame.name);\r\n        this.pause();\r\n        if (!tile.allowControl)\r\n            return;\r\n        if (this.state.modes && this.state.modes[this.mode] <= 0)\r\n            return;\r\n        if (this.state.completed)\r\n            return;\r\n        switch (this.scene.state.mode) {\r\n            case GameMode.Force:\r\n                this.selector = new selector_ForceLevelHudSelector(this, pointer);\r\n                break;\r\n            case GameMode.Velocity:\r\n                this.selector = new selector_VelocityLevelHudSelector(this, pointer);\r\n                break;\r\n            case GameMode.Position:\r\n                this.selector = new selector_PositionLevelHudSelector(this, pointer);\r\n                break;\r\n        }\r\n        if (this.selector)\r\n            this.add(this.selector);\r\n        this.dirty = true;\r\n    }\r\n    makeModeHudButton(scene, config) {\r\n        const c = Object.assign({ align: ControlAlignment.Right | ControlAlignment.Bottom, grey: true }, config);\r\n        const btn = new ui_HudButton(scene, c);\r\n        // tslint:disable-next-line:prefer-template\r\n        btn.setName("mode:" + config.mode);\r\n        btn.on("pointerdown", () => {\r\n            this.scene.state.mode = c.mode;\r\n        });\r\n        if (c.grey) {\r\n            if (scene.state.mode !== c.mode)\r\n                btn.sprite.setPipeline("greyscale");\r\n            btn.on("pointerover", () => {\r\n                btn.sprite.resetPipeline();\r\n            });\r\n            btn.on("pointerout", () => {\r\n                if (c.mode !== this.scene.state.mode)\r\n                    btn.sprite.setPipeline("greyscale");\r\n            });\r\n            scene.state.on("update:mode", mode => {\r\n                try {\r\n                    if (c.mode !== mode) {\r\n                        btn.sprite.setPipeline("greyscale");\r\n                        btn.setText(modeBtns[c.mode].text);\r\n                    }\r\n                    else {\r\n                        if (this.scene.state.modes) {\r\n                            btn.setText(this.scene.state.modes[c.mode].toString());\r\n                            btn.sprite.resetPipeline();\r\n                        }\r\n                    }\r\n                }\r\n                catch (_a) {\r\n                }\r\n            });\r\n        }\r\n        return btn;\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/util/observable.ts\nfunction observable(target, prop) {\r\n    if (!("__shadow" in target))\r\n        target["__shadow"] = {};\r\n    Object.defineProperty(target, prop, {\r\n        get: () => "__shadow" in target ? target.__shadow[prop] : target[prop],\r\n        set: value => {\r\n            if (target.__shadow[prop] === value)\r\n                return;\r\n            target.__shadow[prop] = value;\r\n            // tslint:disable-next-line:prefer-template\r\n            target.emit("update:" + prop.toString(), value);\r\n        }\r\n    });\r\n}\r\n\n// EXTERNAL MODULE: ./node_modules/events/events.js\nvar events = __webpack_require__(3);\n\n// CONCATENATED MODULE: ./src/scene/level/state.ts\nvar __decorate = (undefined && undefined.__decorate) || function (decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n};\r\n\r\n\r\n\r\nconst uuidv4 = __webpack_require__(1);\r\nclass state_LevelState extends events["EventEmitter"] {\r\n    constructor() {\r\n        super();\r\n        this.goals = [];\r\n        this.tiles = [];\r\n        this.level = null;\r\n        this.target = null;\r\n        this.track = null;\r\n        this.mode = GameMode.Force;\r\n        this.completed = false;\r\n        this.id = uuidv4();\r\n    }\r\n    get modes() { return this.level ? this.level.modes : null; }\r\n}\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "goals", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "tiles", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "level", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "target", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "track", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "mode", void 0);\r\n__decorate([\r\n    observable\r\n], state_LevelState.prototype, "completed", void 0);\r\n\n// EXTERNAL MODULE: ./node_modules/uuid/v4.js\nvar v4 = __webpack_require__(1);\n\n// CONCATENATED MODULE: ./src/scene/level/index.ts\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst { sin, cos, random, PI: level_PI, max: level_max, min: level_min, abs: level_abs } = Math;\r\nclass level_LevelScene extends phaserfrom_dll_reference_library["Scene"] {\r\n    constructor() {\r\n        super({ key: "level" });\r\n    }\r\n    init(data) {\r\n        console.log(\'init\', data);\r\n        this.level = data.level;\r\n    }\r\n    preload() {\r\n        // load textures\r\n        if (!("tile-level" in this.textures.list)) {\r\n            const graphics = this.make.graphics({}, false);\r\n            graphics\r\n                .fillStyle(0xFFFFFF)\r\n                .fillRect(0, 0, 128, 128)\r\n                .lineStyle(3, 0x000000, 1)\r\n                .lineBetween(0, 0, 0, 128)\r\n                .lineBetween(0, 0, 128, 0)\r\n                .lineStyle(1, 0x000000, 1)\r\n                .lineBetween(32, 0, 32, 128)\r\n                .lineBetween(0, 32, 128, 32)\r\n                .lineBetween(64, 0, 64, 128)\r\n                .lineBetween(0, 64, 128, 64)\r\n                .lineBetween(96, 0, 96, 128)\r\n                .lineBetween(0, 96, 128, 96);\r\n            graphics.generateTexture("tile-level", 128, 128);\r\n            graphics.destroy();\r\n        }\r\n        if (!("sprites" in this.textures.list))\r\n            this.load.spritesheet("sprites", __webpack_require__(22), { frameWidth: 128, frameHeight: 128 });\r\n        if (!("controls" in this.textures.list))\r\n            this.load.spritesheet("controls", __webpack_require__(2), { frameWidth: 128, frameHeight: 128 });\r\n        if (!("banners" in this.textures.list))\r\n            this.load.spritesheet("banners", __webpack_require__(21), { frameWidth: 640, frameHeight: 128 });\r\n    }\r\n    create() {\r\n        this.state = new state_LevelState();\r\n        this.loadWorld();\r\n    }\r\n    update(total, delta) {\r\n        const cam = this.cameras.main;\r\n        if (!cam)\r\n            return;\r\n        const width = level_min(cam.width, this.bounds.width);\r\n        const height = level_min(cam.height, this.bounds.height);\r\n        const track = this.state.target || this.state.track;\r\n        if (track) {\r\n            cam.scrollX = track.x - width / 2;\r\n            cam.scrollY = track.y - height / 2;\r\n        }\r\n        this.hud.update();\r\n    }\r\n    back(outcome) {\r\n        const { scrollX, scrollY, width, height } = this.cameras.main;\r\n        this.overlay = this.add.tileSprite(scrollX + width / 2, scrollY + height / 2, width, height, "tile-16");\r\n        this.overlay.setAlpha(0);\r\n        this.scene.transition({\r\n            target: "level-select",\r\n            duration: 2000,\r\n            onUpdate: this.ontransitionupdate,\r\n            moveBelow: true,\r\n            data: { level: this.level, outcome }\r\n        });\r\n    }\r\n    end(outcome) {\r\n        if (this.state.completed)\r\n            return;\r\n        this.state.completed = true;\r\n        this.banner = new banner_LevelBanner(this, outcome);\r\n        this.add.existing(this.banner);\r\n        const { scrollX, scrollY, width, height } = this.cameras.main;\r\n        this.banner.setPosition(scrollX + width / 2, scrollY + height / 2);\r\n        this.banner.begin();\r\n        setTimeout(() => this.back(outcome), 2000);\r\n    }\r\n    loadWorld() {\r\n        // load the level\r\n        // duplicate the object to avoid modifying the actual instance\r\n        // that json-loader created\r\n        // tslint:disable-next-line:prefer-template\r\n        this.state.level = JSON.parse(JSON.stringify(__webpack_require__(20)("./" + this.level.toString() + ".json")));\r\n        for (const mode in this.state.level.modes) {\r\n            if (this.state.level.modes.hasOwnProperty(mode)) {\r\n                this.state.mode = mode;\r\n                break;\r\n            }\r\n        }\r\n        //#region Boundaries\r\n        const cam = this.cameras.main;\r\n        const { height, width } = cam;\r\n        this.bounds = new Size(this.state.level.width * 32, this.state.level.height * 32);\r\n        this.padding = new Size(level_max(50, (width - this.bounds.width) / 2), level_max(50, (height - this.bounds.height) / 2));\r\n        this.origin = new Vector(this.padding.width, this.bounds.height + this.padding.height);\r\n        cam.setBounds(0, 0, this.bounds.width + this.padding.width * 2, this.bounds.height + this.padding.height * 2);\r\n        //#endregion\r\n        //#region Grid\r\n        if (this.grid) {\r\n            this.grid.destroy();\r\n        }\r\n        this.grid = this.add.tileSprite(this.padding.width + this.bounds.width / 2, this.padding.height + this.bounds.height / 2, this.bounds.width, this.bounds.height, "tile-level");\r\n        this.grid.flipY = true;\r\n        //#endregion\r\n        if (this.tiles)\r\n            this.tiles.destroy();\r\n        this.tiles = this.make.container({});\r\n        //#region HUD\r\n        if (this.hud)\r\n            this.hud.destroy();\r\n        this.hud = new hud_LevelHud(this);\r\n        this.children.add(this.hud);\r\n        //#endregion\r\n        //#region Physics\r\n        this.matter.world.setBounds(this.padding.width, this.padding.height, this.bounds.width, this.bounds.height, 512);\r\n        const walls = this.matter.world.walls;\r\n        walls.top.restitution = 0;\r\n        walls.bottom.restitution = 0;\r\n        walls.left.restitution = 0;\r\n        walls.right.restitution = 0;\r\n        if (this.state.level.paused)\r\n            this.hud.pause();\r\n        //#endregion\r\n        //#region Tiles\r\n        for (const data of this.state.level.annotations) {\r\n            switch (data.type) {\r\n                case AnnotationType.Text:\r\n                    const textAnnotation = this.make.text({\r\n                        style: Object.assign({}, Text.Header, { stroke: "#FFFFFF", strokeThickness: 10 }),\r\n                        text: data.text,\r\n                        x: this.origin.x + data.x * 32,\r\n                        y: this.origin.y - data.y * 32,\r\n                        origin: { x: 0, y: 1 }\r\n                    });\r\n                    this.tiles.add(textAnnotation);\r\n                    break;\r\n                default:\r\n                    // invalid annotation\r\n                    // don\'t throw error i guess\r\n                    break;\r\n            }\r\n        }\r\n        for (const data of this.state.level.goals) {\r\n            // invert Y coordinate so Y = 0 is at the bottom\r\n            data.y = this.origin.y / 32 - data.y;\r\n            data.x = this.origin.x / 32 + data.x;\r\n            const goal = new goal_Goal(this, data);\r\n            goal.on("update:completed", (completed) => {\r\n                if (this.state.goals.every(g => g.completed)) {\r\n                    this.end(LevelOutcome.Success);\r\n                }\r\n            });\r\n            this.state.goals.push(goal);\r\n            this.tiles.add(goal);\r\n        }\r\n        if (this.state.level.shapes) {\r\n            for (const data of this.state.level.shapes) {\r\n                // invert Y coordinate so Y = 0 is at the bottom\r\n                data.y = this.origin.y / 32 - data.y;\r\n                data.x = this.origin.x / 32 + data.x;\r\n                let [minX, minY, maxX, maxY] = [0, 0, 0, 0];\r\n                const verts = data.data\r\n                    .split(";").map(s => {\r\n                    const [x, y] = s.split(",");\r\n                    const v = { x: parseFloat(x.trim()) * 32, y: parseFloat(y.trim()) * 32 };\r\n                    minX = level_min(v.x, minX);\r\n                    minY = level_min(v.y, minY);\r\n                    maxX = level_max(v.x, maxX);\r\n                    maxY = level_max(v.y, maxY);\r\n                    return v;\r\n                });\r\n                verts.forEach(v => v.y = maxY - v.y);\r\n                const graphic = this.make.graphics({});\r\n                graphic.fillStyle(0xAAAAAA);\r\n                graphic.beginPath();\r\n                for (const { x, y } of verts)\r\n                    graphic.lineTo(x, y);\r\n                graphic.closePath();\r\n                graphic.fillPath();\r\n                // tslint:disable-next-line:prefer-template\r\n                const tex = "shape-" + v4();\r\n                graphic.generateTexture(tex, maxX - minX, maxY - minY);\r\n                const shape = this.matter.add.image(data.x * 32, data.y * 32, tex, 0, { shape: { type: "fromVertices", verts } });\r\n                shape.originX = shape.originY = 0.5;\r\n                if (data.pin) {\r\n                    const { x, y } = Vector.add(this.origin, Vector.mult(data.pin, { x: 32, y: -32 }));\r\n                    this.matter.add.worldConstraint(shape.body, 0, 0.7, { pointA: { x, y } });\r\n                }\r\n                if (data.static)\r\n                    shape.setStatic(true);\r\n                this.tiles.add(shape);\r\n            }\r\n        }\r\n        for (const data of this.state.level.tiles) {\r\n            // invert Y coordinate so Y = 0 is at the bottom\r\n            data.y = this.origin.y / 32 - data.y;\r\n            data.x = this.origin.x / 32 + data.x;\r\n            const tile = new tile_Tile(this, data);\r\n            tile.on("pointerdown", (pointer) => {\r\n                this.events.emit("tiledown", pointer, tile);\r\n            });\r\n            if (data.pin) {\r\n                const { x, y } = Vector.add(this.origin, Vector.mult(data.pin, { x: 32, y: -32 }));\r\n                this.matter.add.worldConstraint(tile.body, 0, 0.7, { pointA: { x, y } });\r\n            }\r\n            if (data.track)\r\n                this.state.track = tile;\r\n            this.state.tiles.push(tile);\r\n            this.tiles.add(tile);\r\n        }\r\n        //#endregion\r\n    }\r\n    ontransitionupdate(progress) {\r\n        if (this.overlay) {\r\n            this.overlay.setAlpha(progress * 1.2);\r\n            const offset = 100 / (progress * progress);\r\n            this.overlay.setTilePosition(-offset, -offset);\r\n        }\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/select.ts\n\r\n\r\n\r\nconst { sin: select_sin, cos: select_cos, random: select_random, PI: select_PI, max: select_max } = Math;\r\nclass select_LevelSelectScene extends phaserfrom_dll_reference_library["Scene"] {\r\n    constructor() {\r\n        super({ key: "level-select" });\r\n        this.speed = 0.05;\r\n        this.size = { rows: 3, cols: 4 };\r\n        this.disabled = {};\r\n        this.initialized = false;\r\n    }\r\n    init(data) {\r\n        if (data) {\r\n            const level = data.level;\r\n            const outcome = data.outcome;\r\n            if (typeof level !== "undefined" && outcome === LevelOutcome.Failure) {\r\n                this.disabled[level] = true;\r\n                setTimeout(() => this.disabled[level] = false, 60000);\r\n            }\r\n        }\r\n    }\r\n    preload() {\r\n        this.events.on("transitioncomplete", this.transitioncomplete, this);\r\n        this.load.spritesheet("controls", __webpack_require__(2), { frameWidth: 128, frameHeight: 128 });\r\n    }\r\n    create() {\r\n        if (this.initialized)\r\n            return;\r\n        const { width, height } = this.cameras.main;\r\n        const self = this;\r\n        if (this.grid)\r\n            this.grid.destroy();\r\n        this.grid = this.add.tileSprite(width / 2, height / 2, width, height, "tile-16");\r\n        if (this.title)\r\n            this.title.destroy();\r\n        this.title =\r\n            this.add.text(20, -50, "Choose a level")\r\n                .setFontFamily("Montserrat Black")\r\n                .setFontSize(32)\r\n                .setFill("#EE0000")\r\n                .setStroke("#FFFFFF", 10)\r\n                .setShadow(0, 0, "#AAAAAA", 6, true, false);\r\n        if (this.btnGrid)\r\n            this.btnGrid.destroy();\r\n        const buttons = [];\r\n        for (let row = 0; row < this.size.rows; row++) {\r\n            for (let col = 0; col < this.size.cols; col++) {\r\n                const level = row * this.size.cols + col;\r\n                const button = new button_Button(this, {\r\n                    text: {\r\n                        style: {\r\n                            fontFamily: "Montserrat Black",\r\n                            fontSize: 32,\r\n                            fill: "#FFFFFF"\r\n                        },\r\n                        text: (level + 1).toString(10)\r\n                    },\r\n                    sprite: {\r\n                        key: "controls",\r\n                        frame: 0\r\n                    }\r\n                });\r\n                button.x = (col - 2) / 3 * 0.45 * width;\r\n                button.y = (row - 1) / 2 * 0.45 * height;\r\n                button.alpha = 0;\r\n                if (this.disabled[level]) {\r\n                    button.sprite.setPipeline("greyscale");\r\n                }\r\n                else {\r\n                    button.on(\'pointerup\', () => {\r\n                        this.goto(level);\r\n                    });\r\n                }\r\n                buttons.push(button);\r\n            }\r\n        }\r\n        this.btnGrid = this.add.container(width / 2, height / 2, buttons);\r\n        this.input.keyboard.on("keydown_T", () => {\r\n            this.goto(15);\r\n        });\r\n    }\r\n    goto(level) {\r\n        var transition = this.scene.transition({\r\n            target: \'level\',\r\n            duration: 1000,\r\n            onUpdate: this.outro,\r\n            moveBelow: true,\r\n            data: { level }\r\n        });\r\n    }\r\n    update(total, delta) {\r\n        if (this.grid) {\r\n            this.grid.tilePositionX = this.speed * total;\r\n            this.grid.tilePositionY = this.speed * total;\r\n        }\r\n    }\r\n    transitioncomplete() {\r\n        this.tweens.add({\r\n            targets: this.title,\r\n            y: 20,\r\n            duration: 1500,\r\n            ease: \'Elastic\',\r\n            easeParams: [1.1, 0.5]\r\n        });\r\n        if (this.btnGrid) {\r\n            for (let row = 0; row < this.size.rows; row++) {\r\n                for (let col = 0; col < this.size.cols; col++) {\r\n                    const btn = this.btnGrid.getAt(row * this.size.cols + col);\r\n                    btn.alpha = 0;\r\n                    this.tweens.add({\r\n                        targets: btn,\r\n                        alpha: 1,\r\n                        duration: 250,\r\n                        delay: col * 125\r\n                    });\r\n                }\r\n            }\r\n        }\r\n    }\r\n    outro(progress) {\r\n        this.speed = 0.05 + progress * progress * 0.15;\r\n        if (this.title)\r\n            this.title.alpha = select_max(0, 1 - progress * 1.7);\r\n        if (this.btnGrid)\r\n            this.btnGrid.alpha = select_max(0, 1 - progress * 1.7);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/scene/title.ts\n\r\nconst { sin: title_sin, cos: title_cos, random: title_random, PI: title_PI, max: title_max } = Math;\r\nclass title_TitleScene extends phaserfrom_dll_reference_library["Scene"] {\r\n    constructor() {\r\n        super({ key: "title" });\r\n        this.speed = 0.05;\r\n    }\r\n    preload() {\r\n        const game = this.sys.game;\r\n        const graphics = this.make.graphics({}, false);\r\n        graphics\r\n            .fillStyle(0xFFFFFF)\r\n            .fillRect(0, 0, 80, 80)\r\n            .lineStyle(1, 0x000000, 1)\r\n            .lineBetween(0, 0, 0, 16)\r\n            .lineBetween(0, 0, 16, 0);\r\n        graphics.generateTexture("tile-16", 16, 16);\r\n        graphics.destroy();\r\n        this.load.image("logo", __webpack_require__(6));\r\n    }\r\n    create() {\r\n        const { width, height } = this.cameras.main;\r\n        this.grid = this.add.tileSprite(width / 2, height / 2, width, height, "tile-16");\r\n        this.logo = this.add.image(width / 2, height / 2, "logo");\r\n        this.logo.setPipeline("add-color");\r\n        this.instructions = this.add\r\n            .text(width / 2, height / 2 + 100, "Click anywhere to start!")\r\n            .setFontFamily("Montserrat Black")\r\n            .setFontSize(32)\r\n            .setFill("#EE0000")\r\n            .setStroke("#FFFFFF", 10)\r\n            .setShadow(0, 0, "#AAAAAA", 6, true, false);\r\n        this.instructions.setOrigin(0.5);\r\n        this.add\r\n            .text(10, height - 10, "© 2018 Ibiyemi Abiodun")\r\n            .setFontFamily("sans-serif")\r\n            .setFill("#000000")\r\n            .setFontSize(12)\r\n            .setStroke("#FFFFFF", 10)\r\n            .setOrigin(0, 1);\r\n        this.input.once(\'pointerup\', (event) => {\r\n            this.scene.transition({\r\n                target: "level-select",\r\n                duration: 1000,\r\n                onUpdate: this.ontransitionupdate,\r\n                moveBelow: true,\r\n                allowInput: false,\r\n            });\r\n        });\r\n    }\r\n    update(total, delta) {\r\n        if (this.grid) {\r\n            this.grid.tilePositionX = this.speed * total;\r\n            this.grid.tilePositionY = this.speed * total;\r\n        }\r\n        if (this.logo) {\r\n            const phase = (title_sin(total / 500 * title_PI) + 1) / 8;\r\n            // this.logo.pipeline.setFloat4("uIntensity", phase, 0, 0, phase);\r\n            this.logo.setOrigin(0.5 + title_random() / 100 - 0.005, 0.5 + title_random() / 100 - 0.005);\r\n        }\r\n    }\r\n    ontransitionupdate(progress) {\r\n        this.speed = 0.05 + progress * progress * 0.15;\r\n        if (this.logo)\r\n            this.logo.alpha = title_max(0, 1 - progress * 1.7);\r\n        if (this.instructions)\r\n            this.instructions.alpha = title_max(0, 1 - progress * 1.7);\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/shader/greyscale.ts\n\r\nclass greyscale_GreyscalePipeline extends phaserfrom_dll_reference_library["Renderer"].WebGL.Pipelines.TextureTintPipeline {\r\n    constructor(game) {\r\n        const fragShader = __webpack_require__(5);\r\n        super({\r\n            game,\r\n            renderer: game.renderer,\r\n            fragShader\r\n        });\r\n    }\r\n}\r\n\n// CONCATENATED MODULE: ./src/index.ts\n\r\n\r\n\r\n\r\n\r\nclass src_TourDeForceGame extends phaserfrom_dll_reference_library["Game"] {\r\n    constructor() {\r\n        super({\r\n            height: window.innerHeight,\r\n            width: window.innerWidth,\r\n            type: phaserfrom_dll_reference_library["WEBGL"],\r\n            backgroundColor: "#FFFFFF",\r\n            physics: { default: "matter", matter: { gravity: { y: 0.981 } }, debug: true },\r\n            scene: [title_TitleScene, select_LevelSelectScene, level_LevelScene]\r\n        });\r\n        const renderer = this.renderer;\r\n        renderer.addPipeline("greyscale", new greyscale_GreyscalePipeline(this));\r\n    }\r\n}\r\nwindow.addEventListener("load", () => {\r\n    let game = new src_TourDeForceGame();\r\n});\r\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbGliL2xldmVsLnRzP2EyMTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjZW5lL2xldmVsL2Jhbm5lci50cz83YjIzIiwid2VicGFjazovLy8uL3NyYy91dGlsL2luZGV4LnRzP2YwMGYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvbWF0aC50cz83YTg2Iiwid2VicGFjazovLy8uL3NyYy91dGlsL21lYXN1cmVtZW50LnRzPzgyZTIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjZW5lL2xldmVsL3RpbGUudHM/ZTg1OCIsIndlYnBhY2s6Ly8vLi9zcmMvY29uZmlnLnRzP2Q3MGIiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjZW5lL2xldmVsL2dvYWwudHM/ZGVlYyIsIndlYnBhY2s6Ly8vLi9zcmMvc2NlbmUvbGV2ZWwvc2VsZWN0b3IudHM/MzJjMSIsIndlYnBhY2s6Ly8vLi9zcmMvY29udHJvbC90b29sdGlwLnRzPzlkYTQiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NvbnRyb2wvYnV0dG9uLnRzP2U3YzAiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NjZW5lL3V0aWwvdWkudHM/OTIwZSIsIndlYnBhY2s6Ly8vLi9zcmMvc2NlbmUvbGV2ZWwvaHVkLnRzP2ZjZjEiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWwvb2JzZXJ2YWJsZS50cz8zNzQ5Iiwid2VicGFjazovLy8uL3NyYy9zY2VuZS9sZXZlbC9zdGF0ZS50cz8zN2ZlIiwid2VicGFjazovLy8uL3NyYy9zY2VuZS9sZXZlbC9pbmRleC50cz9lNGE2Iiwid2VicGFjazovLy8uL3NyYy9zY2VuZS9zZWxlY3QudHM/Y2YwMCIsIndlYnBhY2s6Ly8vLi9zcmMvc2NlbmUvdGl0bGUudHM/NzZjYiIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhZGVyL2dyZXlzY2FsZS50cz81MDdhIiwid2VicGFjazovLy8uL3NyYy9pbmRleC50cz9mZmI0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUVBLElBQWtCLFFBS2pCO0FB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QUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxTQUFTLENBQUMsQ0FBQyxFQUFFLENBQUM7SUFDeEQsQ0FBQztJQUVELElBQUksRUFBRSxLQUFLLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLElBQUksRUFBRSxLQUFLLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2xDLElBQUksRUFBRSxLQUFLLE9BQU8sSUFBSSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0MsSUFBSSxFQUFFLEtBQUssT0FBTyxJQUFJLENBQUMsRUFBRSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMvQyxJQUFJLEdBQUcsS0FBSyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQUEsQ0FBQztJQUM5RCxJQUFJLE1BQU0sS0FBSyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVuRCxJQUFJLEtBQUssS0FBSyxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDdEUsSUFBSSxJQUFJLEtBQUssT0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFF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TUFBTSxDQUFDLFVBQVUsQ0FBQztRQUVwQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsQ0FBQyxDQUFDO1FBQzdELElBQUksRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxNQUFNLEVBQUUsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUVyRixJQUFJLENBQUMsV0FBVyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUV2QixJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksTUFBTSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsRUFBRSxDQUFDLENBQUM7UUFDL0YsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsUUFBUSxDQUFDO1FBRWhDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDO1FBRTFCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsRUFBRSxLQUFLLENBQUM7YUFDeEMsU0FBUyxDQUFDLENBQUMsRUFBRSxRQUFRLEVBQUUsR0FBRyxDQUFDO2FBQzNCLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDO2FBQ3pCLFVBQVUsQ0FBQyxDQUFDLEtBQUssR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsTUFBTSxHQUFHLENBQUMsR0FBRyxDQUFDLEVBQUUsS0FBSyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFeEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUVqQixNQUFNLGFBQWEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssYUFBYSxDQUFDLElBQUksQ0FBNkIsQ0FBQztRQUU1RyxJQUFJLGFBQWEsRUFBRTtZQUNmLE1BQU0sU0FBUyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO2dCQUMvQixHQUFHLEVBQUUsU0FBUztnQkFDZCxLQUFLLEVBQUUsU0FBUyxDQUFDLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQyxLQUFLO2dCQUM1QyxLQUFLLEVBQUUsR0FBRzthQUNiLENBQUMsQ0FBQztZQUVILElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDLENBQUM7U0FDdkI7UUFFRCxNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFFakIsS0FBSyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO1lBQzdCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQztZQUNsQixJQUFJLElBQUksR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDO1lBRXZCLFFBQVEsQ0FBQyxDQUFDLElBQUksRUFBRTtnQkFDWixLQUFLLGFBQWEsQ0FBQyxJQUFJO29CQUNuQixTQUFTO2dCQUNiLEtBQUssYUFBYSxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVEsR0FBRyxHQUFHLENBQUM7b0JBQ2YsSUFBSSxHQUFHLFFBQVEsQ0FBQyxlQUFlLENBQUM7b0JBQ2hDLE1BQU07Z0JBQ1YsS0FBSyxhQUFhLENBQUMsUUFBUTtvQkFDdkIsUUFBUSxHQUFHLEdBQUc7b0JBQ2QsSUFBSSxHQUFHLFFBQVEsQ0FBQyx1QkFBdUIsQ0FBQztvQkFDeEMsTUFBTTtnQkFDVixLQUFLLGFBQWEsQ0FBQyxlQUFlO29CQUM5QixRQUFRLEdBQUcsR0FBRztvQkFDZCxJQUFJLEdBQUcsZUFBZSxDQUFDLGdCQUFnQixDQUFDO29CQUN4QyxNQUFNO2FBQ2I7WUFFRCxJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sS0FBSyxRQUFRLEVBQUUsU0FBUztnQkFDdkMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsTUFBTSxJQUFJLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUM7aUJBQzdFLElBQUksR0FBRyxJQUFJLENBQUMsQ0FBQyxNQUFNLEVBQUUsU0FBUztnQkFDL0IsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLFFBQVEsTUFBTSxJQUFJLDZCQUFpQixDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztpQkFDbkYsY0FBYzthQUNuQjtnQkFDSSxJQUFJLElBQUksR0FBRyxRQUFRLENBQUM7Z0JBRXBCLElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxRQUFRO29CQUNwQyxJQUFJLEdBQUcsR0FBRyxJQUFJLE1BQU0sSUFBSSxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7Z0JBQ2pGLElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxRQUFRO29CQUNwQyxJQUFJLEdBQUcsR0FBRyxJQUFJLE1BQU0sSUFBSSw2QkFBaUIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztnQkFFdkYsSUFBSSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVE7b0JBQ3BDLElBQUksR0FBRyxHQUFHLElBQUksV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQUUsQ0FBQztnQkFDakYsSUFBSSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVE7b0JBQ3BDLElBQUksR0FBRyxHQUFHLElBQUksNkJBQWlCLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDO2dCQUV2RixLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQ3BCO1NBQ0o7UUFFRCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNoQyxLQUFLLGtCQUNELEtBQUssRUFBRSxRQUFRLElBQ1osSUFBSSxDQUFDLE1BQU0sQ0FDakI7WUFDRCxLQUFLLEVBQUUsR0FBRztZQUNWLE1BQU0sRUFBRSxHQUFHO1lBQ1gsSUFBSSxFQUFFLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1NBQ3pCLENBQUMsQ0FBQztRQUVILFdBQVcsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxLQUFLLEdBQUcsRUFBRSxDQUFDLEdBQUcsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7UUFFcEUsSUFBSSxDQUFDLEdBQUcsQ0FBQyxXQUFXLENBQUMsQ0FBQztRQUV0QixNQUFNLElBQUksR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFO1lBQzNDLFFBQVEsRUFBRSxJQUFJO1lBQ2QsUUFBUSxFQUFFLElBQUk7WUFDZCxLQUFLLEVBQUU7Z0JBQ0gsSUFBSSxFQUFFLFdBQVc7Z0JBQ2pCLEtBQUs7Z0JBQ0wsTUFBTTthQUNUO1NBQ0osQ0FBQyxDQUFDO1FBRUgsTUFBTSxLQUFLLEdBQUksSUFBWSxDQUFDLEtBQW9DLENBQUM7UUFFakUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxnQkFBZ0IsRUFBRSxJQUFJLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RELEtBQUssQ0FBQyxFQUFFLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLGVBQWUsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxLQUFLLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ2hELEtBQUssQ0FBQyxFQUFFLENBQUMsY0FBYyxFQUFFLElBQUksQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDdEQsQ0FBQztJQUVELElBQVcsU0FBUyxLQUFLLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDbEQsSUFBVyxTQUFTLENBQUMsS0FBSztRQUN0QixNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBRTVCLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDO1FBQ3hCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUM7UUFFbkQsSUFBSSxHQUFHLEtBQUssS0FBSztZQUNiLElBQUksQ0FBQyxJQUFJLENBQUMsa0JBQWtCLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDN0MsQ0FBQztJQUVNLGVBQWUsQ0FBQyxJQUFVO1FBQzdCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFtQixDQUFDO1FBQ3RDLE1BQU0sTUFBTSxHQUFJLElBQUksQ0FBQyxJQUFvQixDQUFDLE1BQThDLENBQUM7UUFDekYsTUFBTSxPQUFPLEdBQUcsRUFBRSxDQUFDLENBQUMscUNBQXFDO1FBQ3pELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQ25DLENBQUMsQ0FBQyxDQUFDLElBQUksTUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEdBQUcsT0FBTztZQUM5RCxDQUFDLENBQUMsQ0FBQyxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxDQUFDO1FBRXBFLE9BQU8sTUFBTSxJQUFJLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxFQUFFO1lBQ3ZDLElBQUksUUFBeUIsQ0FBQztZQUU5QixRQUFRLENBQUMsQ0FBQyxJQUFJLEVBQUU7Z0JBQ1osS0FBSyxhQUFhLENBQUMsSUFBSTtvQkFDbkIsT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQUM7Z0JBQ3RDLEtBQUssYUFBYSxDQUFDLFFBQVE7b0JBQ3ZCLFFBQVE7d0JBQ0osSUFBSSw2QkFBaUIsQ0FBQyxJQUFJLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxhQUFhLENBQUM7NkJBQ3ZELEVBQUUsQ0FBQyxRQUFRLENBQUMsZUFBZSxDQUFDLENBQUM7b0JBQ3RDLE1BQU07Z0JBQ1YsS0FBSyxhQUFhLENBQUMsUUFBUTtvQkFDdkIsUUFBUTt3QkFDSixJQUFJLDZCQUFpQixDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLGFBQWEsQ0FBQzs2QkFDdkQsRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUM7NkJBQzVCLEtBQUssQ0FBQyxJQUFJLFdBQVcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO29CQUMxRCxNQUFNO2dCQUNWLEtBQUssYUFBYSxDQUFDLGVBQWU7b0JBQzlCLFFBQVE7d0JBQ0osSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLGVBQWUsRUFBRSxlQUFlLENBQUMsY0FBYyxDQUFDOzZCQUNoRSxFQUFFLENBQUMsZUFBZSxDQUFDLGdCQUFnQixDQUFDOzZCQUNwQyxPQUFPLEVBQUUsQ0FBQztvQkFDbkIsTUFBTTtnQkFDVjtvQkFDSSxPQUFPLEtBQUssQ0FBQzthQUNwQjtZQUVELElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxLQUFLLFFBQVEsSUFBSSxHQUFHLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRTtnQkFDakQsT0FBTyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxJQUFJLENBQUM7YUFDMUM7aUJBQU07Z0JBQ0gsY0FBYztnQkFDZCxJQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtvQkFDOUIsSUFBSSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLFdBQVc7d0JBQ3ZDLElBQUksTUFBTSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sRUFBRSxRQUFRLENBQUM7NEJBQUUsT0FBTyxLQUFLLENBQUM7b0JBRTVELElBQUksT0FBTyxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sS0FBSyxXQUFXO3dCQUN2QyxJQUFJLE1BQU0sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEVBQUUsUUFBUSxDQUFDOzRCQUFFLE9BQU8sS0FBSyxDQUFDO2lCQUMvRDtxQkFBTTtvQkFDSCxJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssUUFBUSxJQUFJLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxHQUFHLFFBQVE7d0JBQ25FLE9BQU8sS0FBSyxDQUFDO29CQUVqQixJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLEtBQUssUUFBUSxJQUFJLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsR0FBRyxRQUFRO3dCQUMvRSxPQUFPLEtBQUssQ0FBQztvQkFFakIsSUFBSSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVEsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLE9BQU8sR0FBRyxRQUFRO3dCQUNuRSxPQUFPLEtBQUssQ0FBQztvQkFFakIsSUFBSSxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxLQUFLLFFBQVEsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUcsUUFBUTt3QkFDL0UsT0FBTyxLQUFLLENBQUM7aUJBQ3BCO2FBQ0o7WUFFRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7SUFFTyxjQUFjLENBQUMsS0FBMEQ7UUFDN0UsSUFBSSxJQUFJLENBQUMsU0FBUztZQUFFLE9BQU87UUFFM0IsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQzVCLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7WUFDcEMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUk7Z0JBQUUsU0FBUztZQUVqRCxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQVEsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUV6RCxJQUFJLElBQUksWUFBWSxTQUFJLEVBQUU7Z0JBQ3RCLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7aUJBQ3pCO3FCQUFNO29CQUNILElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2lCQUN6QjthQUNKO2lCQUFNO2dCQUNILE9BQU8sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7YUFDMUI7U0FDSjtJQUNMLENBQUM7SUFFTyxlQUFlLENBQUMsS0FBMEQ7UUFDOUUsS0FBSyxNQUFNLElBQUksSUFBSSxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQzVCLE1BQU0sRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEtBQUssRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUM7WUFFcEMsSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksSUFBSSxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUk7Z0JBQUUsU0FBUztZQUVqRCxNQUFNLElBQUksR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQVEsQ0FBQyxDQUFDLFVBQVUsQ0FBQztZQUV6RCxJQUFJLElBQUksWUFBWSxTQUFJLEVBQUU7Z0JBQ3RCLElBQUksSUFBSSxDQUFDLGVBQWUsQ0FBQyxJQUFJLENBQUMsRUFBRTtvQkFDNUIsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUM7aUJBQ3pCO2FBQ0o7aUJBQU07Z0JBQ0gsT0FBTyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzthQUN6QjtTQUNKO0lBQ0wsQ0FBQztJQUVPLFlBQVksQ0FBQyxLQUEwRDtRQUMzRSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxLQUFLLENBQUM7WUFBRSxPQUFPO1FBRXBDLEtBQUssTUFBTSxJQUFJLElBQUksS0FBSyxDQUFDLEtBQUssRUFBRTtZQUM1QixNQUFNLEVBQUUsS0FBSyxFQUFFLENBQUMsRUFBRSxLQUFLLEVBQUUsQ0FBQyxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBRXBDLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksQ0FBQyxJQUFJO2dCQUFFLFNBQVM7WUFFakQsTUFBTSxJQUFJLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFRLENBQUMsQ0FBQyxVQUFVLENBQUM7WUFFekQsSUFBSSxJQUFJLFlBQVksU0FBSSxFQUFFO2dCQUN0QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQzthQUNsRDtpQkFBTTtnQkFDSCxPQUFPLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO2FBQ3hCO1NBQ0o7SUFDTCxDQUFDO0lBRU8sV0FBVztRQUVmLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sRUFBRTtZQUNwQixJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztZQUN2QixPQUFPO1NBQ1Y7UUFFRCxLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLEVBQUU7WUFDM0IsSUFBSSxJQUFJLENBQUMsZUFBZSxDQUFDLElBQUksQ0FBQyxFQUFFO2dCQUM1QixJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztnQkFDdEIsT0FBTzthQUNWO1NBQ0o7UUFFRCxJQUFJLENBQUMsU0FBUyxHQUFHLEtBQUssQ0FBQztJQUMzQixDQUFDO0NBQ0o7OztBQ3BScUM7QUFHZTtBQVkxQjtBQUVTO0FBdUI5QixxQ0FDRixTQUFRLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUztJQW1CcEMsWUFBWSxHQUFhLEVBQUUsTUFBaUM7UUFDeEQsS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVBkLFVBQUssR0FBVyxDQUFDLENBQUM7UUFFakIsVUFBSyxHQUFHLEtBQUssQ0FBQztRQU9sQixJQUFJLENBQUMsS0FBSyxHQUFHLEdBQUcsQ0FBQyxLQUFLLENBQUM7UUFDdkIsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUM7UUFFZixJQUFJLENBQUMsSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDeEIsSUFBSSxDQUFDLElBQUksR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztRQUN4QixJQUFJLENBQUMsR0FBRyxHQUFHLElBQUksR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFOUQsSUFBSSxPQUFPLE1BQU0sQ0FBQyxLQUFLLEtBQUssUUFBUTtZQUFFLElBQUksQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUdoRSxNQUFNLEtBQUssR0FBRztZQUNWLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNYLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNYLEtBQUssa0JBQ0QsVUFBVSxFQUFFLE1BQU0sRUFDbEIsZUFBZSxFQUFFLFNBQVMsSUFDdkIsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQ3RCO1lBQ0QsTUFBTSxFQUFFLEdBQUc7WUFDWCxPQUFPLEVBQUUsQ0FBQztZQUNWLEtBQUssRUFBRSxDQUFDO1NBQ1gsQ0FBQztRQUVGLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQTRCLENBQUM7UUFDcEYsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBNEIsQ0FBQztRQUVwRixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0QixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUUxQixDQUFDO0lBRUQsSUFBYyxLQUFLO1FBQ2YsT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQztJQUM1QixDQUFDO0lBRU0sS0FBSztRQUNSLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztZQUNULE9BQU8sNkJBQWlCLENBQUMsSUFBSSxDQUFDO1FBRWxDLE9BQU8sSUFBSSw2QkFBaUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDekYsQ0FBQztJQUVNLElBQUksQ0FBQyxDQUFTLEVBQUUsQ0FBUztRQUM1QixJQUFJLElBQUksQ0FBQyxHQUFHLEVBQUU7WUFDVixJQUFJLENBQUMsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDOUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxDQUFDO1lBQ3RCLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1lBRXJDLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxHQUFHLENBQUMsQ0FBQztZQUV2QixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztZQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQztZQUMvQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUM7WUFFckMsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO1lBRXpCLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDYixJQUFJLENBQUMsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDckUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDL0I7WUFFRCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ2IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3JFLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDN0QsSUFBSSxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDL0I7U0FDSjtJQUNMLENBQUM7SUFJRCxJQUFXLEtBQUssS0FBSyxPQUFPLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFELElBQVcsR0FBRyxLQUFLLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO0NBQzVDO0FBRUssb0NBQTZCLFNBQVEsK0JBQXNCO0lBQzdELFlBQW1CLEdBQWEsRUFBRSxNQUFrQjtRQUNoRCxLQUFLLENBQUMsR0FBRyxFQUFFO1lBQ1AsSUFBSSxFQUFFLFFBQVEsQ0FBQyxLQUFLO1lBQ3BCLElBQUksRUFBRSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1lBQzVCLEtBQUssRUFBRSxHQUFHO1lBQ1YsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQ1gsSUFBSSxFQUFFLElBQUk7U0FDYixDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQsSUFBVyxLQUFLLEtBQUssT0FBTyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBRXZDLElBQVcsSUFBSTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU07WUFBRSxPQUFPLEVBQUUsQ0FBQztRQUVsQyxNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxJQUFXLENBQUM7UUFDM0MsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFXLENBQUMsQ0FBQyxHQUFHLEVBQUUsRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFDbEQsTUFBTSxJQUFJLEdBQUcsSUFBSSxXQUFXLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7UUFDdkQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsRUFBRSxDQUFDO1FBRXZDLE1BQU0sS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDL0IsTUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUUvQixNQUFNLFlBQVksR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLFVBQVUsSUFBSSxVQUFVLEtBQUssR0FBRyxDQUFDO1FBQzlFLE1BQU0sUUFBUSxHQUFHLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEtBQUsseUJBQXlCLElBQUksR0FBRyxDQUFDO1FBRTFFLE9BQU8sQ0FBQyxZQUFZLEVBQUUsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQUUsT0FBTztRQUV0QixJQUFJLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBRWxCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDbEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUM7U0FDakM7UUFFRCxJQUFJLElBQUksQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLEVBQUU7WUFDL0IsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBVyxDQUFDO1lBRTNDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO1lBRTdCLHlEQUF5RDtZQUN6RCxJQUFJLEtBQUssR0FBRyxJQUFJLDZCQUFpQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQztZQUV6RSxrQ0FBa0M7WUFDbEMsS0FBSyxHQUFHLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFckQsa0RBQWtEO1lBQ2xELHdFQUF3RTtZQUN4RSw2QkFBNkI7WUFFNUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFjLENBQUMsY0FBYyxDQUNyQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNqQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDbEQ7SUFDTCxDQUFDO0NBQ0o7QUFFSyx1Q0FBZ0MsU0FBUSwrQkFBc0I7SUFDaEUsWUFBbUIsR0FBYSxFQUFFLE1BQWtCO1FBQ2hELEtBQUssQ0FBQyxHQUFHLEVBQUU7WUFDUCxJQUFJLEVBQUUsUUFBUSxDQUFDLFFBQVE7WUFDdkIsSUFBSSxFQUFFLFFBQVEsQ0FBQyxlQUFlO1lBQzlCLEtBQUssRUFBRSxDQUFDLEdBQUcsRUFBRTtZQUNiLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNYLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNYLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQVcsS0FBSyxLQUFLLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQztJQUV2QyxJQUFXLElBQUk7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFFbEMsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBVyxDQUFDO1FBQzNDLE1BQU0sSUFBSSxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBQ3ZELE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxTQUFTLEVBQUUsQ0FBQztRQUV0QyxNQUFNLFFBQVEsR0FBRyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxJQUFJLFVBQVUsSUFBSSxVQUFVLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztRQUVwRixPQUFPLFFBQVEsQ0FBQztJQUNwQixDQUFDO0lBRU0sUUFBUTtRQUNYLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRztZQUFFLE9BQU87UUFFdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUVsQixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQy9CLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBYSxDQUFDO1lBRXRDLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDO1lBQzFCLE1BQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsU0FBUyxDQUFDO1lBRTdCLDZDQUE2QztZQUM3QyxJQUFJLFFBQVEsR0FBRyxJQUFJLDZCQUFpQixDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUVsRixpQkFBaUI7WUFDakIsUUFBUSxHQUFHLFFBQVEsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7WUFFL0QsUUFBUSxHQUFHLFFBQVEsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLGFBQWEsQ0FBQyxDQUFDO1lBRTlDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBYyxDQUFDLFdBQVcsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUNsRTtJQUNMLENBQUM7Q0FDSjtBQUVLLHVDQUFnQyxTQUFRLCtCQUFzQjtJQUNoRSxZQUFtQixHQUFhLEVBQUUsTUFBa0I7UUFDaEQsS0FBSyxDQUFDLEdBQUcsRUFBRTtZQUNQLElBQUksRUFBRSxRQUFRLENBQUMsUUFBUTtZQUN2QixJQUFJLEVBQUUsSUFBSSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQztZQUM5QixLQUFLLEVBQUUsSUFBSTtZQUNYLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNYLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQztZQUNYLElBQUksRUFBRSxJQUFJO1NBQ2IsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVELElBQVcsS0FBSyxLQUFLLE9BQU8sUUFBUSxDQUFDLENBQUMsQ0FBQztJQUV2QyxJQUFXLElBQUk7UUFDWCxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNO1lBQUUsT0FBTyxFQUFFLENBQUM7UUFFbEMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQztRQUNuQyxNQUFNLEdBQUcsR0FBRyxJQUFJLDZCQUFpQixDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBRS9FLE9BQU8sU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsRUFBRSxDQUFDO0lBQ3hELENBQUM7SUFFTSxRQUFRO1FBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHO1lBQUUsT0FBTztRQUV0QixJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ2xCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1NBQ2pDO1FBRUQsSUFBSSxJQUFJLENBQUMsR0FBRyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFO1lBQy9CLE1BQU0sR0FBRyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxJQUFJLENBQUMsR0FBRyxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQy9GLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUMvQztJQUNMLENBQUM7Q0FDSjs7O0FDcFNnQztBQUczQixxQkFBZSxTQUFRLCtDQUFrQixDQUFDLFNBQVM7SUFLckQsWUFBWSxLQUFtQixFQUFFLE1BQVc7UUFDeEMsS0FBSyxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUVqQyxNQUFNLE9BQU8sR0FBVyxNQUFNLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQztRQUU1QyxJQUFJLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUTtZQUNyQixNQUFNLENBQUMsS0FBSyxDQUFDLFFBQVEsSUFBSSxNQUFNLENBQUMsZ0JBQWdCLENBQUM7UUFFckQsTUFBTSxDQUFDLEtBQUssR0FBRyxDQUFDLE9BQU8sSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUVoRixJQUFJLENBQUMsSUFBSSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3BDLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQztRQUUvQyxNQUFNLEVBQUUsS0FBSyxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFFcEMsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBTyxHQUFHLENBQUMsRUFBRSxNQUFNLEVBQUUsTUFBTSxHQUFHLE9BQU8sR0FBRyxDQUFDLEdBQUcsRUFBRSxFQUFFLENBQUMsQ0FBQztRQUV2RyxJQUFJLENBQUMsUUFBUSxDQUFDLFNBQVMsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxRQUFRLENBQ2xCLENBQUMsT0FBTyxHQUFHLEtBQUssR0FBRyxDQUFDLEVBQUUsQ0FBQyxPQUFPLEdBQUcsTUFBTSxHQUFHLENBQUMsRUFDM0MsS0FBSyxHQUFHLE9BQU8sR0FBRyxDQUFDLEVBQ25CLE1BQU0sR0FBRyxPQUFPLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFFMUIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxZQUFZLENBQ3RCLENBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxDQUFDLEdBQUcsT0FBTyxFQUN4QixDQUFDLEVBQUUsTUFBTSxHQUFHLENBQUMsR0FBRyxPQUFPLEVBQ3ZCLENBQUMsRUFBRSxNQUFNLEdBQUcsQ0FBQyxHQUFHLE9BQU8sR0FBRyxDQUFDLENBQUMsQ0FBQztRQUVqQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztRQUNyQyxJQUFJLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQztRQUVmLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQyxLQUFLLEdBQUcsT0FBTyxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsT0FBTyxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBRXhFLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUF1QyxDQUFDO1FBRTlELElBQUksQ0FBQyxNQUFNO1lBQUUsTUFBTSxJQUFJLEtBQUssQ0FBQyw2QkFBNkIsQ0FBQyxDQUFDO1FBRTVELE1BQU0sQ0FBQyxFQUFFLENBQUMsYUFBYSxFQUFFLElBQUksQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDakQsTUFBTSxDQUFDLEVBQUUsQ0FBQyxZQUFZLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUNuRCxDQUFDO0lBRU8sV0FBVyxDQUFDLE9BQTZCO1FBQzdDLElBQUksSUFBSSxDQUFDLEtBQUs7WUFDVixJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDO1FBRXRCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQy9CLE9BQU8sRUFBRSxJQUFJO1lBQ2IsS0FBSyxFQUFFLENBQUM7WUFDUixRQUFRLEVBQUUsR0FBRztZQUNiLEtBQUssRUFBRSxHQUFHO1lBQ1YsTUFBTSxFQUFFLGNBQWM7U0FDekIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLFVBQVUsQ0FBQyxPQUE2QjtRQUM1QyxJQUFJLElBQUksQ0FBQyxLQUFLO1lBQ1YsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQztRQUV0QixJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDbEIsT0FBTyxFQUFFLElBQUk7WUFDYixLQUFLLEVBQUUsQ0FBQztZQUNSLFFBQVEsRUFBRSxHQUFHO1lBQ2IsTUFBTSxFQUFFLGNBQWM7U0FDekIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNKOzs7QUN6RTBDO0FBRXJDLG1CQUFjLFNBQVEsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTO0lBTXBELFlBQVksS0FBbUIsRUFBRSxNQUFXO1FBQ3hDLEtBQUssQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFFakMsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RELElBQUksTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJO1lBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFDOUQsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUM7UUFFdEIsSUFBSSxNQUFNLElBQUksTUFBTSxFQUFFO1lBQ2xCLE1BQU0sVUFBVSxtQkFBSyxNQUFNLEVBQUUsR0FBRyxJQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUUsQ0FBQztZQUVuRCxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUTtnQkFDekIsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFRLElBQUksTUFBTSxDQUFDLGdCQUFnQixDQUFDO1lBRXpELFVBQVUsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxPQUFPLElBQUksVUFBVSxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsR0FBRyxNQUFNLENBQUMsZ0JBQWdCLENBQUM7WUFFNUYsSUFBSSxDQUFDLElBQUksR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDL0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDdkI7UUFFRCxJQUFJLFNBQVMsSUFBSSxNQUFNLEVBQUU7WUFDckIsSUFBSSxDQUFDLE9BQU8sR0FBRyxJQUFJLGVBQU8sQ0FBQyxLQUFLLGtCQUFJLE1BQU0sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSyxNQUFNLENBQUMsT0FBTyxFQUFHLENBQUM7WUFDcEYsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLEdBQUcsQ0FBRSxFQUFFLENBQUM7WUFFdEIsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7U0FDMUI7UUFFRCxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsRUFBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFlBQVksRUFBRSxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3BELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksQ0FBQyxDQUFDO1FBQ3RELElBQUksQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxDQUFDO0lBQ3RELENBQUM7SUFFTSxPQUFPLENBQUMsSUFBdUI7UUFDbEMsSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ1gsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0I7SUFDTCxDQUFDO0lBRU8sV0FBVyxDQUFDLE9BQTZCO1FBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNsQixPQUFPLEVBQUUsSUFBSTtZQUNiLE1BQU0sRUFBRSxHQUFHO1lBQ1gsTUFBTSxFQUFFLEdBQUc7WUFDWCxRQUFRLEVBQUUsR0FBRztZQUNiLE1BQU0sRUFBRSxjQUFjO1NBQ3pCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLENBQUMsYUFBYSxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUM7SUFDM0MsQ0FBQztJQUVPLFVBQVUsQ0FBQyxPQUE2QjtRQUM1QyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUM7WUFDbEIsT0FBTyxFQUFFLElBQUk7WUFDYixNQUFNLEVBQUUsR0FBRztZQUNYLE1BQU0sRUFBRSxHQUFHO1lBQ1gsUUFBUSxFQUFFLEdBQUc7WUFDYixNQUFNLEVBQUUsY0FBYztTQUN6QixDQUFDLENBQUM7UUFFSCxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksRUFBRSxHQUFHLFNBQVMsQ0FBQyxDQUFDO0lBQzFDLENBQUM7SUFFTyxXQUFXLENBQUMsT0FBNkI7UUFDN0MsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO1lBQ2xCLE9BQU8sRUFBRSxJQUFJO1lBQ2IsTUFBTSxFQUFFLEdBQUc7WUFDWCxNQUFNLEVBQUUsR0FBRztZQUNYLFFBQVEsRUFBRSxHQUFHO1lBQ2IsTUFBTSxFQUFFLGNBQWM7U0FDekIsQ0FBQyxDQUFDO1FBRUgsSUFBSSxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsR0FBRyxTQUFTLENBQUMsQ0FBQztJQUMzQyxDQUFDO0lBRU8sU0FBUyxDQUFDLE9BQTZCO1FBQzNDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEdBQUcsQ0FBQztZQUNsQixPQUFPLEVBQUUsSUFBSTtZQUNiLE1BQU0sRUFBRSxHQUFHO1lBQ1gsTUFBTSxFQUFFLEdBQUc7WUFDWCxRQUFRLEVBQUUsR0FBRztZQUNiLE1BQU0sRUFBRSxjQUFjO1NBQ3pCLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLEdBQUcsU0FBUyxDQUFDLENBQUM7SUFDekMsQ0FBQztDQUNKOzs7QUM5RndDO0FBTXpDLElBQVksZ0JBTVg7QUFORCxXQUFZLGdCQUFnQjtJQUN4Qix1REFBUTtJQUNSLHlEQUFTO0lBQ1QsMkRBQVU7SUFDVixxREFBTztJQUNQLDREQUFXO0FBQ2YsQ0FBQyxFQU5XLGdCQUFnQixLQUFoQixnQkFBZ0IsUUFNM0I7QUFrQkssa0JBQWlCLFNBQVEsYUFBTTtJQUNqQyxZQUFZLEtBQVksRUFBRSxNQUF1QjtRQUM3QyxNQUFNLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBRTdDLE1BQU0sQ0FBQyxtQkFDSCxLQUFLLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxJQUN6QixNQUFNLENBQ1osQ0FBQztRQUVGLElBQUksTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFNLElBQUksRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQztRQUV4QyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssR0FBRyxnQkFBZ0IsQ0FBQyxLQUFLLENBQUMsS0FBSyxnQkFBZ0IsQ0FBQyxLQUFLO1lBQzdELE1BQU0sR0FBRyxFQUFFLENBQUMsRUFBRSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDO1FBRWxELElBQUksQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLGdCQUFnQixDQUFDLE1BQU0sQ0FBQyxLQUFLLGdCQUFnQixDQUFDLE1BQU07WUFDL0QsTUFBTSxHQUFHLEVBQUUsQ0FBQyxFQUFFLE1BQU0sQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLE1BQU0sR0FBRyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFFbkQsS0FBSyxDQUFDLEtBQUssb0JBQ0osTUFBTSxJQUNULElBQUksRUFBRTtnQkFDRixJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUk7Z0JBQ1osS0FBSyxFQUFFO29CQUNILFVBQVUsRUFBRSxZQUFZO29CQUN4QixTQUFTLEVBQUUsTUFBTTtvQkFDakIsUUFBUSxFQUFFLEVBQUU7b0JBQ1osSUFBSSxFQUFFLE9BQU87aUJBQ2hCO2FBQ0osRUFDRCxNQUFNLEVBQUU7Z0JBQ0osR0FBRyxFQUFFLENBQUMsQ0FBQyxNQUFNO2dCQUNiLEtBQUssRUFBRSxDQUFDLENBQUMsS0FBSztnQkFDZCxLQUFLLEVBQUUsR0FBRzthQUNiLEVBQ0QsT0FBTyxFQUFFO2dCQUNMLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTztnQkFDZixLQUFLLEVBQUU7b0JBQ0gsVUFBVSxFQUFFLFlBQVk7b0JBQ3hCLFFBQVEsRUFBRSxFQUFFO29CQUNaLElBQUksRUFBRSxPQUFPO2lCQUNoQjthQUNKLElBQ0gsQ0FBQztRQUVILElBQUksQ0FBQyxDQUFDLE9BQU87WUFBRSxJQUFJLENBQUMsRUFBRSxDQUFDLGFBQWEsRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDckQsQ0FBQztDQUNKOzs7QUMzRWdEO0FBRUU7QUFNcEI7QUFFbUQ7QUFDakM7QUFXdEI7QUFFUztBQUVwQyxNQUFNLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLElBQUksQ0FBQztBQUUxQixNQUFNLFFBQVEsR0FBRztJQUNiLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ2QsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLEVBQUUsR0FBRztRQUNULE9BQU8sRUFBRSxZQUFZO0tBQ3hCO0lBQ0QsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDakIsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLEVBQUUsR0FBRztRQUNULE9BQU8sRUFBRSxlQUFlO0tBQzNCO0lBQ0QsQ0FBQyxRQUFRLENBQUMsUUFBUSxDQUFDLEVBQUU7UUFDakIsS0FBSyxFQUFFLENBQUM7UUFDUixJQUFJLEVBQUUsR0FBRztRQUNULE9BQU8sRUFBRSxlQUFlO0tBQzNCO0NBQ0osQ0FBQztBQUVJLGtCQUFnQixTQUFRLE1BQU0sQ0FBQyxXQUFXLENBQUMsU0FBUztJQWV0RCxZQUFZLEtBQWlCO1FBQ3pCLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztRQVJULFVBQUssR0FBRyxLQUFLLENBQUM7UUFDZCxXQUFNLEdBQUcsS0FBSyxDQUFDO1FBU25CLElBQUksQ0FBQyxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRW5CLE1BQU0sR0FBRyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQy9CLE1BQU0sRUFBRSxNQUFNLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxFQUFFLEVBQUUsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDO1FBRWhELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsR0FBRyxDQUFDLE1BQU0sR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7UUFDbEUsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQztRQUUvRCxJQUFJLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQzthQUMvQixTQUFTLENBQUMsUUFBUSxDQUFDO2FBQ25CLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxNQUFNLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQzthQUNuQyxRQUFRLENBQUMsS0FBSyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLE1BQU0sR0FBRyxFQUFFLEdBQUcsQ0FBQyxDQUFDO2FBQzVDLFFBQVEsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEtBQUssR0FBRyxFQUFFLEdBQUcsQ0FBQyxFQUFFLEVBQUUsQ0FBQzthQUNsQyxRQUFRLENBQUMsQ0FBQyxFQUFFLE1BQU0sR0FBRyxFQUFFLEVBQUUsS0FBSyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQUUsRUFBRSxDQUFDO2FBQzVDLFNBQVMsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDO2FBQ3RCLFVBQVUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEtBQUssRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN2QyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUVyQixJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ3hDLElBQUksQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1FBRXhCLGdCQUFnQjtRQUVoQixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksWUFBUyxDQUFDLEtBQUssRUFBRTtZQUMxQixLQUFLLEVBQUUsQ0FBQztZQUNSLE1BQU0sRUFBRSxVQUFVO1lBQ2xCLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsTUFBTSxHQUFHLEVBQUUsRUFBRTtZQUMzQyxJQUFJLEVBQUUsR0FBRztZQUNULE9BQU8sRUFBRSxzQkFBc0I7WUFDL0IsT0FBTyxFQUFFLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUU7U0FDOUIsQ0FBQyxDQUFDLENBQUM7UUFFSixJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksWUFBUyxDQUFDLEtBQUssRUFBRTtZQUMxQixLQUFLLEVBQUUsQ0FBQztZQUNSLE1BQU0sRUFBRSxVQUFVO1lBQ2xCLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sR0FBRyxFQUFFLEVBQUU7WUFDaEQsSUFBSSxFQUFFLEdBQUc7WUFDVCxPQUFPLEVBQUUsT0FBTztZQUNoQixPQUFPLEVBQUUsR0FBRyxFQUFFLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsRUFBRSxLQUFLLEVBQUUsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDO1NBQzdELENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQztZQUNyQixDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRTtZQUNwQixDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sR0FBRyxFQUFFO1lBQ25CLElBQUksRUFBRSxTQUFVLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBbUIsQ0FBQyxLQUFLLEdBQUcsQ0FBQyxFQUFFO1lBQzNELEtBQUssRUFBRSxJQUFJLENBQUMsTUFBTTtTQUNyQixDQUFDLENBQUMsQ0FBQztRQUVKLGNBQWM7UUFDZCxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxVQUFVLEdBQUcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDdkMsQ0FBQyxFQUFFLEVBQUUsR0FBRyxLQUFLLEdBQUcsQ0FBQztZQUNqQixDQUFDLEVBQUUsRUFBRSxHQUFHLE1BQU0sR0FBRyxFQUFFO1lBQ25CLElBQUksRUFBRSxFQUFFO1lBQ1IsTUFBTSxFQUFFLEdBQUc7WUFDWCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO1NBQzNCLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQ3ZDLENBQUMsRUFBRSxFQUFFLEdBQUcsS0FBSztZQUNiLENBQUMsRUFBRSxFQUFFO1lBQ0wsSUFBSSxFQUFFLEVBQUU7WUFDUixNQUFNLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUU7WUFDdEIsZUFBZSxFQUFFLE9BQU87WUFDeEIsT0FBTyxFQUFFLEVBQUU7WUFDWCxLQUFLLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLO1NBQzNCLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsV0FBVyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDO1lBQ3pDLEtBQUssRUFBRSxHQUFHO1lBQ1YsQ0FBQyxFQUFFLEVBQUUsR0FBRyxLQUFLLEdBQUcsR0FBRztZQUNuQixDQUFDLEVBQUUsRUFBRSxHQUFHLENBQUM7WUFDVCxLQUFLLEVBQUUsSUFBSTtZQUNYLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUN0QixHQUFHLEVBQUUsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLEdBQUc7WUFDekQsS0FBSyxFQUFFLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxJQUFJO1lBQzFELE9BQU8sRUFBRSxLQUFLO1NBQ2pCLENBQUMsQ0FBQyxDQUFDO1FBRUosSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsY0FBYyxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDO1lBQzNDLENBQUMsRUFBRSxFQUFFO1lBQ0wsQ0FBQyxFQUFFLEVBQUUsR0FBRyxFQUFFO1lBQ1YsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFO1lBQ3RCLElBQUksRUFBRSxRQUFRO1lBQ2QsS0FBSyxFQUFFLElBQUksQ0FBQyxNQUFNO1lBQ2xCLE9BQU8sRUFBRSxLQUFLO1NBQ2pCLENBQUMsQ0FBQztRQUVILElBQUksS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLEVBQUU7WUFDbkIsZUFBZTtZQUNmLElBQUksQ0FBQyxHQUFHLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztZQUNqQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNsQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztvQkFBRSxTQUFTO2dCQUV0RCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsaUJBQWlCLENBQUMsS0FBSyxrQkFDcEMsTUFBTSxFQUFFLFVBQVUsRUFDbEIsTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEdBQUcsRUFBRSxFQUFFLEVBQ3pCLElBQUksSUFDRCxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQ25CLENBQUM7Z0JBRUgsSUFBSSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztnQkFFZCxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ1g7U0FDSjtRQUVELFVBQVU7UUFDVixLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUNwRCxLQUFLLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLENBQUMsQ0FBQztRQUN4RCxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUN2RCxDQUFDO0lBRU0sT0FBTztRQUNWLElBQUksSUFBSSxDQUFDLEtBQUssRUFBRTtZQUNaLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxhQUFhLEVBQUUsSUFBSSxDQUFDLGFBQWEsRUFBRSxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7WUFDckUsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxJQUFJLENBQUMsV0FBVyxFQUFFLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztZQUNqRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1NBQ25FO1FBRUQsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDO0lBQ3BCLENBQUM7SUFFTSxNQUFNO1FBQ1QsTUFBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDO1FBQ3BDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQWtCLENBQUM7UUFDbEQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO1FBRXZDLE1BQU0sS0FBSyxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssR0FBRyxDQUFDLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckYsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLEdBQUcsQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUV6RixNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQyxDQUFDO1FBQ3hFLE1BQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDLENBQUM7UUFFMUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFFckMsSUFBSSxNQUFNLEVBQUU7WUFDUixNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsSUFBbUIsQ0FBQztZQUV4QyxJQUFJLENBQUMsVUFBVSxDQUFDLGtCQUFrQixDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBRTlDLE1BQU0sQ0FBQyxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDO1lBRXBELE1BQU0sQ0FBQyxHQUFHLElBQUksNkJBQWlCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRTNFLE1BQU0sQ0FBQyxHQUFHLElBQUksNkJBQWlCLENBQUMsSUFBSSxDQUFDLFFBQVEsRUFBRSxRQUFRLENBQUMsYUFBYSxDQUFDLENBQUMsRUFBRSxDQUFDLFFBQVEsQ0FBQyxlQUFlLENBQUMsQ0FBQztZQUVwRyxNQUFNLEtBQUssR0FBRyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBRTNFLE1BQU0sS0FBSyxHQUFHLElBQUksV0FBVyxDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsZUFBZSxDQUFDLGNBQWMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsQ0FBQztZQUV6SCxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQztnQkFDcEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUNsQixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLEVBQUU7Z0JBQ2xCLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDbEIsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sS0FBSyxFQUFFO2dCQUN0QixLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxLQUFLLEVBQUU7YUFDekIsQ0FBQyxDQUFDO1NBQ047YUFBTTtZQUNILElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFDO1NBQzNDO1FBRUQsSUFBSSxJQUFJLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO1lBQ2hDLElBQUksTUFBTSxHQUFHLElBQUksQ0FBQztZQUVsQixLQUFLLE1BQU0sSUFBSSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFO2dCQUNqQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQztvQkFBRSxTQUFTO2dCQUVyRCxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDOUIsTUFBTSxHQUFHLEtBQUssQ0FBQztvQkFDZixNQUFNO2lCQUNUO2FBQ0o7WUFFRCxJQUFJLE1BQU0sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBRSxJQUFJLENBQUMsSUFBWSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsRUFBRTtnQkFFM0UscURBQXFEO2dCQUNyRCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsT0FBTyxDQUFDLENBQUM7YUFDeEM7U0FDSjtRQUVELElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSztZQUFFLE9BQU87UUFFeEIsK0JBQStCO1FBQy9CLElBQUksSUFBSSxDQUFDLFFBQVEsRUFBRTtZQUNmLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7WUFFdEIsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLEdBQUcsRUFBRSxDQUFDO1lBRTFCLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7Z0JBQzFDLE1BQU0sRUFBRSxLQUFLLEVBQUUsR0FBRyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDO2dCQUVsRCxJQUFJLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxJQUFJLEtBQUssWUFBWSxNQUFNLElBQUksR0FBRyxZQUFZLE1BQU0sRUFBRTtvQkFDeEUsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDO29CQUVsQyxJQUFJLENBQUMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7b0JBRTFELElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsRUFBRSxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQUM7b0JBRXZDLElBQUksQ0FBQyxRQUFRLENBQUMsV0FBVyxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztvQkFDNUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxXQUFXLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxFQUFFLEdBQUcsQ0FBQyxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO29CQUV4RCxNQUFNLEdBQUcsR0FBRyxHQUFHLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO29CQUM3QixNQUFNLEtBQUssR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDdkMsTUFBTSxHQUFHLEdBQUcsR0FBRyxDQUFDLFVBQVUsRUFBRSxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDdkMsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFDcEQsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsRUFBRSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQztvQkFFcEQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxTQUFTLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO29CQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDO2lCQUN4RTtnQkFFRCxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUks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Q0FBQztpQkFDM0IsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQztpQkFDM0IsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQztpQkFDM0IsV0FBVyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLEdBQUcsQ0FBQztpQkFDM0IsV0FBVyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBRWpDLFFBQVEsQ0FBQyxlQUFlLENBQUMsWUFBWSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQztZQUVqRCxRQUFRLENBQUMsT0FBTyxFQUFFLENBQUM7U0FDdEI7UUFFRCxJQUFJLENBQUMsQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLG1CQUFPLENBQUMsRUFBMkIsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUVsSCxJQUFJLENBQUMsQ0FBQyxVQUFVLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDbkMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLG1CQUFPLENBQUMsQ0FBOEIsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUV0SCxJQUFJLENBQUMsQ0FBQyxTQUFTLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7WUFDbEMsSUFBSSxDQUFDLElBQUksQ0FBQyxXQUFXLENBQUMsU0FBUyxFQUFFLG1CQUFPLENBQUMsRUFBNkIsQ0FBQyxFQUFFLEVBQUUsVUFBVSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsR0FBRyxFQUFFLENBQUMsQ0FB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RSxFQUFFLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRTtZQUM5RSxLQUFLLEVBQUUsQ0FBQyxnQkFBVSxFQUFFLHVCQUFnQixFQUFFLGdCQUFVLENBQUM7U0FDcEQsQ0FBQyxDQUFDO1FBRUgsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLFFBQStDLENBQUM7UUFDdEUsUUFBUSxDQUFDLFdBQVcsQ0FBQyxXQUFXLEVBQUUsSUFBSSwyQkFBaUIsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ25FLENBQUM7Q0FDSjtBQUVELE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsR0FBRyxFQUFFO0lBQ2pDLElBQUksSUFBSSxHQUFHLElBQUksbUJBQWUsRUFBRSxDQUFDO0FBQ3JDLENBQUMsQ0FBQyxDQUFDIiwiZmlsZSI6IjQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBWZWN0b3JMaWtlIH0gZnJvbSBcIkB1dGlsL21hdGhcIjtcclxuXHJcbmV4cG9ydCBjb25zdCBlbnVtIEdhbWVNb2RlIHtcclxuICAgIFZpZXcgPSBcInZpZXdcIixcclxuICAgIEZvcmNlID0gXCJmb3JjZVwiLFxyXG4gICAgVmVsb2NpdHkgPSBcInZlbG9jaXR5XCIsXHJcbiAgICBQb3NpdGlvbiA9IFwicG9zaXRpb25cIlxyXG59XHJcblxyXG5leHBvcnQgY29uc3QgZW51bSBUaWxlVHlwZSB7XHJcbiAgICBXb29kID0gXCJ3b29kXCIsXHJcbiAgICBTdGVlbCA9IFwic3RlZWxcIixcclxuICAgIEFsdW1pbnVtID0gXCJhbHVtaW51bVwiLFxyXG4gICAgU3R5cm9mb2FtID0gXCJwbGFzdGljXCJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUaWxlRGF0YSB7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcblxyXG4gICAgdHlwZTogVGlsZVR5cGU7XHJcblxyXG4gICAgdHJhY2s/OiBib29sZWFuO1xyXG4gICAgY29udHJvbD86IGJvb2xlYW47XHJcblxyXG4gICAgZWxhc3RpYz86IGJvb2xlYW47XHJcbiAgICByb3RhdGlvbj86IGJvb2xlYW47XHJcbiAgICBmcmljdGlvbj86IG51bWJlcjtcclxuXHJcbiAgICB2ZWxvY2l0eT86IFZlY3Rvckxpa2U7XHJcbiAgICBhbmd1bGFyVmVsb2NpdHk/OiBudW1iZXI7XHJcblxyXG4gICAgcGluPzogVmVjdG9yTGlrZTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBHb2FsRGF0YSB7XHJcbiAgICBtaW5pbXVtPzogbnVtYmVyIHwgVmVjdG9yTGlrZTtcclxuICAgIG1heGltdW0/OiBudW1iZXIgfCBWZWN0b3JMaWtlO1xyXG4gICAgdHlwZTogR29hbFR5cGU7XHJcbiAgICB4OiBudW1iZXI7XHJcbiAgICB5OiBudW1iZXI7XHJcbiAgICB3aWR0aDogbnVtYmVyO1xyXG4gICAgaGVpZ2h0OiBudW1iZXI7XHJcbiAgICBwb3NpdGlvbjogVmVjdG9yTGlrZTtcclxuICAgIG9iamVjdGl2ZXM6IE9iamVjdGl2ZURhdGFbXTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaGFwZURhdGEge1xyXG4gICAgZGF0YTogc3RyaW5nO1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgc3RhdGljPzogYm9vbGVhbjtcclxuICAgIHBpbj86IFZlY3Rvckxpa2U7XHJcbiAgICBtYXNzPzogbnVtYmVyO1xyXG59XHJcblxyXG5leHBvcnQgZW51bSBBbm5vdGF0aW9uVHlwZSB7XHJcbiAgICBUZXh0ID0gXCJ0ZXh0XCJcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBUZXh0QW5ub3RhdGlvbkRhdGEge1xyXG4gICAgdHlwZTogQW5ub3RhdGlvblR5cGUuVGV4dDtcclxuICAgIHRleHQ6IHN0cmluZztcclxuICAgIHg6IG51bWJlcjtcclxuICAgIHk6IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgQW5ub3RhdGlvbkRhdGEgPSBUZXh0QW5ub3RhdGlvbkRhdGE7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIExldmVsRGF0YSB7XHJcbiAgICBpbmRleDogbnVtYmVyO1xyXG4gICAgd2lkdGg6IG51bWJlcjtcclxuICAgIGhlaWdodDogbnVtYmVyO1xyXG4gICAgdGltZTogbnVtYmVyO1xyXG4gICAgcGF1c2VkOiBib29sZWFuO1xyXG4gICAgbW9kZXM6IHsgW21vZGU6IHN0cmluZ106IG51bWJlciB9O1xyXG4gICAgdGlsZXM6IFRpbGVEYXRhW107XHJcbiAgICBnb2FsczogR29hbERhdGFbXTtcclxuICAgIHNoYXBlcz86IFNoYXBlRGF0YVtdO1xyXG4gICAgYW5ub3RhdGlvbnM6IEFubm90YXRpb25EYXRhW107XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE9iamVjdGl2ZVR5cGUge1xyXG4gICAgVHlwZSA9IFwidHlwZVwiLFxyXG4gICAgVmVsb2NpdHkgPSBcInZlbG9jaXR5XCIsXHJcbiAgICBNb21lbnR1bSA9IFwibW9tZW50dW1cIixcclxuICAgIEFuZ3VsYXJWZWxvY2l0eSA9IFwiYW5ndWxhci12ZWxvY2l0eVwiXHJcbn1cclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgVHlwZU9iamVjdGl2ZURhdGEge1xyXG4gICAgdHlwZTogT2JqZWN0aXZlVHlwZS5UeXBlO1xyXG4gICAgdGFyZ2V0OiBUaWxlVHlwZTtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTY2FsYXJPYmplY3RpdmVEYXRhIHtcclxuICAgIHR5cGU6IE9iamVjdGl2ZVR5cGUuQW5ndWxhclZlbG9jaXR5O1xyXG4gICAgdGFyZ2V0OiB7IG1pbmltdW0/OiBudW1iZXI7IG1heGltdW0/OiBudW1iZXIgfSB8IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWZWN0b3JPYmplY3RpdmVEYXRhIHtcclxuICAgIHR5cGU6IE9iamVjdGl2ZVR5cGUuVmVsb2NpdHkgfCBPYmplY3RpdmVUeXBlLk1vbWVudHVtO1xyXG4gICAgdGFyZ2V0OiB7IG1pbmltdW0/OiBWZWN0b3JMaWtlIHwgbnVtYmVyOyBtYXhpbXVtPzogVmVjdG9yTGlrZSB8IG51bWJlciB9IHwgVmVjdG9yTGlrZSB8IG51bWJlcjtcclxufVxyXG5cclxuZXhwb3J0IHR5cGUgT2JqZWN0aXZlRGF0YSA9IFR5cGVPYmplY3RpdmVEYXRhIHwgVmVjdG9yT2JqZWN0aXZlRGF0YSB8IFNjYWxhck9iamVjdGl2ZURhdGE7XHJcblxyXG5leHBvcnQgZW51bSBHb2FsVHlwZSB7XHJcbiAgICBSZXF1aXJlZCxcclxuICAgIEJvbnVzXHJcbn0iLCJpbXBvcnQgKiBhcyBQaGFzZXIgZnJvbSBcInBoYXNlclwiO1xyXG5cclxuZXhwb3J0IGVudW0gTGV2ZWxPdXRjb21lIHtcclxuICAgIFN1Y2Nlc3MgPSAwLFxyXG4gICAgRmFpbHVyZSA9IDFcclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIExldmVsQmFubmVyIGV4dGVuZHMgUGhhc2VyLkdhbWVPYmplY3RzLkNvbnRhaW5lciB7XHJcbiAgICBwdWJsaWMgYmFubmVyVHlwZTogTGV2ZWxPdXRjb21lO1xyXG4gICAgcHVibGljIGJhbm5lcjogUGhhc2VyLkdhbWVPYmplY3RzLkltYWdlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNjZW5lOiBQaGFzZXIuU2NlbmUsIHR5cGU6IExldmVsT3V0Y29tZSkge1xyXG4gICAgICAgIHN1cGVyKHNjZW5lKTtcclxuXHJcbiAgICAgICAgdGhpcy5iYW5uZXJUeXBlID0gdHlwZTtcclxuICAgICAgICB0aGlzLmJhbm5lciA9IHNjZW5lLm1ha2UuaW1hZ2Uoe1xyXG4gICAgICAgICAgICBrZXk6IFwiYmFubmVyc1wiLFxyXG4gICAgICAgICAgICBmcmFtZTogdHlwZSxcclxuICAgICAgICAgICAgYWxwaGE6IDAsXHJcbiAgICAgICAgICAgIHNjYWxlOiAwXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgdGhpcy5hZGQodGhpcy5iYW5uZXIpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiZWdpbigpIHtcclxuICAgICAgICB0aGlzLnNjZW5lLnR3ZWVucy5hZGQoe1xyXG4gICAgICAgICAgICB0YXJnZXRzOiB0aGlzLmJhbm5lcixcclxuICAgICAgICAgICAgYWxwaGE6IDEsXHJcbiAgICAgICAgICAgIHNjYWxlWDogMSxcclxuICAgICAgICAgICAgc2NhbGVZOiAxLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwMCxcclxuICAgICAgICAgICAgZWFzZTogJ0VsYXN0aWMnLFxyXG4gICAgICAgICAgICBlYXNlUGFyYW1zOiBbMS4xLCAwLjVdXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBUd2VlbiB9IGZyb20gXCJAdHdlZW5qcy90d2Vlbi5qc1wiO1xyXG5cclxuY29uc3QgeyBzcXJ0LCBwb3csIFBJIH0gPSBNYXRoO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGxhc3Q8VD4oYXJyOiBUW10pOiBUIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gYXJyLmxlbmd0aCA+IDAgPyBhcnJbYXJyLmxlbmd0aCAtIDFdIDogbnVsbDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHByb21pc2UoYW5pbTogVHdlZW4pOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IGFuaW0ub25Db21wbGV0ZShyZXNvbHZlKSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBub29wPFQ+KCk6IFByb21pc2U8VD4ge1xyXG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKHJlc29sdmUgPT4gcmVzb2x2ZSgpKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGluc2V0KHJlY3Q6IFBoYXNlci5HZW9tLlJlY3RhbmdsZSwgYW1vdW50OiBudW1iZXIpIHtcclxuICAgIHJldHVybiByZWN0LnNldFRvKFxyXG4gICAgICAgIHJlY3QubGVmdCArIGFtb3VudCxcclxuICAgICAgICByZWN0LnRvcCArIGFtb3VudCxcclxuICAgICAgICByZWN0LndpZHRoIC0gYW1vdW50ICogMixcclxuICAgICAgICByZWN0LmhlaWdodCAtIGFtb3VudCAqIDIpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gcmV2ZXJzZUVudW0odHlwZTogYW55KSB7XHJcbiAgICBmb3IgKGNvbnN0IG1lbWJlciBpbiB0eXBlKSB7XHJcbiAgICAgICAgaWYgKHR5cGUuaGFzT3duUHJvcGVydHkobWVtYmVyKSkge1xyXG4gICAgICAgICAgICB0eXBlW3R5cGVbbWVtYmVyXV0gPSBtZW1iZXI7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZmluZDxUPihhcnI6IFRbXSwgcHJlZGljYXRlOiAodmFsdWU6IFQsIGluZGV4OiBudW1iZXIsIGFycjogVFtdKSA9PiBib29sZWFuKSB7XHJcbiAgICBjb25zdCBpbmRleCA9IGFyci5maW5kSW5kZXgocHJlZGljYXRlKTtcclxuICAgIGlmIChpbmRleCAhPT0gLTEpIHJldHVybiBhcnJbaW5kZXhdO1xyXG4gICAgZWxzZSByZXR1cm4gbnVsbDtcclxufSIsImNvbnN0IHsgcG93LCBzcXJ0LCBoeXBvdCwgYWJzIH0gPSBNYXRoO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHNxdWFyZShuOiBudW1iZXIpIHtcclxuICAgIHJldHVybiBuICogbjtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wKG1pbjogbnVtYmVyLCB4OiBudW1iZXIsIG1heDogbnVtYmVyKSB7XHJcbiAgICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgoeCwgbWluKSwgbWF4KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGRpc3QoYTogbnVtYmVyIHwgVmVjdG9yTGlrZSwgYjogbnVtYmVyIHwgVmVjdG9yTGlrZSkge1xyXG4gICAgaWYgKHR5cGVvZiBhID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBiID09PSBcIm51bWJlclwiKVxyXG4gICAgICAgIHJldHVybiBhYnMoYSAtIGIpO1xyXG4gICAgaWYgKHR5cGVvZiBhID09PSBcIm51bWJlclwiICYmIHR5cGVvZiBiID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHJldHVybiBhYnMoYSAtIFZlY3Rvci5sZW4oYikpO1xyXG4gICAgaWYgKHR5cGVvZiBhID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBiID09PSBcIm51bWJlclwiKVxyXG4gICAgICAgIHJldHVybiBhYnMoVmVjdG9yLmxlbihhKSAtIGIpO1xyXG4gICAgaWYgKHR5cGVvZiBhID09PSBcIm9iamVjdFwiICYmIHR5cGVvZiBiID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgIHJldHVybiBWZWN0b3IuZGlzdChhLCBiKTtcclxuXHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJPcGVyYW5kcyBtdXN0IGJvdGggYmUgb2YgdGhlIHNhbWUgdHlwZSFcIik7XHJcbn1cclxuXHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFZlY3Rvckxpa2UgeyB4OiBudW1iZXI7IHk6IG51bWJlciB9XHJcblxyXG5cclxuLy8gdHNsaW50OmRpc2FibGU6bm8tdXNlLWJlZm9yZS1kZWNsYXJlXHJcbmV4cG9ydCBjbGFzcyBWZWN0b3Ige1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IHplcm8oKSB7IHJldHVybiBuZXcgVmVjdG9yKDAsIDApOyB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgPCBiLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGx0KGE6IG51bWJlciB8IFZlY3Rvckxpa2UsIGI6IFZlY3Rvckxpa2UpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwibnVtYmVyXCIpIHJldHVybiBhIDwgVmVjdG9yLmxlbihiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGEueCA8IGIueCAmJiBhLnkgPCBiLnk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBSZXR1cm5zIGEgPiBiLlxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgc3RhdGljIGd0KGE6IG51bWJlciB8IFZlY3Rvckxpa2UsIGI6IFZlY3Rvckxpa2UpOiBib29sZWFuIHtcclxuICAgICAgICBpZiAodHlwZW9mIGEgPT09IFwibnVtYmVyXCIpIHJldHVybiBhID4gVmVjdG9yLmxlbihiKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIGEueCA+IGIueCAmJiBhLnkgPiBiLnk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBsZW5zcSh2OiBWZWN0b3JMaWtlKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gVmVjdG9yLmRvdCh2LCB2KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGRvdChhOiBWZWN0b3JMaWtlLCBiOiBWZWN0b3JMaWtlKTogbnVtYmVyIHtcclxuICAgICAgICByZXR1cm4gYS54ICogYi54ICsgYS55ICogYi55O1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbGVuKHY6IFZlY3Rvckxpa2UpOiBudW1iZXIge1xyXG4gICAgICAgIHJldHVybiBoeXBvdCh2LngsIHYueSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBkaXN0KGE6IFZlY3Rvckxpa2UsIGI6IFZlY3Rvckxpa2UpIHtcclxuICAgICAgICByZXR1cm4gVmVjdG9yLnN1YihhLCBiKS5sZW5ndGgoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGRpdihhOiBWZWN0b3JMaWtlLCBiOiBWZWN0b3JMaWtlIHwgbnVtYmVyKTogVmVjdG9yIHtcclxuICAgICAgICByZXR1cm4gdHlwZW9mIGIgPT09IFwibnVtYmVyXCIgP1xyXG4gICAgICAgICAgICBuZXcgVmVjdG9yKGEueCAvIGIsIGEueSAvIGIpIDpcclxuICAgICAgICAgICAgbmV3IFZlY3RvcihhLnggLyBiLngsIGEueSAvIGIueSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBtdWx0KGE6IFZlY3Rvckxpa2UsIGI6IFZlY3Rvckxpa2UgfCBudW1iZXIpOiBWZWN0b3Ige1xyXG4gICAgICAgIHJldHVybiB0eXBlb2YgYiA9PT0gXCJudW1iZXJcIiA/XHJcbiAgICAgICAgICAgIG5ldyBWZWN0b3IoYS54ICogYiwgYS55ICogYikgOlxyXG4gICAgICAgICAgICBuZXcgVmVjdG9yKGEueCAqIGIueCwgYS55ICogYi55KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIHN1YihhOiBWZWN0b3JMaWtlLCBiOiBWZWN0b3JMaWtlIHwgbnVtYmVyKTogVmVjdG9yIHtcclxuICAgICAgICBpZiAodHlwZW9mIGIgPT09IFwibnVtYmVyXCIpIHtcclxuICAgICAgICAgICAgY29uc3QgbGVuID0gVmVjdG9yLmxlbihhKTtcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoYS54IC0gYiAqIGEueCAvIGxlbiwgYS55IC0gYiAqIGEueSAvIGxlbik7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFZlY3RvcihhLnggLSBiLngsIGEueSAtIGIueSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBhZGQoYTogVmVjdG9yTGlrZSwgYjogVmVjdG9yTGlrZSB8IG51bWJlcik6IFZlY3RvciB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBiID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9IFZlY3Rvci5sZW4oYSk7XHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgVmVjdG9yKGEueCArIGIgKiBhLnggLyBsZW4sIGEueSArIGIgKiBhLnkgLyBsZW4pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3IoYS54ICsgYi54LCBhLnkgKyBiLnkpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgbm9ybWFsaXplKHY6IFZlY3Rvckxpa2UpOiBWZWN0b3Ige1xyXG4gICAgICAgIGNvbnN0IGwgPSBWZWN0b3IubGVuKHYpO1xyXG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yKHYueCAvIGwsIHYueSAvIGwpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB4OiBudW1iZXI7XHJcbiAgICBwdWJsaWMgeTogbnVtYmVyO1xyXG5cclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlcik7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogVmVjdG9yTGlrZSk7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogVmVjdG9yTGlrZSB8IG51bWJlciwgeT86IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0eXBlb2YgeCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICB0aGlzLnggPSB4O1xyXG4gICAgICAgICAgICB0aGlzLnkgPSB0eXBlb2YgeSA9PT0gXCJudW1iZXJcIiA/IHkgOiB4O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMueCA9IHgueDtcclxuICAgICAgICAgICAgdGhpcy55ID0geC55O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgbGVuZ3RoKCkgeyByZXR1cm4gVmVjdG9yLmxlbih0aGlzKTsgfVxyXG4gICAgcHVibGljIG5vcm1hbGl6ZWQoKSB7IHJldHVybiBWZWN0b3Iubm9ybWFsaXplKHRoaXMpOyB9XHJcblxyXG4gICAgcHVibGljIHBsdXModjogbnVtYmVyIHwgVmVjdG9yTGlrZSkgeyByZXR1cm4gVmVjdG9yLmFkZCh0aGlzLCB2KTsgfVxyXG4gICAgcHVibGljIG1pbnVzKHY6IG51bWJlciB8IFZlY3Rvckxpa2UpIHsgcmV0dXJuIFZlY3Rvci5zdWIodGhpcywgdik7IH1cclxuICAgIHB1YmxpYyB0aW1lcyh2OiBudW1iZXIgfCBWZWN0b3JMaWtlKSB7IHJldHVybiBWZWN0b3IubXVsdCh0aGlzLCB2KTsgfVxyXG4gICAgcHVibGljIG92ZXIodjogbnVtYmVyIHwgVmVjdG9yTGlrZSkgeyByZXR1cm4gVmVjdG9yLmRpdih0aGlzLCB2KTsgfVxyXG5cclxuICAgIHB1YmxpYyBkb3QodjogVmVjdG9yTGlrZSkgeyByZXR1cm4gVmVjdG9yLmRvdCh0aGlzLCB2KTsgfVxyXG5cclxuICAgIHB1YmxpYyByYXkoKSB7IHJldHVybiBuZXcgUmF5KFZlY3Rvci56ZXJvLCB0aGlzKTsgfVxyXG5cclxuICAgIHB1YmxpYyB0b1N0cmluZygpIHsgcmV0dXJuIGDin6gke3RoaXMueH0sICR7dGhpcy55feKfqWA7IH1cclxuICAgIHB1YmxpYyB0b0ZpeGVkKHA/OiBudW1iZXIpIHsgcmV0dXJuIGDin6gke3RoaXMueC50b0ZpeGVkKHApfSwgJHt0aGlzLnkudG9GaXhlZChwKX3in6lgOyB9XHJcbiAgICBwdWJsaWMgdG9QcmVjaXNpb24ocD86IG51bWJlcikgeyByZXR1cm4gYOKfqCR7dGhpcy54LnRvUHJlY2lzaW9uKHApfSwgJHt0aGlzLnkudG9QcmVjaXNpb24ocCl94p+pYDsgfVxyXG4gICAgcHVibGljIHRvRXhwb25lbnRpYWwocD86IG51bWJlcikgeyByZXR1cm4gYOKfqCR7dGhpcy54LnRvRXhwb25lbnRpYWwocCl9LCAke3RoaXMueS50b0V4cG9uZW50aWFsKHApfeKfqWA7IH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFJheSB7XHJcbiAgICBwdWJsaWMgc291cmNlOiBWZWN0b3JMaWtlO1xyXG4gICAgcHVibGljIGRpcmVjdGlvbjogVmVjdG9yTGlrZTtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Ioc291cmNlOiBWZWN0b3JMaWtlLCBkaXJlY3Rpb246IFZlY3Rvckxpa2UpIHtcclxuICAgICAgICB0aGlzLnNvdXJjZSA9IHsgeDogc291cmNlLngsIHk6IHNvdXJjZS55IH07XHJcbiAgICAgICAgdGhpcy5kaXJlY3Rpb24gPSB7IHg6IGRpcmVjdGlvbi54LCB5OiBkaXJlY3Rpb24ueSB9O1xyXG4gICAgfVxyXG5cclxuICAgIGdldCB4MSgpIHsgcmV0dXJuIHRoaXMuc291cmNlLng7IH1cclxuICAgIGdldCB5MSgpIHsgcmV0dXJuIHRoaXMuc291cmNlLnk7IH1cclxuICAgIGdldCB4MigpIHsgcmV0dXJuIHRoaXMueDEgKyB0aGlzLmRpcmVjdGlvbi54OyB9XHJcbiAgICBnZXQgeTIoKSB7IHJldHVybiB0aGlzLnkxICsgdGhpcy5kaXJlY3Rpb24ueTsgfVxyXG4gICAgZ2V0IGVuZCgpIHsgcmV0dXJuIFZlY3Rvci5hZGQodGhpcy5zb3VyY2UsIHRoaXMuZGlyZWN0aW9uKTsgfTtcclxuICAgIGdldCBsZW5ndGgoKSB7IHJldHVybiBWZWN0b3IubGVuKHRoaXMuZGlyZWN0aW9uKTsgfVxyXG5cclxuICAgIGdldCBhbmdsZSgpIHsgcmV0dXJuIE1hdGguYXRhbjIodGhpcy5kaXJlY3Rpb24ueSwgdGhpcy5kaXJlY3Rpb24ueCk7IH1cclxuICAgIGdldCB1bml0KCkgeyByZXR1cm4gbmV3IFJheSh0aGlzLnNvdXJjZSwgVmVjdG9yLmRpdih0aGlzLmRpcmVjdGlvbiwgdGhpcy5sZW5ndGgpKTsgfVxyXG5cclxuICAgIHB1YmxpYyBwbHVzKHg6IG51bWJlciB8IFZlY3Rvckxpa2UpIHtcclxuICAgICAgICBpZiAodHlwZW9mIHggPT09IFwibnVtYmVyXCIpXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgUmF5KHRoaXMuc291cmNlLCBWZWN0b3IuYWRkKHRoaXMuZGlyZWN0aW9uLCBWZWN0b3Iubm9ybWFsaXplKHRoaXMuZGlyZWN0aW9uKS50aW1lcyh4KSkpO1xyXG4gICAgICAgIHJldHVybiBuZXcgUmF5KHRoaXMuc291cmNlLCBWZWN0b3IuYWRkKHRoaXMuZGlyZWN0aW9uLCB4KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRpbWVzKHg6IG51bWJlciB8IFZlY3Rvckxpa2UpIHtcclxuICAgICAgICByZXR1cm4gbmV3IFJheSh0aGlzLnNvdXJjZSwgVmVjdG9yLm11bHQodGhpcy5kaXJlY3Rpb24sIHgpKTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBTaXplTGlrZSB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyOyB9XHJcblxyXG5leHBvcnQgY2xhc3MgU2l6ZSB7XHJcbiAgICBwdWJsaWMgd2lkdGg6IG51bWJlcjtcclxuICAgIHB1YmxpYyBoZWlnaHQ6IG51bWJlcjtcclxuXHJcbiAgICBwdWJsaWMgc3RhdGljIGZyb20odjogVmVjdG9yTGlrZSkge1xyXG4gICAgICAgIHJldHVybiBuZXcgU2l6ZSh2LngsIHYueSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHNpemU6IFNpemVMaWtlKTtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcihkaW1lbnNpb246IG51bWJlcik7XHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3Iod2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIpO1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKHdpZHRoOiBudW1iZXIgfCBTaXplTGlrZSwgaGVpZ2h0PzogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiB3aWR0aCA9PT0gXCJudW1iZXJcIikge1xyXG4gICAgICAgICAgICB0aGlzLndpZHRoID0gd2lkdGg7XHJcbiAgICAgICAgICAgIHRoaXMuaGVpZ2h0ID0gdHlwZW9mIGhlaWdodCA9PT0gXCJudW1iZXJcIiA/IGhlaWdodCA6IHdpZHRoO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMud2lkdGggPSB3aWR0aC53aWR0aDtcclxuICAgICAgICAgICAgdGhpcy5oZWlnaHQgPSB3aWR0aC5oZWlnaHQ7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuXHJcbiIsImltcG9ydCB7IHJldmVyc2VFbnVtIH0gZnJvbSBcIkB1dGlsL2luZGV4LnRzXCI7XHJcblxyXG5pbXBvcnQgeyBWZWN0b3IsIFZlY3Rvckxpa2UgfSBmcm9tIFwiLi9tYXRoXCI7XHJcblxyXG5jb25zdCB7IFBJLCBwb3cgfSA9IE1hdGg7XHJcblxyXG5leHBvcnQgdHlwZSBOdW1lcmljID0gVmVjdG9yTWVhc3VyZW1lbnQgfCBNZWFzdXJlbWVudCB8IFZlY3RvciB8IG51bWJlcjtcclxuZXhwb3J0IHR5cGUgU2NhbGFyID0gTWVhc3VyZW1lbnQgfCBudW1iZXI7XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gYWJzKHg6IG51bWJlcik6IG51bWJlcjtcclxuZXhwb3J0IGZ1bmN0aW9uIGFicyh4OiBNZWFzdXJlbWVudCk6IE1lYXN1cmVtZW50O1xyXG5leHBvcnQgZnVuY3Rpb24gYWJzKHg6IFNjYWxhcik6IFNjYWxhcjtcclxuZXhwb3J0IGZ1bmN0aW9uIGFicyh4OiBTY2FsYXIpOiBTY2FsYXIge1xyXG4gICAgaWYgKHR5cGVvZiB4ID09PSBcIm51bWJlclwiKSByZXR1cm4gTWF0aC5hYnMoeCk7XHJcbiAgICBlbHNlIHJldHVybiBuZXcgTWVhc3VyZW1lbnQoTWF0aC5hYnMoeC52YWx1ZSksIHgudW5pdCk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBwcmVjaXNpb24ocD86IG51bWJlcikge1xyXG4gICAgcmV0dXJuICh0YWdzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4ua2V5czogTnVtZXJpY1tdKSA9PiB7XHJcbiAgICAgICAgbGV0IHN0ciA9IHRhZ3NbMF07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0YWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHN0ciArPSBrZXlzW2kgLSAxXS50b1ByZWNpc2lvbihwKTtcclxuICAgICAgICAgICAgc3RyICs9IHRhZ3NbaV07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gc3RyO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZml4ZWQocD86IG51bWJlcikge1xyXG4gICAgcmV0dXJuICh0YWdzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4ua2V5czogTnVtZXJpY1tdKSA9PiB7XHJcbiAgICAgICAgbGV0IHN0ciA9IHRhZ3NbMF07XHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDE7IGkgPCB0YWdzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGxldCBudW0gPSBrZXlzW2kgLSAxXTtcclxuXHJcbiAgICAgICAgICAgIGlmICghKG51bSBpbnN0YW5jZW9mIFZlY3RvcikgJiYgdHlwZW9mIHAgPT09IFwibnVtYmVyXCIgJiYgYWJzKG51bSkudmFsdWVPZigpIDwgcG93KDEwLCAtcCkpXHJcbiAgICAgICAgICAgICAgICBudW0gPSBhYnMobnVtKTsgLy8gZml4ZXMgLTAuMFxyXG5cclxuICAgICAgICAgICAgc3RyICs9IG51bS50b0ZpeGVkKHApO1xyXG4gICAgICAgICAgICBzdHIgKz0gdGFnc1tpXTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHJldHVybiBzdHI7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIERpc3RhbmNlIHtcclxuICAgIFBpeGVsID0gXCJweFwiLFxyXG4gICAgTWV0ZXIgPSBcIm1cIlxyXG59XHJcblxyXG5leHBvcnQgZW51bSBUaW1lIHtcclxuICAgIFNlY29uZCA9IFwic1wiLFxyXG4gICAgU3RlcCA9IFwic3RlcFwiXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIEZvcmNlIHtcclxuICAgIE5ld3RvbiA9IFwiTlwiXHJcbn1cclxuXHJcbmV4cG9ydCBlbnVtIE1hc3Mge1xyXG4gICAgS2lsb2dyYW0gPSBcImtnXCJcclxufVxyXG5cclxuZXhwb3J0IGVudW0gQW5nbGUge1xyXG4gICAgRGVncmVlID0gXCLCsFwiLFxyXG4gICAgUmFkaWFuID0gXCJyYWRcIlxyXG59XHJcblxyXG5yZXZlcnNlRW51bShEaXN0YW5jZSk7XHJcbnJldmVyc2VFbnVtKFRpbWUpO1xyXG5yZXZlcnNlRW51bShGb3JjZSk7XHJcbnJldmVyc2VFbnVtKE1hc3MpO1xyXG5yZXZlcnNlRW51bShBbmdsZSk7XHJcblxyXG5leHBvcnQgdHlwZSBCYXNlVW5pdCA9IERpc3RhbmNlIHwgVGltZSB8IEZvcmNlIHwgTWFzcyB8IEFuZ2xlO1xyXG5cclxuZXhwb3J0IGNsYXNzIFVuaXQge1xyXG4gICAgcHVibGljIHN0YXRpYyBzY2FsYXIgPSBuZXcgVW5pdChbXSk7XHJcblxyXG4gICAgcHVibGljIG51bWVyYXRvcjogQmFzZVVuaXRbXTtcclxuICAgIHB1YmxpYyBkZW5vbWluYXRvcjogQmFzZVVuaXRbXTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihudW06IEJhc2VVbml0W10gfCBCYXNlVW5pdCwgZGVuPzogQmFzZVVuaXRbXSB8IEJhc2VVbml0KSB7XHJcbiAgICAgICAgdGhpcy5udW1lcmF0b3IgPSB0eXBlb2YgbnVtID09PSBcInN0cmluZ1wiID8gW251bV0gOiBudW0uc29ydCgpO1xyXG4gICAgICAgIHRoaXMuZGVub21pbmF0b3IgPSB0eXBlb2YgZGVuID09PSBcInN0cmluZ1wiID8gW2Rlbl0gOiAoZGVuID8gZGVuLnNvcnQoKSA6IFtdKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZXhwYW5kZWQoKSB7XHJcbiAgICAgICAgY29uc3QgW251bSwgZGVuXSA9IFtbLi4udGhpcy5udW1lcmF0b3JdLCBbLi4udGhpcy5kZW5vbWluYXRvcl1dO1xyXG5cclxuICAgICAgICBjb25zdCBleHBhbmQgPSAobjogQmFzZVVuaXRbXSwgZDogQmFzZVVuaXRbXSkgPT4ge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IHUgb2YgWy4uLm5dKSB7XHJcbiAgICAgICAgICAgICAgICBsZXQgbmkgPSBuLmluZGV4T2YodSk7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG5pID09PSAtMSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgc3dpdGNoICh1KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBGb3JjZS5OZXd0b246XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG4uc3BsaWNlKG5pLCAxLCBNYXNzLktpbG9ncmFtLCBEaXN0YW5jZS5NZXRlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGQucHVzaChUaW1lLlNlY29uZCwgVGltZS5TZWNvbmQpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGV4cGFuZChudW0sIGRlbik7XHJcbiAgICAgICAgZXhwYW5kKGRlbiwgbnVtKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBVbml0KG51bSwgZGVuKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgc2ltcGxpZmllZCgpIHtcclxuICAgICAgICBjb25zdCBbbnVtLCBkZW5dID0gW1suLi50aGlzLm51bWVyYXRvcl0sIFsuLi50aGlzLmRlbm9taW5hdG9yXV07XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgdSBvZiBbLi4ubnVtLCAuLi5kZW5dKSB7XHJcbiAgICAgICAgICAgIGxldCBuaSA9IG51bS5pbmRleE9mKHUpO1xyXG4gICAgICAgICAgICBsZXQgZGkgPSBkZW4uaW5kZXhPZih1KTtcclxuXHJcbiAgICAgICAgICAgIHdoaWxlIChuaSAhPT0gLTEgJiYgZGkgIT09IC0xKSB7XHJcbiAgICAgICAgICAgICAgICBudW0uc3BsaWNlKG5pLCAxKTtcclxuICAgICAgICAgICAgICAgIGRlbi5zcGxpY2UoZGksIDEpO1xyXG5cclxuICAgICAgICAgICAgICAgIG5pID0gbnVtLmluZGV4T2YodSk7XHJcbiAgICAgICAgICAgICAgICBkaSA9IGRlbi5pbmRleE9mKHUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBzaW1wbGlmeSA9IChuOiBCYXNlVW5pdFtdLCBkOiBCYXNlVW5pdFtdKSA9PiB7XHJcbiAgICAgICAgICAgIGxldCBmb3VuZCA9IGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgZG8ge1xyXG4gICAgICAgICAgICAgICAgZm91bmQgPSBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobi5pbmRleE9mKE1hc3MuS2lsb2dyYW0pICE9PSAtMSAmJlxyXG4gICAgICAgICAgICAgICAgICAgIG4uaW5kZXhPZihEaXN0YW5jZS5NZXRlcikgIT09IC0xICYmXHJcbiAgICAgICAgICAgICAgICAgICAgZC5pbmRleE9mKFRpbWUuU2Vjb25kKSAhPT0gLTEgJiZcclxuICAgICAgICAgICAgICAgICAgICBkLmluZGV4T2YoVGltZS5TZWNvbmQpICE9PSBkLmxhc3RJbmRleE9mKFRpbWUuU2Vjb25kKSkge1xyXG4gICAgICAgICAgICAgICAgICAgIG4uc3BsaWNlKG4uaW5kZXhPZihNYXNzLktpbG9ncmFtKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5zcGxpY2Uobi5pbmRleE9mKERpc3RhbmNlLk1ldGVyKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZC5zcGxpY2Uobi5pbmRleE9mKFRpbWUuU2Vjb25kKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgZC5zcGxpY2Uobi5pbmRleE9mKFRpbWUuU2Vjb25kKSwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgbi5wdXNoKEZvcmNlLk5ld3Rvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9IHdoaWxlIChmb3VuZCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgc2ltcGxpZnkobnVtLCBkZW4pO1xyXG4gICAgICAgIHNpbXBsaWZ5KGRlbiwgbnVtKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBVbml0KG51bSwgZGVuKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgbGV0IHN0ciA9IFwiXCI7XHJcblxyXG4gICAgICAgIGZvciAobGV0IG5pID0gMDsgbmkgPCB0aGlzLm51bWVyYXRvci5sZW5ndGg7IG5pKyspIHtcclxuICAgICAgICAgICAgaWYgKG5pID4gMCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubnVtZXJhdG9yW25pXSA9PT0gdGhpcy5udW1lcmF0b3JbbmkgLSAxXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN0ciArPSBcIsKyXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgc3RyICs9IFwiIMOXIFwiO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdHIgKz0gdGhpcy5udW1lcmF0b3JbbmldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChsZXQgZGkgPSAwOyBkaSA8IHRoaXMuZGVub21pbmF0b3IubGVuZ3RoOyBkaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChkaSA+IDAgJiYgdGhpcy5kZW5vbWluYXRvcltkaV0gPT09IHRoaXMuZGVub21pbmF0b3JbZGkgLSAxXSkge1xyXG4gICAgICAgICAgICAgICAgc3RyICs9IFwiwrJcIjtcclxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBzdHIgKz0gXCIgLyBcIjtcclxuICAgICAgICAgICAgc3RyICs9IHRoaXMuZGVub21pbmF0b3JbZGldO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIHN0cjtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdGltZXMob3RoZXI6IFVuaXQpIHsgcmV0dXJuIFVuaXQubXVsdCh0aGlzLCBvdGhlcik7IH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcihvdGhlcjogVW5pdCkgeyByZXR1cm4gVW5pdC5kaXYodGhpcywgb3RoZXIpOyB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBtdWx0KHUxOiBVbml0LCB1MjogVW5pdCkge1xyXG4gICAgICAgIHUxID0gdTEuZXhwYW5kZWQoKTtcclxuICAgICAgICB1MiA9IHUyLmV4cGFuZGVkKCk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgVW5pdChcclxuICAgICAgICAgICAgWy4uLnUxLm51bWVyYXRvciwgLi4udTIubnVtZXJhdG9yXSxcclxuICAgICAgICAgICAgWy4uLnUxLmRlbm9taW5hdG9yLCAuLi51Mi5kZW5vbWluYXRvcl0pXHJcbiAgICAgICAgICAgIC5zaW1wbGlmaWVkKCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyBkaXYodTE6IFVuaXQsIHUyOiBVbml0KSB7XHJcbiAgICAgICAgdTEgPSB1MS5leHBhbmRlZCgpO1xyXG4gICAgICAgIHUyID0gdTIuZXhwYW5kZWQoKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBVbml0KFxyXG4gICAgICAgICAgICBbLi4udTEubnVtZXJhdG9yLCAuLi51Mi5kZW5vbWluYXRvcl0sXHJcbiAgICAgICAgICAgIFsuLi51MS5kZW5vbWluYXRvciwgLi4udTIubnVtZXJhdG9yXSlcclxuICAgICAgICAgICAgLnNpbXBsaWZpZWQoKTtcclxuICAgIH1cclxuXHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgRm9yY2Uge1xyXG4gICAgZXhwb3J0IGNvbnN0IFBpeGVsTmV3dG9uID0gbmV3IFVuaXQoXHJcbiAgICAgICAgW01hc3MuS2lsb2dyYW0sIERpc3RhbmNlLlBpeGVsXSxcclxuICAgICAgICBbVGltZS5TZWNvbmQsIFRpbWUuU2Vjb25kXSk7XHJcbn1cclxuXHJcbmV4cG9ydCBuYW1lc3BhY2UgVmVsb2NpdHkge1xyXG4gICAgZXhwb3J0IGNvbnN0IFBpeGVsc1BlclN0ZXAgPSBuZXcgVW5pdChEaXN0YW5jZS5QaXhlbCwgVGltZS5TdGVwKTtcclxuICAgIGV4cG9ydCBjb25zdCBNZXRlcnNQZXJTZWNvbmQgPSBuZXcgVW5pdChEaXN0YW5jZS5NZXRlciwgVGltZS5TZWNvbmQpO1xyXG59XHJcblxyXG5leHBvcnQgbmFtZXNwYWNlIEFuZ3VsYXJWZWxvY2l0eSB7XHJcbiAgICBleHBvcnQgY29uc3QgRGVncmVlc1BlclN0ZXAgPSBuZXcgVW5pdChBbmdsZS5EZWdyZWUsIFRpbWUuU3RlcCk7XHJcbiAgICBleHBvcnQgY29uc3QgRGVncmVlc1BlclNlY29uZCA9IG5ldyBVbml0KEFuZ2xlLkRlZ3JlZSwgVGltZS5TZWNvbmQpO1xyXG4gICAgZXhwb3J0IGNvbnN0IFJhZGlhbnNQZXJTdGVwID0gbmV3IFVuaXQoQW5nbGUuUmFkaWFuLCBUaW1lLlN0ZXApO1xyXG4gICAgZXhwb3J0IGNvbnN0IFJhZGlhbnNQZXJTZWNvbmQgPSBuZXcgVW5pdChBbmdsZS5SYWRpYW4sIFRpbWUuU2Vjb25kKTtcclxufVxyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBNb21lbnR1bSB7XHJcbiAgICBleHBvcnQgY29uc3QgS2lsb2dyYW1NZXRlcnNQZXJTZWNvbmQgPSBuZXcgVW5pdChbTWFzcy5LaWxvZ3JhbSwgRGlzdGFuY2UuTWV0ZXJdLCBbVGltZS5TZWNvbmRdKTtcclxufVxyXG5cclxuZXhwb3J0IG5hbWVzcGFjZSBjb252ZXJ0IHtcclxuICAgIGV4cG9ydCBmdW5jdGlvbiBhbmdsZSh2YWx1ZTogbnVtYmVyLCBmcm9tOiBBbmdsZSwgdG86IEFuZ2xlKSB7XHJcbiAgICAgICAgaWYgKGZyb20gPT09IHRvKSByZXR1cm4gdmFsdWU7XHJcblxyXG4gICAgICAgIC8vIGJhc2UgdW5pdCBpcyByYWRpYW5zXHJcblxyXG4gICAgICAgIHN3aXRjaCAoZnJvbSkge1xyXG4gICAgICAgICAgICBjYXNlIEFuZ2xlLkRlZ3JlZTpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyAxODAgKiBQSTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgc3dpdGNoICh0bykge1xyXG4gICAgICAgICAgICBjYXNlIEFuZ2xlLkRlZ3JlZTpcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAqIDE4MCAvIFBJO1xyXG4gICAgICAgICAgICBjYXNlIEFuZ2xlLlJhZGlhbjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIGRpc3RhbmNlKHZhbHVlOiBudW1iZXIsIGZyb206IERpc3RhbmNlLCB0bzogRGlzdGFuY2UpIHtcclxuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHJldHVybiB2YWx1ZTtcclxuXHJcbiAgICAgICAgLy8gYmFzZSB1bml0IGlzIG1ldGVyc1xyXG5cclxuICAgICAgICBzd2l0Y2ggKGZyb20pIHtcclxuICAgICAgICAgICAgY2FzZSBEaXN0YW5jZS5QaXhlbDpcclxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgLyAxMDA7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHN3aXRjaCAodG8pIHtcclxuICAgICAgICAgICAgY2FzZSBEaXN0YW5jZS5QaXhlbDpcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZSAqIDEwMDtcclxuICAgICAgICAgICAgY2FzZSBEaXN0YW5jZS5NZXRlcjpcclxuICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHRpbWUodmFsdWU6IG51bWJlciwgZnJvbTogVGltZSwgdG86IFRpbWUpIHtcclxuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHJldHVybiB2YWx1ZTtcclxuXHJcbiAgICAgICAgLy8gYmFzZSB1bml0IGlzIHNlY29uZHNcclxuXHJcbiAgICAgICAgc3dpdGNoIChmcm9tKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVGltZS5TdGVwOlxyXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSAvIDYwO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzd2l0Y2ggKHRvKSB7XHJcbiAgICAgICAgICAgIGNhc2UgVGltZS5TdGVwOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlICogNjA7XHJcbiAgICAgICAgICAgIGNhc2UgVGltZS5TZWNvbmQ6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGV4cG9ydCBmdW5jdGlvbiBhdXRvPFQgZXh0ZW5kcyBCYXNlVW5pdD4odmFsdWU6IG51bWJlciwgZnJvbTogVCwgdG86IFQpIHtcclxuICAgICAgICBpZiAoIXBvc3NpYmxlKGZyb20sIHRvKSkgdGhyb3cgbmV3IEVycm9yKGBJbmNvbXBhdGlibGUgdW5pdHM6ICR7ZnJvbX0sICR7dG99YCk7XHJcblxyXG4gICAgICAgIGlmIChmcm9tID09PSB0bykgcmV0dXJuIHZhbHVlO1xyXG5cclxuICAgICAgICBpZiAoZnJvbSBpbiBBbmdsZSkgcmV0dXJuIGFuZ2xlKHZhbHVlLCBmcm9tIGFzIEFuZ2xlLCB0byBhcyBBbmdsZSk7XHJcbiAgICAgICAgaWYgKGZyb20gaW4gRGlzdGFuY2UpIHJldHVybiBkaXN0YW5jZSh2YWx1ZSwgZnJvbSBhcyBEaXN0YW5jZSwgdG8gYXMgRGlzdGFuY2UpO1xyXG4gICAgICAgIGlmIChmcm9tIGluIFRpbWUpIHJldHVybiB0aW1lKHZhbHVlLCBmcm9tIGFzIFRpbWUsIHRvIGFzIFRpbWUpO1xyXG5cclxuICAgICAgICByZXR1cm4gdmFsdWU7XHJcbiAgICB9XHJcblxyXG4gICAgZXhwb3J0IGZ1bmN0aW9uIHBvc3NpYmxlPFQgZXh0ZW5kcyBCYXNlVW5pdD4oZnJvbTogVCwgdG86IFQpIHtcclxuICAgICAgICBpZiAoZnJvbSA9PT0gdG8pIHJldHVybiB0cnVlO1xyXG4gICAgICAgIGlmIChmcm9tIGluIEFuZ2xlICYmIHRvIGluIEFuZ2xlKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICBpZiAoZnJvbSBpbiBEaXN0YW5jZSAmJiB0byBpbiBEaXN0YW5jZSkgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgaWYgKGZyb20gaW4gVGltZSAmJiB0byBpbiBUaW1lKSByZXR1cm4gdHJ1ZTtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBNZWFzdXJlbWVudCBpbXBsZW1lbnRzIE51bWJlciB7XHJcbiAgICBwdWJsaWMgdmFsdWU6IG51bWJlcjtcclxuICAgIHB1YmxpYyB1bml0OiBVbml0O1xyXG5cclxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1zaGFkb3dlZC12YXJpYWJsZVxyXG4gICAgY29uc3RydWN0b3IodmFsdWU6IG51bWJlciwgdW5pdDogVW5pdCB8IEJhc2VVbml0KSB7XHJcbiAgICAgICAgdGhpcy52YWx1ZSA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMudW5pdCA9IHVuaXQgaW5zdGFuY2VvZiBVbml0ID8gdW5pdCA6IG5ldyBVbml0KFt1bml0XSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvU3RyaW5nKHJhZGl4PzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLXRlbXBsYXRlXHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMudmFsdWUudG9TdHJpbmcocmFkaXgpfSAke3RoaXMudW5pdH1gO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b0ZpeGVkKGZyYWN0aW9uRGlnaXRzPzogbnVtYmVyKTogc3RyaW5nIHtcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLXRlbXBsYXRlXHJcbiAgICAgICAgcmV0dXJuIGAke3RoaXMudmFsdWUudG9GaXhlZChmcmFjdGlvbkRpZ2l0cyl9ICR7dGhpcy51bml0fWA7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvRXhwb25lbnRpYWwoZnJhY3Rpb25EaWdpdHM/OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItdGVtcGxhdGVcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy52YWx1ZS50b0V4cG9uZW50aWFsKGZyYWN0aW9uRGlnaXRzKX0gJHt0aGlzLnVuaXR9YDtcclxuICAgIH1cclxuXHJcbiAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tc2hhZG93ZWQtdmFyaWFibGVcclxuICAgIHB1YmxpYyB0b1ByZWNpc2lvbihwcmVjaXNpb24/OiBudW1iZXIpOiBzdHJpbmcge1xyXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItdGVtcGxhdGVcclxuICAgICAgICByZXR1cm4gYCR7dGhpcy52YWx1ZS50b1ByZWNpc2lvbihwcmVjaXNpb24pfSAke3RoaXMudW5pdH1gO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB2YWx1ZU9mKCk6IG51bWJlciB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICB9XHJcbiAgICBwdWJsaWMgdG9Mb2NhbGVTdHJpbmcobG9jYWxlcz86IHN0cmluZyB8IHN0cmluZ1tdLCBvcHRpb25zPzogSW50bC5OdW1iZXJGb3JtYXRPcHRpb25zKTogc3RyaW5nIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJNZXRob2Qgbm90IGltcGxlbWVudGVkLlwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdGltZXMobTogU2NhbGFyKSB7XHJcbiAgICAgICAgaWYgKHR5cGVvZiBtID09PSBcIm51bWJlclwiKVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IE1lYXN1cmVtZW50KHRoaXMudmFsdWUgKiBtLCB0aGlzLnVuaXQpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IE1lYXN1cmVtZW50KHRoaXMudmFsdWUgKiBtLnZhbHVlLCBVbml0Lm11bHQodGhpcy51bml0LCBtLnVuaXQpKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgb3ZlcihtOiBTY2FsYXIpIHtcclxuICAgICAgICBpZiAodHlwZW9mIG0gPT09IFwibnVtYmVyXCIpXHJcbiAgICAgICAgICAgIHJldHVybiBuZXcgTWVhc3VyZW1lbnQodGhpcy52YWx1ZSAqIG0sIHRoaXMudW5pdCk7XHJcblxyXG4gICAgICAgIHJldHVybiBuZXcgTWVhc3VyZW1lbnQodGhpcy52YWx1ZSAvIG0udmFsdWUsIFVuaXQuZGl2KHRoaXMudW5pdCwgbS51bml0KSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHRvKHRhcmdldDogVW5pdCk6IE1lYXN1cmVtZW50O1xyXG4gICAgcHVibGljIHRvKG51bWVyYXRvcjogQmFzZVVuaXQsIGRlbm9taW5hdG9yPzogQmFzZVVuaXQpOiBNZWFzdXJlbWVudDtcclxuICAgIHB1YmxpYyB0byh0YXJnZXQ6IFVuaXQgfCBCYXNlVW5pdCwgZGVub21pbmF0b3I/OiBCYXNlVW5pdCkge1xyXG4gICAgICAgIGxldCB2YWwgPSB0aGlzLnZhbHVlO1xyXG4gICAgICAgIGNvbnN0IHVuaXQgPSB0aGlzLnVuaXQuZXhwYW5kZWQoKTtcclxuICAgICAgICBjb25zdCBudW0gPSBbLi4udW5pdC5udW1lcmF0b3JdO1xyXG4gICAgICAgIGNvbnN0IGRlbiA9IFsuLi51bml0LmRlbm9taW5hdG9yXTtcclxuXHJcblxyXG4gICAgICAgIGlmICghKHRhcmdldCBpbnN0YW5jZW9mIFVuaXQpKSB0YXJnZXQgPSBuZXcgVW5pdCh0YXJnZXQsIGRlbm9taW5hdG9yKTtcclxuXHJcbiAgICAgICAgY29uc3QgdGFyZ2V0RXhwYW5kZWQgPSB0YXJnZXQuZXhwYW5kZWQoKTtcclxuICAgICAgICBjb25zdCB0YXJnZXROdW0gPSBbLi4udGFyZ2V0RXhwYW5kZWQubnVtZXJhdG9yXTtcclxuICAgICAgICBjb25zdCB0YXJnZXREZW4gPSBbLi4udGFyZ2V0RXhwYW5kZWQuZGVub21pbmF0b3JdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG51bVVuaXQgb2YgbnVtKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGkgPSB0YXJnZXROdW0uZmluZEluZGV4KG4gPT4gY29udmVydC5wb3NzaWJsZShuLCBudW1Vbml0KSk7XHJcbiAgICAgICAgICAgIGNvbnN0IFt0YXJnZXROdW1Vbml0XSA9IHRhcmdldE51bS5zcGxpY2UoaSwgMSk7XHJcblxyXG4gICAgICAgICAgICB2YWwgPSBjb252ZXJ0LmF1dG8odmFsLCBudW1Vbml0LCB0YXJnZXROdW1Vbml0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgZGVuVW5pdCBvZiBkZW4pIHtcclxuICAgICAgICAgICAgY29uc3QgaSA9IHRhcmdldERlbi5maW5kSW5kZXgoZCA9PiBjb252ZXJ0LnBvc3NpYmxlKGQsIGRlblVuaXQpKTtcclxuICAgICAgICAgICAgY29uc3QgW3RhcmdldERlblVuaXRdID0gdGFyZ2V0RGVuLnNwbGljZShpLCAxKTtcclxuXHJcbiAgICAgICAgICAgIHZhbCA9IDEgLyBjb252ZXJ0LmF1dG8oMSAvIHZhbCwgZGVuVW5pdCwgdGFyZ2V0RGVuVW5pdCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IE1lYXN1cmVtZW50KHZhbCwgdGFyZ2V0KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZlY3Rvck1lYXN1cmVtZW50IGV4dGVuZHMgVmVjdG9yIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IHplcm8oKSB7IHJldHVybiBuZXcgVmVjdG9yTWVhc3VyZW1lbnQoMCwgMCwgVW5pdC5zY2FsYXIpOyB9XHJcbiAgICBwdWJsaWMgdW5pdDogVW5pdDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoeDogVmVjdG9yTGlrZSwgdTogVW5pdCB8IEJhc2VVbml0KTtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih4OiBudW1iZXIsIHk6IG51bWJlciwgdTogVW5pdCB8IEJhc2VVbml0KTtcclxuICAgIHB1YmxpYyBjb25zdHJ1Y3Rvcih4OiBudW1iZXIgfCBWZWN0b3JMaWtlLCB5OiBudW1iZXIgfCBVbml0IHwgQmFzZVVuaXQsIHU/OiBVbml0IHwgQmFzZVVuaXQpIHtcclxuICAgICAgICBpZiAodSkge1xyXG4gICAgICAgICAgICBzdXBlcih4IGFzIG51bWJlciwgeSBhcyBudW1iZXIpO1xyXG4gICAgICAgICAgICB0aGlzLnVuaXQgPSB1IGluc3RhbmNlb2YgVW5pdCA/IHUgOiBuZXcgVW5pdCh1KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICBzdXBlcih4IGFzIFZlY3Rvcik7XHJcbiAgICAgICAgICAgIHRoaXMudW5pdCA9IHkgaW5zdGFuY2VvZiBVbml0ID8geSA6IG5ldyBVbml0KHkgYXMgQmFzZVVuaXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7XHJcbiAgICAgICAgcmV0dXJuIGDin6gke3RoaXMueH0sICR7dGhpcy55feKfqSAke3RoaXMudW5pdH1gO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB0b0ZpeGVkKHA/OiBudW1iZXIpIHtcclxuICAgICAgICByZXR1cm4gZml4ZWQocCkgYOKfqCR7dGhpcy54fSwgJHt0aGlzLnl94p+pIGAgKyB0aGlzLnVuaXQudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9QcmVjaXNpb24ocD86IG51bWJlcikge1xyXG4gICAgICAgIHJldHVybiBwcmVjaXNpb24ocCkgYOKfqCR7dGhpcy54fSwgJHt0aGlzLnl94p+pIGAgKyB0aGlzLnVuaXQudG9TdHJpbmcoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG9FeHBvbmVudGlhbChwPzogbnVtYmVyKSB7XHJcbiAgICAgICAgcmV0dXJuIGDin6gke3RoaXMueC50b0V4cG9uZW50aWFsKHApfSwgJHt0aGlzLnkudG9FeHBvbmVudGlhbChwKX3in6kgJHt0aGlzLnVuaXR9YDtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdG8odGFyZ2V0OiBVbml0KTogVmVjdG9yTWVhc3VyZW1lbnQ7XHJcbiAgICBwdWJsaWMgdG8obnVtZXJhdG9yOiBCYXNlVW5pdCwgZGVub21pbmF0b3I/OiBCYXNlVW5pdCk6IFZlY3Rvck1lYXN1cmVtZW50O1xyXG4gICAgcHVibGljIHRvKHRhcmdldDogVW5pdCB8IEJhc2VVbml0LCBkZW5vbWluYXRvcj86IEJhc2VVbml0KSB7XHJcbiAgICAgICAgbGV0IHVuaXQ6IFVuaXQ7XHJcblxyXG4gICAgICAgIGlmICh0YXJnZXQgaW5zdGFuY2VvZiBVbml0KSB1bml0ID0gdGFyZ2V0O1xyXG4gICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICBpZiAoZGVub21pbmF0b3IpXHJcbiAgICAgICAgICAgICAgICB1bml0ID0gbmV3IFVuaXQoW3RhcmdldF0sIFtkZW5vbWluYXRvcl0pO1xyXG4gICAgICAgICAgICBlbHNlXHJcbiAgICAgICAgICAgICAgICB1bml0ID0gbmV3IFVuaXQoW3RhcmdldF0pO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgeG0gPSBuZXcgTWVhc3VyZW1lbnQodGhpcy54LCB0aGlzLnVuaXQpLnRvKHVuaXQpO1xyXG4gICAgICAgIGNvbnN0IHltID0gbmV3IE1lYXN1cmVtZW50KHRoaXMueSwgdGhpcy51bml0KS50byh1bml0KTtcclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3JNZWFzdXJlbWVudCh4bS52YWx1ZSwgeW0udmFsdWUsIHVuaXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBtYWduaXR1ZGUoKSB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBNZWFzdXJlbWVudChzdXBlci5sZW5ndGgoKSwgdGhpcy51bml0KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdGltZXModjogTnVtZXJpYyB8IFZlY3Rvckxpa2UpIHtcclxuICAgICAgICBpZiAodiBpbnN0YW5jZW9mIE1lYXN1cmVtZW50KVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZlY3Rvck1lYXN1cmVtZW50KHN1cGVyLnRpbWVzKHYudmFsdWUpLCB0aGlzLnVuaXQudGltZXModi51bml0KSk7XHJcbiAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBWZWN0b3JNZWFzdXJlbWVudClcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3JNZWFzdXJlbWVudChzdXBlci50aW1lcyh2KSwgdGhpcy51bml0LnRpbWVzKHYudW5pdCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvck1lYXN1cmVtZW50KHN1cGVyLnRpbWVzKHYpLCB0aGlzLnVuaXQpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBvdmVyKHY6IE51bWVyaWMgfCBWZWN0b3JMaWtlKSB7XHJcbiAgICAgICAgaWYgKHYgaW5zdGFuY2VvZiBNZWFzdXJlbWVudClcclxuICAgICAgICAgICAgcmV0dXJuIG5ldyBWZWN0b3JNZWFzdXJlbWVudChzdXBlci5vdmVyKHYudmFsdWUpLCB0aGlzLnVuaXQub3Zlcih2LnVuaXQpKTtcclxuICAgICAgICBpZiAodiBpbnN0YW5jZW9mIFZlY3Rvck1lYXN1cmVtZW50KVxyXG4gICAgICAgICAgICByZXR1cm4gbmV3IFZlY3Rvck1lYXN1cmVtZW50KHN1cGVyLm92ZXIodiksIHRoaXMudW5pdC5vdmVyKHYudW5pdCkpO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvck1lYXN1cmVtZW50KHN1cGVyLm92ZXIodiksIHRoaXMudW5pdCk7XHJcbiAgICB9XHJcbn0iLCJpbXBvcnQgeyBUaWxlRGF0YSwgVGlsZVR5cGUgfSBmcm9tIFwiQGxpYi9sZXZlbFwiO1xyXG5pbXBvcnQgeyBBbmd1bGFyVmVsb2NpdHksIE1lYXN1cmVtZW50LCBWZWN0b3JNZWFzdXJlbWVudCwgVmVsb2NpdHkgfSBmcm9tIFwiQHV0aWwvbWVhc3VyZW1lbnRcIjtcclxuXHJcbmNvbnN0IHBoYXNlciA9IHJlcXVpcmUoXCJwaGFzZXJcIik7XHJcblxyXG5leHBvcnQgY29uc3QgVGlsZVN0YXRzID0ge1xyXG4gICAgW1RpbGVUeXBlLldvb2RdOiB7XHJcbiAgICAgICAgZnJhbWU6IDUsXHJcbiAgICAgICAgbWFzczogNzUsXHJcbiAgICB9LFxyXG4gICAgW1RpbGVUeXBlLlN0ZWVsXToge1xyXG4gICAgICAgIGZyYW1lOiA2LFxyXG4gICAgICAgIG1hc3M6IDEyMFxyXG4gICAgfSxcclxuICAgIFtUaWxlVHlwZS5BbHVtaW51bV06IHtcclxuICAgICAgICBmcmFtZTogNyxcclxuICAgICAgICBtYXNzOiAxMDBcclxuICAgIH0sXHJcbiAgICBbVGlsZVR5cGUuU3R5cm9mb2FtXToge1xyXG4gICAgICAgIGZyYW1lOiA5LFxyXG4gICAgICAgIG1hc3M6IDIwXHJcbiAgICB9XHJcbn07XHJcblxyXG5leHBvcnQgY2xhc3MgVGlsZSBleHRlbmRzIFBoYXNlci5HYW1lT2JqZWN0cy5TcHJpdGUge1xyXG5cclxuICAgIHB1YmxpYyB0aWxlVHlwZTogVGlsZVR5cGU7XHJcbiAgICBwdWJsaWMgYWxsb3dDb250cm9sOiBib29sZWFuO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNjZW5lOiBQaGFzZXIuU2NlbmUsIGNvbmZpZzogVGlsZURhdGEpIHtcclxuICAgICAgICBjb25zdCB7IGZyYW1lLCBtYXNzIH0gPSBUaWxlU3RhdHNbY29uZmlnLnR5cGVdO1xyXG5cclxuICAgICAgICBzdXBlcihzY2VuZSxcclxuICAgICAgICAgICAgY29uZmlnID8gY29uZmlnLnggKiAzMiB8fCAwIDogMCxcclxuICAgICAgICAgICAgY29uZmlnID8gY29uZmlnLnkgKiAzMiB8fCAwIDogMCxcclxuICAgICAgICAgICAgXCJzcHJpdGVzXCIsIGZyYW1lKTtcclxuXHJcbiAgICAgICAgY29uc3QgbWF0dGVyT2JqID0gc2NlbmUubWF0dGVyLmFkZC5nYW1lT2JqZWN0KHRoaXMsIHtcclxuICAgICAgICAgICAgY2hhbWZlcjogeyByYWRpdXM6IDE2IH0sXHJcbiAgICAgICAgICAgIG1hc3MsXHJcbiAgICAgICAgICAgIGluZXJ0aWE6ICFjb25maWcucm90YXRpb24gPyBJbmZpbml0eSA6IHVuZGVmaW5lZCxcclxuICAgICAgICAgICAgZnJpY3Rpb246IGNvbmZpZy5mcmljdGlvbiB8fCAwLFxyXG4gICAgICAgICAgICBmcmljdGlvbkFpcjogMCwgLy8gbm8gZnJpY3Rpb247IHRoZXNlIGFyZSBwaHlzaWNzIHByb2JsZW1zXHJcbiAgICAgICAgICAgIGZyaWN0aW9uU3RhdGljOiAwLFxyXG4gICAgICAgICAgICByZXN0aXR1dGlvbjogY29uZmlnLmVsYXN0aWMgPyAxIDogMFxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBpZiAoY29uZmlnLnZlbG9jaXR5KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgeCwgeSB9ID0gbmV3IFZlY3Rvck1lYXN1cmVtZW50KGNvbmZpZy52ZWxvY2l0eSwgVmVsb2NpdHkuTWV0ZXJzUGVyU2Vjb25kKS50byhWZWxvY2l0eS5QaXhlbHNQZXJTdGVwKTtcclxuICAgICAgICAgICAgKG1hdHRlck9iaiBhcyBhbnkpLnNldFZlbG9jaXR5KHgsIHkpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHR5cGVvZiBjb25maWcuYW5ndWxhclZlbG9jaXR5ID09PSBcIm51bWJlclwiKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHcgPSBuZXcgTWVhc3VyZW1lbnQoY29uZmlnLmFuZ3VsYXJWZWxvY2l0eSwgQW5ndWxhclZlbG9jaXR5LlJhZGlhbnNQZXJTZWNvbmQpLnRvKEFuZ3VsYXJWZWxvY2l0eS5EZWdyZWVzUGVyU3RlcCk7XHJcbiAgICAgICAgICAgIChtYXR0ZXJPYmogYXMgYW55KS5zZXRBbmd1bGFyVmVsb2NpdHkody52YWx1ZSk7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIG1hdHRlck9iai50eXBlID0gXCJ0aWxlXCI7XHJcbiAgICAgICAgbWF0dGVyT2JqLnNldEludGVyYWN0aXZlKCk7XHJcblxyXG4gICAgICAgIHRoaXMudGlsZVR5cGUgPSBjb25maWcudHlwZTtcclxuICAgICAgICB0aGlzLmFsbG93Q29udHJvbCA9IHR5cGVvZiBjb25maWcuY29udHJvbCA9PT0gXCJib29sZWFuXCIgPyBjb25maWcuY29udHJvbCA6IGZhbHNlO1xyXG4gICAgfVxyXG59IiwiZXhwb3J0IG5hbWVzcGFjZSBUZXh0IHtcclxuICAgIGV4cG9ydCBjb25zdCBGb250ID0ge1xyXG4gICAgICAgIE5vcm1hbDogXCJDbGVhciBTYW5zXCIsXHJcbiAgICAgICAgRGlzcGxheTogXCJNb250c2VycmF0XCJcclxuICAgIH07XHJcblxyXG4gICAgZXhwb3J0IGNvbnN0IEhlYWRlciA9IHtcclxuICAgICAgICBmb250RmFtaWx5OiBGb250LkRpc3BsYXksXHJcbiAgICAgICAgZm9udFN0eWxlOiBcImJvbGRcIixcclxuICAgICAgICBmb250U2l6ZTogMjQsXHJcbiAgICAgICAgZmlsbDogXCJibGFja1wiXHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBjb25zdCBEaXNwbGF5ID0ge1xyXG4gICAgICAgIExpZ2h0OiB7XHJcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IEZvbnQuRGlzcGxheSxcclxuICAgICAgICAgICAgZm9udFNpemU6IDE2LFxyXG4gICAgICAgICAgICBmaWxsOiBcImJsYWNrXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIERhcms6IHtcclxuICAgICAgICAgICAgZm9udEZhbWlseTogRm9udC5EaXNwbGF5LFxyXG4gICAgICAgICAgICBmb250U2l6ZTogMTYsXHJcbiAgICAgICAgICAgIGZpbGw6IFwid2hpdGVcIlxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBleHBvcnQgY29uc3QgTm9ybWFsID0ge1xyXG4gICAgICAgIExpZ2h0OiB7XHJcbiAgICAgICAgICAgIGZvbnRGYW1pbHk6IEZvbnQuTm9ybWFsLFxyXG4gICAgICAgICAgICBmb250U2l6ZTogMTYsXHJcbiAgICAgICAgICAgIGZpbGw6IFwiYmxhY2tcIlxyXG4gICAgICAgIH0sXHJcbiAgICAgICAgRGFyazoge1xyXG4gICAgICAgICAgICBmb250RmFtaWx5OiBGb250Lk5vcm1hbCxcclxuICAgICAgICAgICAgZm9udFNpemU6IDE2LFxyXG4gICAgICAgICAgICBmaWxsOiBcIndoaXRlXCJcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIGV4cG9ydCBjb25zdCBTbWFsbCA9IHtcclxuICAgICAgICBMaWdodDoge1xyXG4gICAgICAgICAgICBmb250RmFtaWx5OiBGb250Lk5vcm1hbCxcclxuICAgICAgICAgICAgZm9udFNpemU6IDEzLFxyXG4gICAgICAgICAgICBmaWxsOiBcImJsYWNrXCJcclxuICAgICAgICB9LFxyXG4gICAgICAgIERhcms6IHtcclxuICAgICAgICAgICAgZm9udEZhbWlseTogRm9udC5Ob3JtYWwsXHJcbiAgICAgICAgICAgIGZvbnRTaXplOiAxMyxcclxuICAgICAgICAgICAgZmlsbDogXCJ3aGl0ZVwiXHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxufSIsImltcG9ydCB7IEdvYWxEYXRhLCBPYmplY3RpdmVEYXRhLCBPYmplY3RpdmVUeXBlLCBUeXBlT2JqZWN0aXZlRGF0YSB9IGZyb20gXCJAbGliL2xldmVsXCI7XHJcbmltcG9ydCB7IFRpbGUsIFRpbGVTdGF0cyB9IGZyb20gXCJAc2NlbmUvbGV2ZWwvdGlsZVwiO1xyXG5pbXBvcnQgeyBmaW5kIH0gZnJvbSBcIkB1dGlsL2luZGV4LnRzXCI7XHJcbmltcG9ydCB7IGRpc3QsIFZlY3RvciwgVmVjdG9yTGlrZSB9IGZyb20gXCJAdXRpbC9tYXRoXCI7XHJcbmltcG9ydCB7IEFuZ3VsYXJWZWxvY2l0eSwgTWFzcywgTWVhc3VyZW1lbnQsIE1vbWVudHVtLCBVbml0LCBWZWN0b3JNZWFzdXJlbWVudCwgVmVsb2NpdHkgfSBmcm9tIFwiQHV0aWwvbWVhc3VyZW1lbnRcIjtcclxuXHJcbmltcG9ydCB7IFRleHQgfSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XHJcblxyXG5cclxuZXhwb3J0IGNsYXNzIEdvYWwgZXh0ZW5kcyBQaGFzZXIuR2FtZU9iamVjdHMuQ29udGFpbmVyIHtcclxuICAgIHB1YmxpYyBvYmplY3RpdmVzOiBPYmplY3RpdmVEYXRhW107XHJcblxyXG4gICAgcHJpdmF0ZSBfY29tcGxldGVkOiBib29sZWFuID0gZmFsc2U7XHJcblxyXG4gICAgcHJpdmF0ZSBiYWNrZ3JvdW5kOiBQaGFzZXIuR2FtZU9iamVjdHMuVGlsZVNwcml0ZTtcclxuICAgIHByaXZhdGUgdGlsZXM6IFRpbGVbXSA9IFtdO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNjZW5lOiBQaGFzZXIuU2NlbmUsIGNvbmZpZzogR29hbERhdGEpIHtcclxuICAgICAgICBzdXBlcihzY2VuZSk7XHJcblxyXG4gICAgICAgIHRoaXMub2JqZWN0aXZlcyA9IGNvbmZpZy5vYmplY3RpdmVzO1xyXG5cclxuICAgICAgICBsZXQgeyB4LCB5IH0gPSBWZWN0b3IubXVsdCh7IHg6IGNvbmZpZy54LCB5OiBjb25maWcueSB9LCAzMik7XHJcbiAgICAgICAgbGV0IHsgeDogd2lkdGgsIHk6IGhlaWdodCB9ID0gVmVjdG9yLm11bHQoeyB4OiBjb25maWcud2lkdGgsIHk6IGNvbmZpZy5oZWlnaHQgfSwgMzIpO1xyXG5cclxuICAgICAgICB0aGlzLnNldFBvc2l0aW9uKHgsIHkpO1xyXG5cclxuICAgICAgICB0aGlzLmJhY2tncm91bmQgPSBuZXcgUGhhc2VyLkdhbWVPYmplY3RzLlRpbGVTcHJpdGUoc2NlbmUsIDAsIDAsIHdpZHRoLCBoZWlnaHQsIFwic3ByaXRlc1wiLCAxMyk7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kLnRpbnQgPSAweEZGQUFBQTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGQodGhpcy5iYWNrZ3JvdW5kKTtcclxuXHJcbiAgICAgICAgY29uc3QgYm9yZGVyID0gc2NlbmUubWFrZS5ncmFwaGljcyh7fSwgZmFsc2UpXHJcbiAgICAgICAgICAgIC5saW5lU3R5bGUoMiwgMHgwMDAwMDAsIDAuNSlcclxuICAgICAgICAgICAgLmZpbGxTdHlsZSgweDAwMDAwMCwgMC4yNSlcclxuICAgICAgICAgICAgLnN0cm9rZVJlY3QoLXdpZHRoIC8gMiArIDQsIC1oZWlnaHQgLyAyICsgNCwgd2lkdGggLSA4LCBoZWlnaHQgLSA4KTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGQoYm9yZGVyKTtcclxuXHJcbiAgICAgICAgY29uc3QgdHlwZU9iamVjdGl2ZSA9IGZpbmQodGhpcy5vYmplY3RpdmVzLCBvID0+IG8udHlwZSA9PT0gT2JqZWN0aXZlVHlwZS5UeXBlKSBhcyBUeXBlT2JqZWN0aXZlRGF0YSB8IG51bGw7XHJcblxyXG4gICAgICAgIGlmICh0eXBlT2JqZWN0aXZlKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRpbGVJbWFnZSA9IHNjZW5lLm1ha2UuaW1hZ2Uoe1xyXG4gICAgICAgICAgICAgICAga2V5OiBcInNwcml0ZXNcIixcclxuICAgICAgICAgICAgICAgIGZyYW1lOiBUaWxlU3RhdHNbdHlwZU9iamVjdGl2ZS50YXJnZXRdLmZyYW1lLFxyXG4gICAgICAgICAgICAgICAgYWxwaGE6IDAuNVxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWRkKHRpbGVJbWFnZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBsaW5lcyA9IFtdO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG8gb2YgdGhpcy5vYmplY3RpdmVzKSB7XHJcbiAgICAgICAgICAgIGxldCB2YXJpYWJsZSA9IFwiXCI7XHJcbiAgICAgICAgICAgIGxldCB1bml0ID0gVW5pdC5zY2FsYXI7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKG8udHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBPYmplY3RpdmVUeXBlLlR5cGU6XHJcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE9iamVjdGl2ZVR5cGUuVmVsb2NpdHk6XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyaWFibGUgPSBcInZcIjtcclxuICAgICAgICAgICAgICAgICAgICB1bml0ID0gVmVsb2NpdHkuTWV0ZXJzUGVyU2Vjb25kO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBPYmplY3RpdmVUeXBlLk1vbWVudHVtOlxyXG4gICAgICAgICAgICAgICAgICAgIHZhcmlhYmxlID0gXCLPgVwiXHJcbiAgICAgICAgICAgICAgICAgICAgdW5pdCA9IE1vbWVudHVtLktpbG9ncmFtTWV0ZXJzUGVyU2Vjb25kO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBPYmplY3RpdmVUeXBlLkFuZ3VsYXJWZWxvY2l0eTpcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZSA9IFwiz4lcIlxyXG4gICAgICAgICAgICAgICAgICAgIHVuaXQgPSBBbmd1bGFyVmVsb2NpdHkuUmFkaWFuc1BlclNlY29uZDtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgaWYgKHR5cGVvZiBvLnRhcmdldCA9PT0gXCJudW1iZXJcIikgLy8gbnVtYmVyXHJcbiAgICAgICAgICAgICAgICBsaW5lcy5wdXNoKGAke3ZhcmlhYmxlfSA9ICR7bmV3IE1lYXN1cmVtZW50KG8udGFyZ2V0LCB1bml0KS50b1ByZWNpc2lvbigzKX1gKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoXCJ4XCIgaW4gby50YXJnZXQpIC8vIHZlY3RvclxyXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChgJHt2YXJpYWJsZX0gPSAke25ldyBWZWN0b3JNZWFzdXJlbWVudChvLnRhcmdldCwgdW5pdCkudG9QcmVjaXNpb24oMSl9YCk7XHJcbiAgICAgICAgICAgIGVsc2UgLy8gbWluIGFuZCBtYXhcclxuICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgbGV0IGxpbmUgPSB2YXJpYWJsZTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG8udGFyZ2V0Lm1heGltdW0gPT09IFwibnVtYmVyXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgbGluZSA9IGAke2xpbmV9IDwgJHtuZXcgTWVhc3VyZW1lbnQoby50YXJnZXQubWF4aW11bSwgdW5pdCkudG9QcmVjaXNpb24oMyl9YDtcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygby50YXJnZXQubWF4aW11bSA9PT0gXCJvYmplY3RcIilcclxuICAgICAgICAgICAgICAgICAgICBsaW5lID0gYCR7bGluZX0gPCAke25ldyBWZWN0b3JNZWFzdXJlbWVudChvLnRhcmdldC5tYXhpbXVtLCB1bml0KS50b1ByZWNpc2lvbigxKX1gO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygby50YXJnZXQubWluaW11bSA9PT0gXCJudW1iZXJcIilcclxuICAgICAgICAgICAgICAgICAgICBsaW5lID0gYCR7bmV3IE1lYXN1cmVtZW50KG8udGFyZ2V0Lm1pbmltdW0sIHVuaXQpLnRvUHJlY2lzaW9uKDMpfSA8ICR7bGluZX1gO1xyXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvLnRhcmdldC5taW5pbXVtID09PSBcIm9iamVjdFwiKVxyXG4gICAgICAgICAgICAgICAgICAgIGxpbmUgPSBgJHtuZXcgVmVjdG9yTWVhc3VyZW1lbnQoby50YXJnZXQubWluaW11bSwgdW5pdCkudG9QcmVjaXNpb24oMSl9IDwgJHtsaW5lfWA7XHJcblxyXG4gICAgICAgICAgICAgICAgbGluZXMucHVzaChsaW5lKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgY29uc3QgZGVzY3JpcHRpb24gPSBzY2VuZS5tYWtlLnRleHQoe1xyXG4gICAgICAgICAgICBzdHlsZToge1xyXG4gICAgICAgICAgICAgICAgYWxpZ246IFwiY2VudGVyXCIsXHJcbiAgICAgICAgICAgICAgICAuLi5UZXh0LkhlYWRlclxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBhbHBoYTogMC43LFxyXG4gICAgICAgICAgICBvcmlnaW46IDAuNSxcclxuICAgICAgICAgICAgdGV4dDogbGluZXMuam9pbihcIlxcblwiKVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBkZXNjcmlwdGlvbi5zZXRTY2FsZShNYXRoLm1pbigxLCAod2lkdGggLSAzMikgLyBkZXNjcmlwdGlvbi53aWR0aCkpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZChkZXNjcmlwdGlvbik7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvZHkgPSBzY2VuZS5tYXR0ZXIuYWRkLmdhbWVPYmplY3QodGhpcywge1xyXG4gICAgICAgICAgICBpc1N0YXRpYzogdHJ1ZSxcclxuICAgICAgICAgICAgaXNTZW5zb3I6IHRydWUsXHJcbiAgICAgICAgICAgIHNoYXBlOiB7XHJcbiAgICAgICAgICAgICAgICB0eXBlOiBcInJlY3RhbmdsZVwiLFxyXG4gICAgICAgICAgICAgICAgd2lkdGgsXHJcbiAgICAgICAgICAgICAgICBoZWlnaHRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBjb25zdCB3b3JsZCA9IChib2R5IGFzIGFueSkud29ybGQgYXMgUGhhc2VyLlBoeXNpY3MuTWF0dGVyLldvcmxkO1xyXG5cclxuICAgICAgICB3b3JsZC5vbihcImNvbGxpc2lvbnN0YXJ0XCIsIHRoaXMuY29sbGlzaW9uc3RhcnQsIHRoaXMpO1xyXG4gICAgICAgIHdvcmxkLm9uKFwiY29sbGlzaW9uYWN0aXZlXCIsIHRoaXMuY29sbGlzaW9uYWN0aXZlLCB0aGlzKTtcclxuICAgICAgICB3b3JsZC5vbihcImFmdGVydXBkYXRlXCIsIHRoaXMuYWZ0ZXJ1cGRhdGUsIHRoaXMpO1xyXG4gICAgICAgIHdvcmxkLm9uKFwiY29sbGlzaW9uZW5kXCIsIHRoaXMuY29sbGlzaW9uZW5kLCB0aGlzKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvbXBsZXRlZCgpIHsgcmV0dXJuIHRoaXMuX2NvbXBsZXRlZDsgfVxyXG4gICAgcHVibGljIHNldCBjb21wbGV0ZWQodmFsdWUpIHtcclxuICAgICAgICBjb25zdCBvbGQgPSB0aGlzLl9jb21wbGV0ZWQ7XHJcblxyXG4gICAgICAgIHRoaXMuX2NvbXBsZXRlZCA9IHZhbHVlO1xyXG4gICAgICAgIHRoaXMuYmFja2dyb3VuZC50aW50ID0gdmFsdWUgPyAweEFBRkZBQSA6IDB4RkZBQUFBO1xyXG5cclxuICAgICAgICBpZiAob2xkICE9PSB2YWx1ZSlcclxuICAgICAgICAgICAgdGhpcy5lbWl0KFwidXBkYXRlOmNvbXBsZXRlZFwiLCB2YWx1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1lZXRzT2JqZWN0aXZlcyh0aWxlOiBUaWxlKSB7XHJcbiAgICAgICAgY29uc3QgYm9keSA9IHRpbGUuYm9keSBhcyBNYXR0ZXIuQm9keTtcclxuICAgICAgICBjb25zdCBib3VuZHMgPSAodGhpcy5ib2R5IGFzIE1hdHRlci5Cb2R5KS5ib3VuZHMgYXMgeyBtaW46IFZlY3Rvckxpa2UsIG1heDogVmVjdG9yTGlrZSB9O1xyXG4gICAgICAgIGNvbnN0IGVwc2lsb24gPSAxMDsgLy8gdGhlc2UgYXJlIHBpeGVscywgc28gzrUgPSAxIGlzIGZpbmVcclxuICAgICAgICBjb25zdCB3aXRoaW4gPSBib2R5LnZlcnRpY2VzLmV2ZXJ5KHYgPT5cclxuICAgICAgICAgICAgdi54IDw9IGJvdW5kcy5tYXgueCArIGVwc2lsb24gJiYgYm91bmRzLm1pbi54IDw9IHYueCArIGVwc2lsb24gJiZcclxuICAgICAgICAgICAgdi55IDw9IGJvdW5kcy5tYXgueSArIGVwc2lsb24gJiYgYm91bmRzLm1pbi55IDw9IHYueSArIGVwc2lsb24pO1xyXG5cclxuICAgICAgICByZXR1cm4gd2l0aGluICYmIHRoaXMub2JqZWN0aXZlcy5ldmVyeShvID0+IHtcclxuICAgICAgICAgICAgbGV0IHF1YW50aXR5OiBWZWN0b3IgfCBudW1iZXI7XHJcblxyXG4gICAgICAgICAgICBzd2l0Y2ggKG8udHlwZSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSBPYmplY3RpdmVUeXBlLlR5cGU6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG8udGFyZ2V0ID09PSB0aWxlLnRpbGVUeXBlO1xyXG4gICAgICAgICAgICAgICAgY2FzZSBPYmplY3RpdmVUeXBlLlZlbG9jaXR5OlxyXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXR5ID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IFZlY3Rvck1lYXN1cmVtZW50KGJvZHkudmVsb2NpdHksIFZlbG9jaXR5LlBpeGVsc1BlclN0ZXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG8oVmVsb2NpdHkuTWV0ZXJzUGVyU2Vjb25kKTtcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgIGNhc2UgT2JqZWN0aXZlVHlwZS5Nb21lbnR1bTpcclxuICAgICAgICAgICAgICAgICAgICBxdWFudGl0eSA9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3JNZWFzdXJlbWVudChib2R5LnZlbG9jaXR5LCBWZWxvY2l0eS5QaXhlbHNQZXJTdGVwKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRvKFZlbG9jaXR5Lk1ldGVyc1BlclNlY29uZClcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC50aW1lcyhuZXcgTWVhc3VyZW1lbnQoYm9keS5tYXNzLCBNYXNzLktpbG9ncmFtKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlIE9iamVjdGl2ZVR5cGUuQW5ndWxhclZlbG9jaXR5OlxyXG4gICAgICAgICAgICAgICAgICAgIHF1YW50aXR5ID1cclxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3IE1lYXN1cmVtZW50KGJvZHkuYW5ndWxhclZlbG9jaXR5LCBBbmd1bGFyVmVsb2NpdHkuRGVncmVlc1BlclN0ZXApXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudG8oQW5ndWxhclZlbG9jaXR5LlJhZGlhbnNQZXJTZWNvbmQpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudmFsdWVPZigpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0eXBlb2Ygby50YXJnZXQgPT09IFwibnVtYmVyXCIgfHwgXCJ4XCIgaW4gby50YXJnZXQpIHtcclxuICAgICAgICAgICAgICAgIHJldHVybiBkaXN0KHF1YW50aXR5LCBvLnRhcmdldCkgPCAwLjA1O1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgLy8gbWluIGFuZCBtYXhcclxuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgcXVhbnRpdHkgPT09IFwib2JqZWN0XCIpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG8udGFyZ2V0Lm1heGltdW0gIT09IFwidW5kZWZpbmVkXCIpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChWZWN0b3IubHQoby50YXJnZXQubWF4aW11bSwgcXVhbnRpdHkpKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygby50YXJnZXQubWluaW11bSAhPT0gXCJ1bmRlZmluZWRcIilcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKFZlY3Rvci5ndChvLnRhcmdldC5taW5pbXVtLCBxdWFudGl0eSkpIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvLnRhcmdldC5tYXhpbXVtID09PSBcIm51bWJlclwiICYmIG8udGFyZ2V0Lm1heGltdW0gPCBxdWFudGl0eSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG8udGFyZ2V0Lm1heGltdW0gPT09IFwib2JqZWN0XCIgJiYgVmVjdG9yLmxlbihvLnRhcmdldC5tYXhpbXVtKSA8IHF1YW50aXR5KVxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2Ygby50YXJnZXQubWluaW11bSA9PT0gXCJudW1iZXJcIiAmJiBvLnRhcmdldC5taW5pbXVtID4gcXVhbnRpdHkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBvLnRhcmdldC5taW5pbXVtID09PSBcIm9iamVjdFwiICYmIFZlY3Rvci5sZW4oby50YXJnZXQubWluaW11bSkgPiBxdWFudGl0eSlcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbGxpc2lvbnN0YXJ0KGV2ZW50OiBNYXR0ZXIuSUV2ZW50Q29sbGlzaW9uPFBoYXNlci5QaHlzaWNzLk1hdHRlci5Xb3JsZD4pIHtcclxuICAgICAgICBpZiAodGhpcy5jb21wbGV0ZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBwYWlyIG9mIGV2ZW50LnBhaXJzKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHsgYm9keUE6IGEsIGJvZHlCOiBiIH0gPSBwYWlyO1xyXG4gICAgICAgICAgICBpZiAoYSAhPT0gdGhpcy5ib2R5ICYmIGIgIT09IHRoaXMuYm9keSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0aWxlID0gKGIgPT09IHRoaXMuYm9keSA/IGEgOiBiIGFzIGFueSkuZ2FtZU9iamVjdDtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aWxlIGluc3RhbmNlb2YgVGlsZSkge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMubWVldHNPYmplY3RpdmVzKHRpbGUpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbGVzLnB1c2godGlsZSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJodWghISFcIik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBjb2xsaXNpb25hY3RpdmUoZXZlbnQ6IE1hdHRlci5JRXZlbnRDb2xsaXNpb248UGhhc2VyLlBoeXNpY3MuTWF0dGVyLldvcmxkPikge1xyXG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBldmVudC5wYWlycykge1xyXG4gICAgICAgICAgICBjb25zdCB7IGJvZHlBOiBhLCBib2R5QjogYiB9ID0gcGFpcjtcclxuXHJcbiAgICAgICAgICAgIGlmIChhICE9PSB0aGlzLmJvZHkgJiYgYiAhPT0gdGhpcy5ib2R5KSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSAoYiA9PT0gdGhpcy5ib2R5ID8gYSA6IGIgYXMgYW55KS5nYW1lT2JqZWN0O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRpbGUgaW5zdGFuY2VvZiBUaWxlKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5tZWV0c09iamVjdGl2ZXModGlsZSkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJodWghIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGNvbGxpc2lvbmVuZChldmVudDogTWF0dGVyLklFdmVudENvbGxpc2lvbjxQaGFzZXIuUGh5c2ljcy5NYXR0ZXIuV29ybGQ+KSB7XHJcbiAgICAgICAgaWYgKHRoaXMudGlsZXMubGVuZ3RoID09PSAwKSByZXR1cm47XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgcGFpciBvZiBldmVudC5wYWlycykge1xyXG4gICAgICAgICAgICBjb25zdCB7IGJvZHlBOiBhLCBib2R5QjogYiB9ID0gcGFpcjtcclxuXHJcbiAgICAgICAgICAgIGlmIChhICE9PSB0aGlzLmJvZHkgJiYgYiAhPT0gdGhpcy5ib2R5KSBjb250aW51ZTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHRpbGUgPSAoYiA9PT0gdGhpcy5ib2R5ID8gYSA6IGIgYXMgYW55KS5nYW1lT2JqZWN0O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRpbGUgaW5zdGFuY2VvZiBUaWxlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnRpbGVzLnNwbGljZSh0aGlzLnRpbGVzLmluZGV4T2YodGlsZSksIDEpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFwiaHVoIVwiKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIGFmdGVydXBkYXRlKCkge1xyXG5cclxuICAgICAgICBpZiAoIXRoaXMudGlsZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29tcGxldGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGZvciAoY29uc3QgdGlsZSBvZiB0aGlzLnRpbGVzKSB7XHJcbiAgICAgICAgICAgIGlmICh0aGlzLm1lZXRzT2JqZWN0aXZlcyh0aWxlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5jb21wbGV0ZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbXBsZXRlZCA9IGZhbHNlO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2FtZU1vZGUgfSBmcm9tIFwiQGxpYi9sZXZlbFwiO1xyXG5pbXBvcnQgeyBMZXZlbFNjZW5lIH0gZnJvbSBcIkBzY2VuZS9sZXZlbFwiO1xyXG5pbXBvcnQgeyBMZXZlbEh1ZCB9IGZyb20gXCJAc2NlbmUvbGV2ZWwvaHVkXCI7XHJcbmltcG9ydCB7IFJheSwgVmVjdG9yLCBWZWN0b3JMaWtlIH0gZnJvbSBcIkB1dGlsL21hdGhcIjtcclxuaW1wb3J0IHtcclxuICAgIERpc3RhbmNlLFxyXG4gICAgRm9yY2UsXHJcbiAgICBNYXNzLFxyXG4gICAgTWVhc3VyZW1lbnQsXHJcbiAgICBOdW1lcmljLFxyXG4gICAgcHJlY2lzaW9uLFxyXG4gICAgVGltZSxcclxuICAgIFVuaXQsXHJcbiAgICBWZWN0b3JNZWFzdXJlbWVudCxcclxuICAgIFZlbG9jaXR5LFxyXG59IGZyb20gXCJAdXRpbC9tZWFzdXJlbWVudFwiO1xyXG5cclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gXCIuLi8uLi9jb25maWdcIjtcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgTGV2ZWxIdWRTZWxlY3RvcjxUIGV4dGVuZHMgTnVtZXJpYz4ge1xyXG4gICAgaW5mbzogc3RyaW5nO1xyXG4gICAgY29sb3I6IG51bWJlcjtcclxuICAgIHN0YXJ0OiBudW1iZXIgfCBWZWN0b3I7XHJcbiAgICBlbmQ6IG51bWJlciB8IFZlY3RvcjtcclxuICAgIHNob3c6IGJvb2xlYW47XHJcblxyXG4gICAgbW92ZSh4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQ7XHJcbiAgICBxdWVyeSgpOiBUO1xyXG4gICAgYWN0aXZhdGUoKTogdm9pZDtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBWZWN0b3JMZXZlbFNlbGVjdG9yQ29uZmlnIHtcclxuICAgIG1vZGU6IEdhbWVNb2RlO1xyXG4gICAgdW5pdDogVW5pdDtcclxuICAgIHNjYWxlPzogbnVtYmVyO1xyXG4gICAgeDogbnVtYmVyO1xyXG4gICAgeTogbnVtYmVyO1xyXG4gICAgc2hvdzogYm9vbGVhbjtcclxufVxyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZlY3RvckxldmVsSHVkU2VsZWN0b3JcclxuICAgIGV4dGVuZHMgUGhhc2VyLkdhbWVPYmplY3RzLkNvbnRhaW5lclxyXG4gICAgaW1wbGVtZW50cyBMZXZlbEh1ZFNlbGVjdG9yPFZlY3Rvck1lYXN1cmVtZW50PlxyXG57XHJcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0IGluZm8oKTogc3RyaW5nO1xyXG4gICAgcHVibGljIGFic3RyYWN0IGdldCBjb2xvcigpOiBudW1iZXI7XHJcblxyXG4gICAgcHVibGljIHJheTogUmF5O1xyXG4gICAgcHVibGljIHNjZW5lOiBMZXZlbFNjZW5lO1xyXG4gICAgcHVibGljIGh1ZDogTGV2ZWxIdWQ7XHJcblxyXG4gICAgcHVibGljIG1vZGU6IEdhbWVNb2RlO1xyXG4gICAgcHVibGljIHVuaXQ6IFVuaXQ7XHJcbiAgICBwdWJsaWMgc2hvdzogYm9vbGVhbjtcclxuICAgIHB1YmxpYyBzY2FsZTogbnVtYmVyID0gMTtcclxuXHJcbiAgICBwcml2YXRlIGRpcnR5ID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGxhYmVsWD86IFBoYXNlci5HYW1lT2JqZWN0cy5UZXh0O1xyXG4gICAgcHJpdmF0ZSBsYWJlbFk/OiBQaGFzZXIuR2FtZU9iamVjdHMuVGV4dDtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihodWQ6IExldmVsSHVkLCBjb25maWc6IFZlY3RvckxldmVsU2VsZWN0b3JDb25maWcpIHtcclxuICAgICAgICBzdXBlcihodWQuc2NlbmUpO1xyXG5cclxuICAgICAgICB0aGlzLnNjZW5lID0gaHVkLnNjZW5lO1xyXG4gICAgICAgIHRoaXMuaHVkID0gaHVkO1xyXG5cclxuICAgICAgICB0aGlzLm1vZGUgPSBjb25maWcubW9kZTtcclxuICAgICAgICB0aGlzLnVuaXQgPSBjb25maWcudW5pdDtcclxuICAgICAgICB0aGlzLnNob3cgPSBjb25maWcuc2hvdztcclxuICAgICAgICB0aGlzLnJheSA9IG5ldyBSYXkoeyB4OiBjb25maWcueCwgeTogY29uZmlnLnkgfSwgVmVjdG9yLnplcm8pO1xyXG5cclxuICAgICAgICBpZiAodHlwZW9mIGNvbmZpZy5zY2FsZSA9PT0gXCJudW1iZXJcIikgdGhpcy5zY2FsZSA9IGNvbmZpZy5zY2FsZTtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGxhYmVsID0ge1xyXG4gICAgICAgICAgICB4OiBjb25maWcueCxcclxuICAgICAgICAgICAgeTogY29uZmlnLnksXHJcbiAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICBmb250V2VpZ2h0OiBcImJvbGRcIixcclxuICAgICAgICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogXCIjMTExMTExXCIsXHJcbiAgICAgICAgICAgICAgICAuLi5UZXh0Lk5vcm1hbC5EYXJrLFxyXG4gICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICBvcmlnaW46IDAuNSxcclxuICAgICAgICAgICAgcGFkZGluZzogNSxcclxuICAgICAgICAgICAgYWxwaGE6IDBcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB0aGlzLmxhYmVsWCA9IHRoaXMuc2NlbmUubWFrZS50ZXh0KGxhYmVsKS5zZXRPcmlnaW4oMC41KSBhcyBQaGFzZXIuR2FtZU9iamVjdHMuVGV4dDtcclxuICAgICAgICB0aGlzLmxhYmVsWSA9IHRoaXMuc2NlbmUubWFrZS50ZXh0KGxhYmVsKS5zZXRPcmlnaW4oMC41KSBhcyBQaGFzZXIuR2FtZU9iamVjdHMuVGV4dDtcclxuXHJcbiAgICAgICAgdGhpcy5hZGQodGhpcy5sYWJlbFgpO1xyXG4gICAgICAgIHRoaXMuYWRkKHRoaXMubGFiZWxZKTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHJvdGVjdGVkIGdldCBzdGF0ZSgpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zY2VuZS5zdGF0ZTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgcXVlcnkoKTogVmVjdG9yTWVhc3VyZW1lbnQge1xyXG4gICAgICAgIGlmICghdGhpcy5yYXkpXHJcbiAgICAgICAgICAgIHJldHVybiBWZWN0b3JNZWFzdXJlbWVudC56ZXJvO1xyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFZlY3Rvck1lYXN1cmVtZW50KFZlY3Rvci5tdWx0KHRoaXMucmF5LmRpcmVjdGlvbiwgdGhpcy5zY2FsZSksIHRoaXMudW5pdCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIG1vdmUoeDogbnVtYmVyLCB5OiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5yYXkpIHtcclxuICAgICAgICAgICAgbGV0IGQgPSBWZWN0b3Iuc3ViKHsgeCwgeSB9LCB0aGlzLnJheS5zb3VyY2UpO1xyXG4gICAgICAgICAgICBsZXQgZGxlbiA9IGQubGVuZ3RoKCk7XHJcbiAgICAgICAgICAgIGQgPSBkLnRpbWVzKE1hdGgubWluKDEsIDMwMCAvIGRsZW4pKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMucmF5LmRpcmVjdGlvbiA9IGQ7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBvZmZzZXQgPSBWZWN0b3IuZGl2KGQsIDIpO1xyXG4gICAgICAgICAgICBjb25zdCBzb3VyY2UgPSB0aGlzLnJheS5zb3VyY2U7XHJcbiAgICAgICAgICAgIGNvbnN0IGFscGhhID0gTWF0aC5taW4oMSwgZGxlbiAvIDUwKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IHZlYyA9IHRoaXMucXVlcnkoKTtcclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxhYmVsWCkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbFguc2V0VGV4dChuZXcgTWVhc3VyZW1lbnQodmVjLngsIHZlYy51bml0KS50b1ByZWNpc2lvbigzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsWC5zZXRQb3NpdGlvbihzb3VyY2UueCArIG9mZnNldC54LCBzb3VyY2UueSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsWC5zZXRBbHBoYShhbHBoYSk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmICh0aGlzLmxhYmVsWSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5sYWJlbFkuc2V0VGV4dChuZXcgTWVhc3VyZW1lbnQodmVjLnksIHZlYy51bml0KS50b1ByZWNpc2lvbigzKSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsWS5zZXRQb3NpdGlvbihzb3VyY2UueCArIGQueCwgc291cmNlLnkgKyBvZmZzZXQueSk7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmxhYmVsWS5zZXRBbHBoYShhbHBoYSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFic3RyYWN0IGFjdGl2YXRlKCk6IHZvaWQ7XHJcblxyXG4gICAgcHVibGljIGdldCBzdGFydCgpIHsgcmV0dXJuIG5ldyBWZWN0b3IodGhpcy5yYXkuc291cmNlKTsgfVxyXG4gICAgcHVibGljIGdldCBlbmQoKSB7IHJldHVybiB0aGlzLnJheS5lbmQ7IH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIEZvcmNlTGV2ZWxIdWRTZWxlY3RvciBleHRlbmRzIFZlY3RvckxldmVsSHVkU2VsZWN0b3Ige1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGh1ZDogTGV2ZWxIdWQsIG9yaWdpbjogVmVjdG9yTGlrZSkge1xyXG4gICAgICAgIHN1cGVyKGh1ZCwge1xyXG4gICAgICAgICAgICBtb2RlOiBHYW1lTW9kZS5Gb3JjZSxcclxuICAgICAgICAgICAgdW5pdDogbmV3IFVuaXQoRm9yY2UuTmV3dG9uKSxcclxuICAgICAgICAgICAgc2NhbGU6IDEwMCxcclxuICAgICAgICAgICAgeDogb3JpZ2luLngsXHJcbiAgICAgICAgICAgIHk6IG9yaWdpbi55LFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjb2xvcigpIHsgcmV0dXJuIDB4ODAwMDAwOyB9XHJcblxyXG4gICAgcHVibGljIGdldCBpbmZvKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS50YXJnZXQpIHJldHVybiBcIlwiO1xyXG5cclxuICAgICAgICBjb25zdCBib2R5ID0gdGhpcy5zdGF0ZS50YXJnZXQuYm9keSBhcyBhbnk7XHJcbiAgICAgICAgY29uc3QgdGltZSA9IG5ldyBNZWFzdXJlbWVudCgxIC8gNjAsIFRpbWUuU2Vjb25kKTtcclxuICAgICAgICBjb25zdCBtYXNzID0gbmV3IE1lYXN1cmVtZW50KGJvZHkubWFzcywgTWFzcy5LaWxvZ3JhbSk7XHJcbiAgICAgICAgY29uc3QgZm9yY2UgPSB0aGlzLnF1ZXJ5KCkubWFnbml0dWRlKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFjY2VsID0gZm9yY2Uub3ZlcihtYXNzKTtcclxuICAgICAgICBjb25zdCB2ZWxvID0gYWNjZWwudGltZXModGltZSk7XHJcblxyXG4gICAgICAgIGNvbnN0IGFjY2VsZXJhdGlvbiA9IHByZWNpc2lvbigzKSBgRiAoJHtmb3JjZX0pIC8gbSAoJHttYXNzfSkgPSBhICgke2FjY2VsfSlgO1xyXG4gICAgICAgIGNvbnN0IHZlbG9jaXR5ID0gcHJlY2lzaW9uKDMpIGBhICgke2FjY2VsfSkgw5cgzpR0ICgxLzYwIHMpID0gzpR2ICgke3ZlbG99KWA7XHJcblxyXG4gICAgICAgIHJldHVybiBbYWNjZWxlcmF0aW9uLCB2ZWxvY2l0eV0uam9pbihcIlxcblwiKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYWN0aXZhdGUoKTogdm9pZCB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnJheSkgcmV0dXJuO1xyXG5cclxuICAgICAgICB0aGlzLmh1ZC5yZXN1bWUoKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubW9kZXMpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5tb2Rlc1t0aGlzLm1vZGVdLS07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAodGhpcy5yYXkgJiYgdGhpcy5zdGF0ZS50YXJnZXQpIHtcclxuICAgICAgICAgICAgY29uc3QgYm9keSA9IHRoaXMuc3RhdGUudGFyZ2V0LmJvZHkgYXMgYW55O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgcyA9IHRoaXMucmF5LnNvdXJjZTtcclxuICAgICAgICAgICAgY29uc3QgZCA9IHRoaXMucmF5LmRpcmVjdGlvbjtcclxuXHJcbiAgICAgICAgICAgIC8vIGdvbm5hIHRyZWF0IHRoZSBhcnJvdyBsZW5ndGggYXMgMTAwICogbWF0dGVyLW5ld3RvbiAgIFxyXG4gICAgICAgICAgICBsZXQgZm9yY2UgPSBuZXcgVmVjdG9yTWVhc3VyZW1lbnQoVmVjdG9yLmRpdihkLCAxMDApLCBGb3JjZS5QaXhlbE5ld3Rvbik7XHJcblxyXG4gICAgICAgICAgICAvLyBtYXhpbXVtIDMgbWF0dGVyLW5ld3RvbiA9IDMwMCBOXHJcbiAgICAgICAgICAgIGZvcmNlID0gZm9yY2UudGltZXMoTWF0aC5taW4oMSwgMyAvIGZvcmNlLmxlbmd0aCgpKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBrZyAqIHB4IC8gc14yIGlzIG1hdHRlcmpzJ3MgaW50ZXJuYWwgZm9yY2UgdW5pdFxyXG4gICAgICAgICAgICAvLyBzZWUgaHR0cDovL2JybS5pby9tYXR0ZXItanMvZG9jcy9maWxlcy9zcmNfYm9keV9Cb2R5LmpzLmh0bWwgbGluZSA1ODJcclxuICAgICAgICAgICAgLy8gc28gbm8gY29udmVyc2lvbiBuZWNlc3NhcnlcclxuXHJcbiAgICAgICAgICAgICh0aGlzLnN0YXRlLnRhcmdldCBhcyBhbnkpLmFwcGx5Rm9yY2VGcm9tKFxyXG4gICAgICAgICAgICAgICAgbmV3IFBoYXNlci5NYXRoLlZlY3RvcjIocy54LCBzLnkpLFxyXG4gICAgICAgICAgICAgICAgbmV3IFBoYXNlci5NYXRoLlZlY3RvcjIoZm9yY2UueCwgZm9yY2UueSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFZlbG9jaXR5TGV2ZWxIdWRTZWxlY3RvciBleHRlbmRzIFZlY3RvckxldmVsSHVkU2VsZWN0b3Ige1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGh1ZDogTGV2ZWxIdWQsIG9yaWdpbjogVmVjdG9yTGlrZSkge1xyXG4gICAgICAgIHN1cGVyKGh1ZCwge1xyXG4gICAgICAgICAgICBtb2RlOiBHYW1lTW9kZS5WZWxvY2l0eSxcclxuICAgICAgICAgICAgdW5pdDogVmVsb2NpdHkuTWV0ZXJzUGVyU2Vjb25kLFxyXG4gICAgICAgICAgICBzY2FsZTogMSAvIDMwLFxyXG4gICAgICAgICAgICB4OiBvcmlnaW4ueCxcclxuICAgICAgICAgICAgeTogb3JpZ2luLnksXHJcbiAgICAgICAgICAgIHNob3c6IHRydWVcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGNvbG9yKCkgeyByZXR1cm4gMHgwMDZhZDE7IH1cclxuXHJcbiAgICBwdWJsaWMgZ2V0IGluZm8oKSB7XHJcbiAgICAgICAgaWYgKCF0aGlzLnN0YXRlLnRhcmdldCkgcmV0dXJuIFwiXCI7XHJcblxyXG4gICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLnN0YXRlLnRhcmdldC5ib2R5IGFzIGFueTtcclxuICAgICAgICBjb25zdCBtYXNzID0gbmV3IE1lYXN1cmVtZW50KGJvZHkubWFzcywgTWFzcy5LaWxvZ3JhbSk7XHJcbiAgICAgICAgY29uc3QgdmVsbyA9IHRoaXMucXVlcnkoKS5tYWduaXR1ZGUoKTtcclxuXHJcbiAgICAgICAgY29uc3QgbW9tZW50dW0gPSBwcmVjaXNpb24oMykgYG0gKCR7bWFzc30pICogdiAoJHt2ZWxvfSkgPSDPgSAoJHt2ZWxvLnRpbWVzKG1hc3MpfSlgO1xyXG5cclxuICAgICAgICByZXR1cm4gbW9tZW50dW07XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFjdGl2YXRlKCk6IHZvaWQge1xyXG4gICAgICAgIGlmICghdGhpcy5yYXkpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5odWQucmVzdW1lKCk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1vZGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubW9kZXNbdGhpcy5tb2RlXS0tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucmF5ICYmIHRoaXMuc3RhdGUudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB0aGlzLnN0YXRlLnRhcmdldCBhcyBhbnk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBzID0gdGhpcy5yYXkuc291cmNlO1xyXG4gICAgICAgICAgICBjb25zdCBkID0gdGhpcy5yYXkuZGlyZWN0aW9uO1xyXG5cclxuICAgICAgICAgICAgLy8gZ29ubmEgdHJlYXQgdGhlIGFycm93IGxlbmd0aCBhcyAzMCAqIG0gLyBzXHJcbiAgICAgICAgICAgIGxldCB2ZWxvY2l0eSA9IG5ldyBWZWN0b3JNZWFzdXJlbWVudChWZWN0b3IuZGl2KGQsIDMwKSwgVmVsb2NpdHkuTWV0ZXJzUGVyU2Vjb25kKTtcclxuXHJcbiAgICAgICAgICAgIC8vIG1heGltdW0gMTAgbS9zXHJcbiAgICAgICAgICAgIHZlbG9jaXR5ID0gdmVsb2NpdHkudGltZXMoTWF0aC5taW4oMSwgMTAgLyB2ZWxvY2l0eS5sZW5ndGgoKSkpO1xyXG5cclxuICAgICAgICAgICAgdmVsb2NpdHkgPSB2ZWxvY2l0eS50byhWZWxvY2l0eS5QaXhlbHNQZXJTdGVwKTtcclxuXHJcbiAgICAgICAgICAgICh0aGlzLnN0YXRlLnRhcmdldCBhcyBhbnkpLnNldFZlbG9jaXR5KHZlbG9jaXR5LngsIHZlbG9jaXR5LnkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGNsYXNzIFBvc2l0aW9uTGV2ZWxIdWRTZWxlY3RvciBleHRlbmRzIFZlY3RvckxldmVsSHVkU2VsZWN0b3Ige1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKGh1ZDogTGV2ZWxIdWQsIG9yaWdpbjogVmVjdG9yTGlrZSkge1xyXG4gICAgICAgIHN1cGVyKGh1ZCwge1xyXG4gICAgICAgICAgICBtb2RlOiBHYW1lTW9kZS5Qb3NpdGlvbixcclxuICAgICAgICAgICAgdW5pdDogbmV3IFVuaXQoRGlzdGFuY2UuTWV0ZXIpLFxyXG4gICAgICAgICAgICBzY2FsZTogMC4wMSxcclxuICAgICAgICAgICAgeDogb3JpZ2luLngsXHJcbiAgICAgICAgICAgIHk6IG9yaWdpbi55LFxyXG4gICAgICAgICAgICBzaG93OiB0cnVlXHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBjb2xvcigpIHsgcmV0dXJuIDB4MjI4YjIyOyB9XHJcblxyXG4gICAgcHVibGljIGdldCBpbmZvKCkge1xyXG4gICAgICAgIGlmICghdGhpcy5zdGF0ZS50YXJnZXQpIHJldHVybiBcIlwiO1xyXG5cclxuICAgICAgICBjb25zdCB7IHgsIHkgfSA9IHRoaXMuc3RhdGUudGFyZ2V0O1xyXG4gICAgICAgIGNvbnN0IHBvcyA9IG5ldyBWZWN0b3JNZWFzdXJlbWVudCh7IHgsIHkgfSwgRGlzdGFuY2UuUGl4ZWwpLnRvKERpc3RhbmNlLk1ldGVyKTtcclxuXHJcbiAgICAgICAgcmV0dXJuIHByZWNpc2lvbigzKSBgeCA9ICR7cG9zLnBsdXModGhpcy5xdWVyeSgpKX1gO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhY3RpdmF0ZSgpOiB2b2lkIHtcclxuICAgICAgICBpZiAoIXRoaXMucmF5KSByZXR1cm47XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLm1vZGVzKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUubW9kZXNbdGhpcy5tb2RlXS0tO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMucmF5ICYmIHRoaXMuc3RhdGUudGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHBvcyA9IFZlY3Rvci5hZGQoeyB4OiB0aGlzLnN0YXRlLnRhcmdldC54LCB5OiB0aGlzLnN0YXRlLnRhcmdldC55IH0sIHRoaXMucmF5LmRpcmVjdGlvbik7XHJcbiAgICAgICAgICAgIHRoaXMuc3RhdGUudGFyZ2V0LnNldFBvc2l0aW9uKHBvcy54LCBwb3MueSk7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcblxyXG4iLCJpbXBvcnQgKiBhcyBQaGFzZXIgZnJvbSBcInBoYXNlclwiO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBUb29sdGlwIGV4dGVuZHMgUGhhc2VyLkdhbWVPYmplY3RzLkNvbnRhaW5lciB7XHJcbiAgICBwcml2YXRlIHRleHQ6IFBoYXNlci5HYW1lT2JqZWN0cy5UZXh0O1xyXG4gICAgcHJpdmF0ZSBncmFwaGljczogUGhhc2VyLkdhbWVPYmplY3RzLkdyYXBoaWNzO1xyXG4gICAgcHJpdmF0ZSB0d2Vlbj86IFBoYXNlci5Ud2VlbnMuVHdlZW47XHJcblxyXG4gICAgY29uc3RydWN0b3Ioc2NlbmU6IFBoYXNlci5TY2VuZSwgY29uZmlnOiBhbnkpIHtcclxuICAgICAgICBzdXBlcihzY2VuZSwgY29uZmlnLngsIGNvbmZpZy55KTtcclxuXHJcbiAgICAgICAgY29uc3QgcGFkZGluZzogbnVtYmVyID0gY29uZmlnLnBhZGRpbmcgfHwgNTtcclxuXHJcbiAgICAgICAgaWYgKGNvbmZpZy5zdHlsZS5mb250U2l6ZSlcclxuICAgICAgICAgICAgY29uZmlnLnN0eWxlLmZvbnRTaXplICo9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG5cclxuICAgICAgICBjb25maWcuc2NhbGUgPSAoXCJzY2FsZVwiIGluIGNvbmZpZyA/IGNvbmZpZy5zY2FsZSA6IDEpIC8gd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcblxyXG4gICAgICAgIHRoaXMudGV4dCA9IHNjZW5lLm1ha2UudGV4dChjb25maWcpO1xyXG4gICAgICAgIHRoaXMudGV4dC5yZXNvbHV0aW9uID0gd2luZG93LmRldmljZVBpeGVsUmF0aW87XHJcblxyXG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy50ZXh0O1xyXG5cclxuICAgICAgICB0aGlzLmdyYXBoaWNzID0gc2NlbmUubWFrZS5ncmFwaGljcyh7IHdpZHRoOiB3aWR0aCArIHBhZGRpbmcgKiAyLCBoZWlnaHQ6IGhlaWdodCArIHBhZGRpbmcgKiAyICsgMTAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuZmlsbFN0eWxlKDB4QUFBQUFBLCAwLjg1KTtcclxuICAgICAgICB0aGlzLmdyYXBoaWNzLmZpbGxSZWN0KFxyXG4gICAgICAgICAgICAtcGFkZGluZyAtIHdpZHRoIC8gMiwgLXBhZGRpbmcgLSBoZWlnaHQgLyAyLFxyXG4gICAgICAgICAgICB3aWR0aCArIHBhZGRpbmcgKiAyLFxyXG4gICAgICAgICAgICBoZWlnaHQgKyBwYWRkaW5nICogMik7XHJcblxyXG4gICAgICAgIHRoaXMuZ3JhcGhpY3MuZmlsbFRyaWFuZ2xlKFxyXG4gICAgICAgICAgICAtNSwgaGVpZ2h0IC8gMiArIHBhZGRpbmcsXHJcbiAgICAgICAgICAgIDUsIGhlaWdodCAvIDIgKyBwYWRkaW5nLFxyXG4gICAgICAgICAgICAwLCBoZWlnaHQgLyAyICsgcGFkZGluZyArIDcpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZChbdGhpcy5ncmFwaGljcywgdGhpcy50ZXh0XSk7XHJcbiAgICAgICAgdGhpcy5hbHBoYSA9IDA7XHJcblxyXG4gICAgICAgIFt0aGlzLndpZHRoLCB0aGlzLmhlaWdodF0gPSBbd2lkdGggKyBwYWRkaW5nICogMiwgaGVpZ2h0ICsgcGFkZGluZyAqIDJdO1xyXG5cclxuICAgICAgICBjb25zdCB0YXJnZXQgPSBjb25maWcudGFyZ2V0IGFzIFBoYXNlci5HYW1lT2JqZWN0cy5HYW1lT2JqZWN0O1xyXG5cclxuICAgICAgICBpZiAoIXRhcmdldCkgdGhyb3cgbmV3IEVycm9yKFwiVG9vbHRpcCBtdXN0IGhhdmUgYSB0YXJnZXQuXCIpO1xyXG5cclxuICAgICAgICB0YXJnZXQub24oXCJwb2ludGVyb3ZlclwiLCB0aGlzLnBvaW50ZXJvdmVyLCB0aGlzKTtcclxuICAgICAgICB0YXJnZXQub24oXCJwb2ludGVyb3V0XCIsIHRoaXMucG9pbnRlcm91dCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwb2ludGVyb3Zlcihwb2ludGVyOiBQaGFzZXIuSW5wdXQuUG9pbnRlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnR3ZWVuKVxyXG4gICAgICAgICAgICB0aGlzLnR3ZWVuLnN0b3AoKTtcclxuXHJcbiAgICAgICAgdGhpcy50d2VlbiA9IHRoaXMuc2NlbmUudHdlZW5zLmFkZCh7XHJcbiAgICAgICAgICAgIHRhcmdldHM6IHRoaXMsXHJcbiAgICAgICAgICAgIGFscGhhOiAxLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwLFxyXG4gICAgICAgICAgICBkZWxheTogNTAwLFxyXG4gICAgICAgICAgICBlYXNpbmc6IFwiQ3ViaWMuZWFzZUluXCJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBvaW50ZXJvdXQocG9pbnRlcjogUGhhc2VyLklucHV0LlBvaW50ZXIpIHtcclxuICAgICAgICBpZiAodGhpcy50d2VlbilcclxuICAgICAgICAgICAgdGhpcy50d2Vlbi5zdG9wKCk7XHJcblxyXG4gICAgICAgIHRoaXMuc2NlbmUudHdlZW5zLmFkZCh7XHJcbiAgICAgICAgICAgIHRhcmdldHM6IHRoaXMsXHJcbiAgICAgICAgICAgIGFscGhhOiAwLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwLFxyXG4gICAgICAgICAgICBlYXNpbmc6IFwiQ3ViaWMuZWFzZUluXCJcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IFRvb2x0aXAgfSBmcm9tIFwiQGNvbnRyb2wvdG9vbHRpcFwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIEJ1dHRvbiBleHRlbmRzIFBoYXNlci5HYW1lT2JqZWN0cy5Db250YWluZXIge1xyXG5cclxuICAgIHB1YmxpYyB0b29sdGlwPzogUGhhc2VyLkdhbWVPYmplY3RzLkNvbnRhaW5lcjtcclxuICAgIHB1YmxpYyB0ZXh0PzogUGhhc2VyLkdhbWVPYmplY3RzLlRleHQ7XHJcbiAgICBwdWJsaWMgc3ByaXRlOiBQaGFzZXIuR2FtZU9iamVjdHMuU3ByaXRlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKHNjZW5lOiBQaGFzZXIuU2NlbmUsIGNvbmZpZzogYW55KSB7XHJcbiAgICAgICAgc3VwZXIoc2NlbmUsIGNvbmZpZy54LCBjb25maWcueSk7XHJcblxyXG4gICAgICAgIHRoaXMuc3ByaXRlID0gc2NlbmUubWFrZS5zcHJpdGUoY29uZmlnLnNwcml0ZSwgZmFsc2UpO1xyXG4gICAgICAgIGlmIChjb25maWcuc3ByaXRlLnRpbnQpIHRoaXMuc3ByaXRlLnRpbnQgPSBjb25maWcuc3ByaXRlLnRpbnQ7XHJcbiAgICAgICAgdGhpcy5hZGQodGhpcy5zcHJpdGUpO1xyXG5cclxuICAgICAgICBpZiAoXCJ0ZXh0XCIgaW4gY29uZmlnKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IHRleHRDb25maWcgPSB7IG9yaWdpbjogMC41LCAuLi5jb25maWcudGV4dCB9O1xyXG5cclxuICAgICAgICAgICAgaWYgKHRleHRDb25maWcuc3R5bGUuZm9udFNpemUpXHJcbiAgICAgICAgICAgICAgICB0ZXh0Q29uZmlnLnN0eWxlLmZvbnRTaXplICo9IHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG5cclxuICAgICAgICAgICAgdGV4dENvbmZpZy5zY2FsZSA9IChcInNjYWxlXCIgaW4gdGV4dENvbmZpZyA/IHRleHRDb25maWcuc2NhbGUgOiAxKSAvIHdpbmRvdy5kZXZpY2VQaXhlbFJhdGlvO1xyXG5cclxuICAgICAgICAgICAgdGhpcy50ZXh0ID0gc2NlbmUubWFrZS50ZXh0KHRleHRDb25maWcsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5hZGQodGhpcy50ZXh0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChcInRvb2x0aXBcIiBpbiBjb25maWcpIHtcclxuICAgICAgICAgICAgdGhpcy50b29sdGlwID0gbmV3IFRvb2x0aXAoc2NlbmUsIHsgdGFyZ2V0OiB0aGlzLCBvcmlnaW46IDAuNSwgLi4uY29uZmlnLnRvb2x0aXAgfSk7XHJcbiAgICAgICAgICAgIHRoaXMudG9vbHRpcC55ID0gLSA0NTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWRkKHRoaXMudG9vbHRpcCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLnNwcml0ZS5zZXRJbnRlcmFjdGl2ZSgpO1xyXG4gICAgICAgIHRoaXMuc3ByaXRlLm9uKFwicG9pbnRlcm92ZXJcIiwgdGhpcy5wb2ludGVyb3ZlciwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUub24oXCJwb2ludGVyb3V0XCIsIHRoaXMucG9pbnRlcm91dCwgdGhpcyk7XHJcbiAgICAgICAgdGhpcy5zcHJpdGUub24oXCJwb2ludGVyZG93blwiLCB0aGlzLnBvaW50ZXJkb3duLCB0aGlzKTtcclxuICAgICAgICB0aGlzLnNwcml0ZS5vbihcInBvaW50ZXJ1cFwiLCB0aGlzLnBvaW50ZXJ1cCwgdGhpcyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHNldFRleHQodGV4dDogc3RyaW5nIHwgc3RyaW5nW10pIHtcclxuICAgICAgICBpZiAodGhpcy50ZXh0KSB7XHJcbiAgICAgICAgICAgIHRoaXMudGV4dC5zZXRUZXh0KHRleHQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBvaW50ZXJvdmVyKHBvaW50ZXI6IFBoYXNlci5JbnB1dC5Qb2ludGVyKSB7XHJcbiAgICAgICAgdGhpcy5zY2VuZS50d2VlbnMuYWRkKHtcclxuICAgICAgICAgICAgdGFyZ2V0czogdGhpcyxcclxuICAgICAgICAgICAgc2NhbGVYOiAwLjksXHJcbiAgICAgICAgICAgIHNjYWxlWTogMC45LFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTAwLFxyXG4gICAgICAgICAgICBlYXNpbmc6IFwiQ3ViaWMuZWFzZUluXCJcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdGhpcy5lbWl0KFwicG9pbnRlcm92ZXJcIiwgLi4uYXJndW1lbnRzKTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIHBvaW50ZXJvdXQocG9pbnRlcjogUGhhc2VyLklucHV0LlBvaW50ZXIpIHtcclxuICAgICAgICB0aGlzLnNjZW5lLnR3ZWVucy5hZGQoe1xyXG4gICAgICAgICAgICB0YXJnZXRzOiB0aGlzLFxyXG4gICAgICAgICAgICBzY2FsZVg6IDEuMCxcclxuICAgICAgICAgICAgc2NhbGVZOiAxLjAsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAsXHJcbiAgICAgICAgICAgIGVhc2luZzogXCJDdWJpYy5lYXNlSW5cIlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmVtaXQoXCJwb2ludGVyb3V0XCIsIC4uLmFyZ3VtZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwb2ludGVyZG93bihwb2ludGVyOiBQaGFzZXIuSW5wdXQuUG9pbnRlcikge1xyXG4gICAgICAgIHRoaXMuc2NlbmUudHdlZW5zLmFkZCh7XHJcbiAgICAgICAgICAgIHRhcmdldHM6IHRoaXMsXHJcbiAgICAgICAgICAgIHNjYWxlWDogMC44LFxyXG4gICAgICAgICAgICBzY2FsZVk6IDAuOCxcclxuICAgICAgICAgICAgZHVyYXRpb246IDEwMCxcclxuICAgICAgICAgICAgZWFzaW5nOiBcIkN1YmljLmVhc2VJblwiXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHRoaXMuZW1pdChcInBvaW50ZXJkb3duXCIsIC4uLmFyZ3VtZW50cyk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBwb2ludGVydXAocG9pbnRlcjogUGhhc2VyLklucHV0LlBvaW50ZXIpIHtcclxuICAgICAgICB0aGlzLnNjZW5lLnR3ZWVucy5hZGQoe1xyXG4gICAgICAgICAgICB0YXJnZXRzOiB0aGlzLFxyXG4gICAgICAgICAgICBzY2FsZVg6IDAuOSxcclxuICAgICAgICAgICAgc2NhbGVZOiAwLjksXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAxMDAsXHJcbiAgICAgICAgICAgIGVhc2luZzogXCJDdWJpYy5lYXNlSW5cIlxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB0aGlzLmVtaXQoXCJwb2ludGVydXBcIiwgLi4uYXJndW1lbnRzKTtcclxuICAgIH1cclxufSIsImltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAY29udHJvbC9idXR0b25cIjtcclxuaW1wb3J0IHsgR2FtZU1vZGUgfSBmcm9tIFwiQGxpYi9sZXZlbFwiO1xyXG5pbXBvcnQgeyBTY2VuZSB9IGZyb20gXCJwaGFzZXJcIjtcclxuXHJcblxyXG5cclxuZXhwb3J0IGVudW0gQ29udHJvbEFsaWdubWVudCB7XHJcbiAgICBMZWZ0ID0gMSxcclxuICAgIFJpZ2h0ID0gMixcclxuICAgIENlbnRlciA9IDQsXHJcbiAgICBUb3AgPSA4LFxyXG4gICAgQm90dG9tID0gMTZcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBIdWRCdXR0b25Db25maWcge1xyXG4gICAgdGV4dDogc3RyaW5nO1xyXG4gICAgdG9vbHRpcDogc3RyaW5nO1xyXG4gICAgc3ByaXRlOiBzdHJpbmc7XHJcbiAgICBmcmFtZTogbnVtYmVyO1xyXG5cclxuICAgIGFsaWduPzogQ29udHJvbEFsaWdubWVudDtcclxuICAgIG9mZnNldD86IHsgeDogbnVtYmVyLCB5OiBudW1iZXIgfTtcclxuICAgIGhhbmRsZXI/OiBGdW5jdGlvbjtcclxufVxyXG5cclxuZXhwb3J0IGludGVyZmFjZSBNb2RlSHVkQnV0dG9uQ29uZmlnIGV4dGVuZHMgSHVkQnV0dG9uQ29uZmlnIHtcclxuICAgIGdyZXk/OiBib29sZWFuO1xyXG4gICAgbW9kZTogR2FtZU1vZGU7XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBIdWRCdXR0b24gZXh0ZW5kcyBCdXR0b24ge1xyXG4gICAgY29uc3RydWN0b3Ioc2NlbmU6IFNjZW5lLCBjb25maWc6IEh1ZEJ1dHRvbkNvbmZpZykge1xyXG4gICAgICAgIGNvbnN0IHsgaGVpZ2h0LCB3aWR0aCB9ID0gc2NlbmUuY2FtZXJhcy5tYWluO1xyXG5cclxuICAgICAgICBjb25zdCBjID0ge1xyXG4gICAgICAgICAgICBhbGlnbjogQ29udHJvbEFsaWdubWVudC5MZWZ0LFxyXG4gICAgICAgICAgICAuLi5jb25maWdcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICBsZXQgb2Zmc2V0ID0gYy5vZmZzZXQgfHwgeyB4OiAwLCB5OiAwIH07XHJcblxyXG4gICAgICAgIGlmICgoYy5hbGlnbiAmIENvbnRyb2xBbGlnbm1lbnQuUmlnaHQpID09PSBDb250cm9sQWxpZ25tZW50LlJpZ2h0KVxyXG4gICAgICAgICAgICBvZmZzZXQgPSB7IHg6IHdpZHRoIC0gb2Zmc2V0LngsIHk6IG9mZnNldC55IH07XHJcblxyXG4gICAgICAgIGlmICgoYy5hbGlnbiAmIENvbnRyb2xBbGlnbm1lbnQuQm90dG9tKSA9PT0gQ29udHJvbEFsaWdubWVudC5Cb3R0b20pXHJcbiAgICAgICAgICAgIG9mZnNldCA9IHsgeDogb2Zmc2V0LngsIHk6IGhlaWdodCAtIG9mZnNldC55IH07XHJcblxyXG4gICAgICAgIHN1cGVyKHNjZW5lLCB7XHJcbiAgICAgICAgICAgIC4uLm9mZnNldCxcclxuICAgICAgICAgICAgdGV4dDoge1xyXG4gICAgICAgICAgICAgICAgdGV4dDogYy50ZXh0LFxyXG4gICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBcIkNsZWFyIFNhbnNcIixcclxuICAgICAgICAgICAgICAgICAgICBmb250U3R5bGU6IFwiYm9sZFwiLFxyXG4gICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAyNCxcclxuICAgICAgICAgICAgICAgICAgICBmaWxsOiBcIndoaXRlXCJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgc3ByaXRlOiB7XHJcbiAgICAgICAgICAgICAgICBrZXk6IGMuc3ByaXRlLFxyXG4gICAgICAgICAgICAgICAgZnJhbWU6IGMuZnJhbWUsXHJcbiAgICAgICAgICAgICAgICBzY2FsZTogMC41XHJcbiAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IHtcclxuICAgICAgICAgICAgICAgIHRleHQ6IGMudG9vbHRpcCxcclxuICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZm9udEZhbWlseTogXCJDbGVhciBTYW5zXCIsXHJcbiAgICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDEyLFxyXG4gICAgICAgICAgICAgICAgICAgIGZpbGw6IFwid2hpdGVcIlxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmIChjLmhhbmRsZXIpIHRoaXMub24oXCJwb2ludGVyZG93blwiLCBjLmhhbmRsZXIpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgR2FtZU1vZGUsIExldmVsRGF0YSB9IGZyb20gXCJAbGliL2xldmVsXCI7XHJcbmltcG9ydCB7IExldmVsU2NlbmUgfSBmcm9tIFwiQHNjZW5lL2xldmVsXCI7XHJcbmltcG9ydCB7IExldmVsT3V0Y29tZSB9IGZyb20gXCJAc2NlbmUvbGV2ZWwvYmFubmVyXCI7XHJcbmltcG9ydCB7XHJcbiAgICBGb3JjZUxldmVsSHVkU2VsZWN0b3IsXHJcbiAgICBMZXZlbEh1ZFNlbGVjdG9yLFxyXG4gICAgUG9zaXRpb25MZXZlbEh1ZFNlbGVjdG9yLFxyXG4gICAgVmVsb2NpdHlMZXZlbEh1ZFNlbGVjdG9yLFxyXG59IGZyb20gXCJAc2NlbmUvbGV2ZWwvc2VsZWN0b3JcIjtcclxuaW1wb3J0IHsgVGlsZSB9IGZyb20gXCJAc2NlbmUvbGV2ZWwvdGlsZVwiO1xyXG5pbXBvcnQgeyBDb250cm9sQWxpZ25tZW50LCBIdWRCdXR0b24sIE1vZGVIdWRCdXR0b25Db25maWcgfSBmcm9tIFwiQHNjZW5lL3V0aWwvdWlcIjtcclxuaW1wb3J0IHsgY2xhbXAsIGRpc3QsIFZlY3RvciB9IGZyb20gXCJAdXRpbC9tYXRoXCI7XHJcbmltcG9ydCB7XHJcbiAgICBBbmdsZSxcclxuICAgIEFuZ3VsYXJWZWxvY2l0eSxcclxuICAgIERpc3RhbmNlLFxyXG4gICAgZml4ZWQsXHJcbiAgICBNYXNzLFxyXG4gICAgTWVhc3VyZW1lbnQsXHJcbiAgICBOdW1lcmljLFxyXG4gICAgVmVjdG9yTWVhc3VyZW1lbnQsXHJcbiAgICBWZWxvY2l0eSxcclxufSBmcm9tIFwiQHV0aWwvbWVhc3VyZW1lbnRcIjtcclxuXHJcbmltcG9ydCB7IFRleHQgfSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XHJcblxyXG5jb25zdCB7IG1pbiwgbWF4IH0gPSBNYXRoO1xyXG5cclxuY29uc3QgbW9kZUJ0bnMgPSB7XHJcbiAgICBbR2FtZU1vZGUuRm9yY2VdOiB7XHJcbiAgICAgICAgZnJhbWU6IDEsXHJcbiAgICAgICAgdGV4dDogXCJGXCIsXHJcbiAgICAgICAgdG9vbHRpcDogXCJGb3JjZSBNb2RlXCJcclxuICAgIH0sXHJcbiAgICBbR2FtZU1vZGUuVmVsb2NpdHldOiB7XHJcbiAgICAgICAgZnJhbWU6IDUsXHJcbiAgICAgICAgdGV4dDogXCJWXCIsXHJcbiAgICAgICAgdG9vbHRpcDogXCJWZWxvY2l0eSBNb2RlXCJcclxuICAgIH0sXHJcbiAgICBbR2FtZU1vZGUuUG9zaXRpb25dOiB7XHJcbiAgICAgICAgZnJhbWU6IDMsXHJcbiAgICAgICAgdGV4dDogXCJYXCIsXHJcbiAgICAgICAgdG9vbHRpcDogXCJQb3NpdGlvbiBNb2RlXCJcclxuICAgIH1cclxufTtcclxuXHJcbmV4cG9ydCBjbGFzcyBMZXZlbEh1ZCBleHRlbmRzIFBoYXNlci5HYW1lT2JqZWN0cy5Db250YWluZXIge1xyXG4gICAgcHVibGljIHNjZW5lOiBMZXZlbFNjZW5lO1xyXG5cclxuICAgIHByaXZhdGUgYWN0aW9uSW5mbyE6IFBoYXNlci5HYW1lT2JqZWN0cy5UZXh0O1xyXG4gICAgcHJpdmF0ZSB0YXJnZXRJbmZvITogUGhhc2VyLkdhbWVPYmplY3RzLlRleHQ7XHJcbiAgICBwcml2YXRlIHBhdXNlSW5kaWNhdG9yITogUGhhc2VyLkdhbWVPYmplY3RzLlRleHQ7XHJcbiAgICBwcml2YXRlIHRpbGVQcmV2aWV3ITogUGhhc2VyLkdhbWVPYmplY3RzLkltYWdlO1xyXG5cclxuICAgIHByaXZhdGUgZGlydHkgPSBmYWxzZTtcclxuICAgIHByaXZhdGUgcGF1c2VkID0gZmFsc2U7XHJcbiAgICBwcml2YXRlIGZyYW1lITogUGhhc2VyLkdhbWVPYmplY3RzLkdyYXBoaWNzO1xyXG4gICAgcHJpdmF0ZSBvdmVybGF5cyE6IFBoYXNlci5HYW1lT2JqZWN0cy5HcmFwaGljcztcclxuXHJcbiAgICBwcml2YXRlIHNlbGVjdG9yPzogTGV2ZWxIdWRTZWxlY3RvcjxOdW1lcmljPjtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcihzY2VuZTogTGV2ZWxTY2VuZSkge1xyXG4gICAgICAgIHN1cGVyKHNjZW5lKTtcclxuXHJcbiAgICAgICAgdGhpcy5zY2VuZSA9IHNjZW5lO1xyXG5cclxuICAgICAgICBjb25zdCBjYW0gPSBzY2VuZS5jYW1lcmFzLm1haW47XHJcbiAgICAgICAgY29uc3QgeyBoZWlnaHQ6IHB5LCB3aWR0aDogcHggfSA9IHNjZW5lLnBhZGRpbmc7XHJcblxyXG4gICAgICAgIGNvbnN0IGhlaWdodCA9IE1hdGgubWluKHNjZW5lLmJvdW5kcy5oZWlnaHQsIGNhbS5oZWlnaHQgLSBweSAqIDIpO1xyXG4gICAgICAgIGNvbnN0IHdpZHRoID0gTWF0aC5taW4oc2NlbmUuYm91bmRzLndpZHRoLCBjYW0ud2lkdGggLSBweCAqIDIpO1xyXG5cclxuICAgICAgICB0aGlzLmZyYW1lID0gc2NlbmUubWFrZS5ncmFwaGljcyh7fSlcclxuICAgICAgICAgICAgLmZpbGxTdHlsZSgweEZGRkZGRilcclxuICAgICAgICAgICAgLmZpbGxSZWN0KDAsIDAsIHB4LCBoZWlnaHQgKyBweSAqIDIpXHJcbiAgICAgICAgICAgIC5maWxsUmVjdCh3aWR0aCArIHB4LCAwLCBweCwgaGVpZ2h0ICsgcHkgKiAyKVxyXG4gICAgICAgICAgICAuZmlsbFJlY3QoMCwgMCwgd2lkdGggKyBweCAqIDIsIHB5KVxyXG4gICAgICAgICAgICAuZmlsbFJlY3QoMCwgaGVpZ2h0ICsgcHksIHdpZHRoICsgcHggKiAyLCBweSlcclxuICAgICAgICAgICAgLmxpbmVTdHlsZSg0LCAweDAwMDAwMClcclxuICAgICAgICAgICAgLnN0cm9rZVJlY3QocHgsIHB5LCB3aWR0aCwgaGVpZ2h0KTtcclxuICAgICAgICB0aGlzLmFkZCh0aGlzLmZyYW1lKTtcclxuXHJcbiAgICAgICAgdGhpcy5vdmVybGF5cyA9IHNjZW5lLm1ha2UuZ3JhcGhpY3Moe30pO1xyXG4gICAgICAgIHRoaXMuYWRkKHRoaXMub3ZlcmxheXMpO1xyXG5cclxuICAgICAgICAvLyBjdXJyZW50IGxldmVsXHJcblxyXG4gICAgICAgIHRoaXMuYWRkKG5ldyBIdWRCdXR0b24oc2NlbmUsIHtcclxuICAgICAgICAgICAgZnJhbWU6IDEsXHJcbiAgICAgICAgICAgIHNwcml0ZTogXCJjb250cm9sc1wiLFxyXG4gICAgICAgICAgICBvZmZzZXQ6IHsgeDogcHggKyAyNCwgeTogcHkgKyBoZWlnaHQgKyAzMiB9LFxyXG4gICAgICAgICAgICB0ZXh0OiBcIsKrXCIsXHJcbiAgICAgICAgICAgIHRvb2x0aXA6IFwiQmFjayB0byBMZXZlbCBTZWxlY3RcIixcclxuICAgICAgICAgICAgaGFuZGxlcjogKCkgPT4gc2NlbmUuYmFjaygpXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZChuZXcgSHVkQnV0dG9uKHNjZW5lLCB7XHJcbiAgICAgICAgICAgIGZyYW1lOiAxLFxyXG4gICAgICAgICAgICBzcHJpdGU6IFwiY29udHJvbHNcIixcclxuICAgICAgICAgICAgb2Zmc2V0OiB7IHg6IHB4ICsgMjQgKyA2NCwgeTogcHkgKyBoZWlnaHQgKyAzMiB9LFxyXG4gICAgICAgICAgICB0ZXh0OiBcIuKGulwiLFxyXG4gICAgICAgICAgICB0b29sdGlwOiBcIlJldHJ5XCIsXHJcbiAgICAgICAgICAgIGhhbmRsZXI6ICgpID0+IHNjZW5lLnNjZW5lLnJlc3RhcnQoeyBsZXZlbDogc2NlbmUubGV2ZWwgfSlcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkKHNjZW5lLm1ha2UudGV4dCh7XHJcbiAgICAgICAgICAgIHg6IHB4ICsgMjQgKyA2NCArIDY0LFxyXG4gICAgICAgICAgICB5OiBweSArIGhlaWdodCArIDE4LFxyXG4gICAgICAgICAgICB0ZXh0OiBgTGV2ZWwgJHsoc2NlbmUuc3RhdGUubGV2ZWwgYXMgTGV2ZWxEYXRhKS5pbmRleCArIDF9YCxcclxuICAgICAgICAgICAgc3R5bGU6IFRleHQuSGVhZGVyXHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICAvLyBpbmZvcm1hdGlvblxyXG4gICAgICAgIHRoaXMuYWRkKHRoaXMuYWN0aW9uSW5mbyA9IHNjZW5lLm1ha2UudGV4dCh7XHJcbiAgICAgICAgICAgIHg6IHB4ICsgd2lkdGggLyAyLFxyXG4gICAgICAgICAgICB5OiBweSArIGhlaWdodCArIDMwLFxyXG4gICAgICAgICAgICB0ZXh0OiBcIlwiLFxyXG4gICAgICAgICAgICBvcmlnaW46IDAuNSxcclxuICAgICAgICAgICAgc3R5bGU6IFRleHQuTm9ybWFsLkxpZ2h0XHJcbiAgICAgICAgfSkpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZCh0aGlzLnRhcmdldEluZm8gPSBzY2VuZS5tYWtlLnRleHQoe1xyXG4gICAgICAgICAgICB4OiBweCArIHdpZHRoLFxyXG4gICAgICAgICAgICB5OiBweSxcclxuICAgICAgICAgICAgdGV4dDogXCJcIixcclxuICAgICAgICAgICAgb3JpZ2luOiB7IHg6IDEsIHk6IDAgfSxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIndoaXRlXCIsXHJcbiAgICAgICAgICAgIHBhZGRpbmc6IDEwLFxyXG4gICAgICAgICAgICBzdHlsZTogVGV4dC5Ob3JtYWwuTGlnaHRcclxuICAgICAgICB9KSk7XHJcblxyXG4gICAgICAgIHRoaXMuYWRkKHRoaXMudGlsZVByZXZpZXcgPSBzY2VuZS5tYWtlLmltYWdlKHtcclxuICAgICAgICAgICAgYWxwaGE6IDAuNSxcclxuICAgICAgICAgICAgeDogcHggKyB3aWR0aCAtIDE1MCxcclxuICAgICAgICAgICAgeTogcHkgKyA4LFxyXG4gICAgICAgICAgICBzY2FsZTogMC43NSxcclxuICAgICAgICAgICAgb3JpZ2luOiB7IHg6IDEsIHk6IDAgfSxcclxuICAgICAgICAgICAga2V5OiBzY2VuZS5zdGF0ZS50YXJnZXQgJiYgc2NlbmUuc3RhdGUudGFyZ2V0LnRleHR1cmUua2V5LFxyXG4gICAgICAgICAgICBmcmFtZTogc2NlbmUuc3RhdGUudGFyZ2V0ICYmIHNjZW5lLnN0YXRlLnRhcmdldC5mcmFtZS5uYW1lLFxyXG4gICAgICAgICAgICB2aXNpYmxlOiBmYWxzZVxyXG4gICAgICAgIH0pKTtcclxuXHJcbiAgICAgICAgdGhpcy5hZGQodGhpcy5wYXVzZUluZGljYXRvciA9IHNjZW5lLm1ha2UudGV4dCh7XHJcbiAgICAgICAgICAgIHg6IHB4LFxyXG4gICAgICAgICAgICB5OiBweSAtIDE2LFxyXG4gICAgICAgICAgICBvcmlnaW46IHsgeDogMCwgeTogMSB9LFxyXG4gICAgICAgICAgICB0ZXh0OiBcIlBBVVNFRFwiLFxyXG4gICAgICAgICAgICBzdHlsZTogVGV4dC5IZWFkZXIsXHJcbiAgICAgICAgICAgIHZpc2libGU6IGZhbHNlXHJcbiAgICAgICAgfSkpXHJcblxyXG4gICAgICAgIGlmIChzY2VuZS5zdGF0ZS5tb2Rlcykge1xyXG4gICAgICAgICAgICAvLyBtb2RlIGJ1dHRvbnNcclxuICAgICAgICAgICAgbGV0IHggPSBzY2VuZS5wYWRkaW5nLndpZHRoICsgMjQ7XHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbW9kZSBpbiBzY2VuZS5zdGF0ZS5tb2Rlcykge1xyXG4gICAgICAgICAgICAgICAgaWYgKCFzY2VuZS5zdGF0ZS5tb2Rlcy5oYXNPd25Qcm9wZXJ0eShtb2RlKSkgY29udGludWU7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgYnRuID0gdGhpcy5tYWtlTW9kZUh1ZEJ1dHRvbihzY2VuZSwge1xyXG4gICAgICAgICAgICAgICAgICAgIHNwcml0ZTogXCJjb250cm9sc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgIG9mZnNldDogeyB4LCB5OiBweSAtIDMyIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgbW9kZSxcclxuICAgICAgICAgICAgICAgICAgICAuLi5tb2RlQnRuc1ttb2RlXVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hZGQoYnRuKTtcclxuXHJcbiAgICAgICAgICAgICAgICB4ICs9IDQ4O1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyBldmVudHMgXHJcbiAgICAgICAgc2NlbmUuaW5wdXQub24oXCJwb2ludGVybW92ZVwiLCB0aGlzLm9ucG9pbnRlcm1vdmUsIHRoaXMpO1xyXG4gICAgICAgIHNjZW5lLmlucHV0Lm9uKFwicG9pbnRlcnVwXCIsIHRoaXMub25wb2ludGVydXAsIHRoaXMpO1xyXG4gICAgICAgIHNjZW5lLmlucHV0Lm9uKFwicG9pbnRlcmRvd25cIiwgdGhpcy5vbnBvaW50ZXJkb3duLCB0aGlzKTtcclxuICAgICAgICBzY2VuZS5ldmVudHMub24oXCJ0aWxlZG93blwiLCB0aGlzLm9udGlsZWRvd24sIHRoaXMpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBkZXN0cm95KCkge1xyXG4gICAgICAgIGlmICh0aGlzLnNjZW5lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuaW5wdXQub2ZmKFwicG9pbnRlcm1vdmVcIiwgdGhpcy5vbnBvaW50ZXJtb3ZlLCB0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuaW5wdXQub2ZmKFwicG9pbnRlcnVwXCIsIHRoaXMub25wb2ludGVydXAsIHRoaXMsIGZhbHNlKTtcclxuICAgICAgICAgICAgdGhpcy5zY2VuZS5ldmVudHMub2ZmKFwidGlsZWRvd25cIiwgdGhpcy5vbnRpbGVkb3duLCB0aGlzLCBmYWxzZSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBzdXBlci5kZXN0cm95KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHVwZGF0ZSgpIHtcclxuICAgICAgICBjb25zdCBjYW0gPSB0aGlzLnNjZW5lLmNhbWVyYXMubWFpbjtcclxuICAgICAgICBjb25zdCBsZXZlbCA9IHRoaXMuc2NlbmUuc3RhdGUubGV2ZWwgYXMgTGV2ZWxEYXRhO1xyXG4gICAgICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuc2NlbmUuc3RhdGUudGFyZ2V0O1xyXG5cclxuICAgICAgICBjb25zdCB3aWR0aCA9IG1pbihjYW0ud2lkdGggLSB0aGlzLnNjZW5lLnBhZGRpbmcud2lkdGggKiAyLCB0aGlzLnNjZW5lLmJvdW5kcy53aWR0aCk7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gbWluKGNhbS5oZWlnaHQgLSB0aGlzLnNjZW5lLnBhZGRpbmcuaGVpZ2h0ICogMiwgdGhpcy5zY2VuZS5ib3VuZHMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgY29uc3QgY2xhbXBlZFggPSBjbGFtcCgwLCBjYW0uc2Nyb2xsWCwgdGhpcy5zY2VuZS5ib3VuZHMud2lkdGggLSB3aWR0aCk7XHJcbiAgICAgICAgY29uc3QgY2xhbXBlZFkgPSBjbGFtcCgwLCBjYW0uc2Nyb2xsWSwgdGhpcy5zY2VuZS5ib3VuZHMuaGVpZ2h0IC0gaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgdGhpcy5zZXRQb3NpdGlvbihjbGFtcGVkWCwgY2xhbXBlZFkpO1xyXG5cclxuICAgICAgICBpZiAodGFyZ2V0KSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJvZHkgPSB0YXJnZXQuYm9keSBhcyBNYXR0ZXIuQm9keTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0SW5mby5zZXRCYWNrZ3JvdW5kQ29sb3IoXCIjRkZGRkZGXCIpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgbSA9IG5ldyBNZWFzdXJlbWVudChib2R5Lm1hc3MsIE1hc3MuS2lsb2dyYW0pO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgeCA9IG5ldyBWZWN0b3JNZWFzdXJlbWVudCh0YXJnZXQsIERpc3RhbmNlLlBpeGVsKS50byhEaXN0YW5jZS5NZXRlcik7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB2ID0gbmV3IFZlY3Rvck1lYXN1cmVtZW50KGJvZHkudmVsb2NpdHksIFZlbG9jaXR5LlBpeGVsc1BlclN0ZXApLnRvKFZlbG9jaXR5Lk1ldGVyc1BlclNlY29uZCk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0aGV0YSA9IG5ldyBNZWFzdXJlbWVudCh0YXJnZXQuYW5nbGUsIEFuZ2xlLkRlZ3JlZSkudG8oQW5nbGUuUmFkaWFuKTtcclxuXHJcbiAgICAgICAgICAgIGNvbnN0IG9tZWdhID0gbmV3IE1lYXN1cmVtZW50KGJvZHkuYW5ndWxhclZlbG9jaXR5LCBBbmd1bGFyVmVsb2NpdHkuRGVncmVlc1BlclN0ZXApLnRvKEFuZ3VsYXJWZWxvY2l0eS5SYWRpYW5zUGVyU2Vjb25kKTtcclxuXHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0SW5mby5zZXRUZXh0KFtcclxuICAgICAgICAgICAgICAgIGZpeGVkKDEpIGBtOiAke219YCxcclxuICAgICAgICAgICAgICAgIGZpeGVkKDEpIGB4OiAke3h9YCxcclxuICAgICAgICAgICAgICAgIGZpeGVkKDEpIGB2OiAke3Z9YCxcclxuICAgICAgICAgICAgICAgIGZpeGVkKDEpIGDOuDogJHt0aGV0YX1gLFxyXG4gICAgICAgICAgICAgICAgZml4ZWQoMSkgYM+JOiAke29tZWdhfWAsXHJcbiAgICAgICAgICAgIF0pO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMudGFyZ2V0SW5mby5zZXRUZXh0KFwiTm8gc2VsZWN0aW9uXCIpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUgJiYgdGhpcy5zdGF0ZS5tb2Rlcykge1xyXG4gICAgICAgICAgICBsZXQgZmFpbGVkID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgIGZvciAoY29uc3QgbW9kZSBpbiB0aGlzLnN0YXRlLm1vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuc3RhdGUubW9kZXMuaGFzT3duUHJvcGVydHkobW9kZSkpIGNvbnRpbnVlO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLnN0YXRlLm1vZGVzW21vZGVdICE9PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgZmFpbGVkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGlmIChmYWlsZWQgJiYgdGhpcy5zdGF0ZS50aWxlcy5ldmVyeSh0aWxlID0+ICh0aWxlLmJvZHkgYXMgYW55KS5zcGVlZCA8IDAuMDUpKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gYWxsIGhvcGUgaXMgbG9zdCBvbmx5IHdoZW4gZXZlcnl0aGluZyBzdG9wcyBtb3ZpbmdcclxuICAgICAgICAgICAgICAgIHRoaXMuc2NlbmUuZW5kKExldmVsT3V0Y29tZS5GYWlsdXJlKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCF0aGlzLmRpcnR5KSByZXR1cm47XHJcblxyXG4gICAgICAgIC8vIHVwZGF0ZSBvdmVybGF5cyBpZiBuZWNlc3NhcnlcclxuICAgICAgICBpZiAodGhpcy5vdmVybGF5cykge1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXlzLmNsZWFyKCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmFjdGlvbkluZm8udGV4dCA9IFwiXCI7XHJcblxyXG4gICAgICAgICAgICBpZiAodGhpcy5zY2VuZS5zdGF0ZS50YXJnZXQgJiYgdGhpcy5zZWxlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgeyBzdGFydCwgZW5kLCBpbmZvLCBjb2xvciB9ID0gdGhpcy5zZWxlY3RvcjtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zZWxlY3Rvci5zaG93ICYmIHN0YXJ0IGluc3RhbmNlb2YgVmVjdG9yICYmIGVuZCBpbnN0YW5jZW9mIFZlY3Rvcikge1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMub3ZlcmxheXMubGluZVN0eWxlKDQsIGNvbG9yKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5cy5saW5lQmV0d2VlbihzdGFydC54LCBzdGFydC55LCBlbmQueCwgZW5kLnkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXlzLmxpbmVTdHlsZSgzLCBjb2xvciwgMC42KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5cy5saW5lQmV0d2VlbihzdGFydC54LCBzdGFydC55LCBlbmQueCwgc3RhcnQueSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5cy5saW5lQmV0d2VlbihlbmQueCwgc3RhcnQueSwgZW5kLngsIGVuZC55KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcmF5ID0gZW5kLm1pbnVzKHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwb2ludCA9IHJheS5wbHVzKDEwKS5wbHVzKHN0YXJ0KTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBkaXIgPSByYXkubm9ybWFsaXplZCgpLnRpbWVzKDEwKTtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwMSA9IFZlY3Rvci5hZGQoZW5kLCB7IHg6IGRpci55LCB5OiAtZGlyLnggfSk7XHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgcDIgPSBWZWN0b3IuYWRkKGVuZCwgeyB4OiAtZGlyLnksIHk6IGRpci54IH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLm92ZXJsYXlzLmZpbGxTdHlsZShjb2xvciwgMSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5vdmVybGF5cy5maWxsVHJpYW5nbGUocG9pbnQueCwgcG9pbnQueSwgcDIueCwgcDIueSwgcDEueCwgcDEueSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy5hY3Rpb25JbmZvLnRleHQgPSBpbmZvIHx8IFwiXCI7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuYWN0aW9uSW5mby51cGRhdGVUZXh0KCk7XHJcblxyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwYXVzZSgpIHtcclxuICAgICAgICB0aGlzLnBhdXNlZCA9IHRydWU7XHJcbiAgICAgICAgdGhpcy5zY2VuZS5tYXR0ZXIucGF1c2UoKTtcclxuICAgICAgICB0aGlzLnBhdXNlSW5kaWNhdG9yLnNldFZpc2libGUodHJ1ZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHJlc3VtZSgpIHtcclxuICAgICAgICB0aGlzLnBhdXNlZCA9IGZhbHNlO1xyXG4gICAgICAgIHRoaXMuc2NlbmUubWF0dGVyLnJlc3VtZSgpO1xyXG4gICAgICAgIHRoaXMucGF1c2VJbmRpY2F0b3Iuc2V0VmlzaWJsZShmYWxzZSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBnZXQgc3RhdGUoKSB7IHJldHVybiB0aGlzLnNjZW5lLnN0YXRlOyB9XHJcbiAgICBwcml2YXRlIGdldCBtb2RlKCkgeyByZXR1cm4gdGhpcy5zdGF0ZS5tb2RlOyB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbnBvaW50ZXJkb3duKHBvaW50ZXI6IFBoYXNlci5JbnB1dC5Qb2ludGVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlKHRoaXMuc2VsZWN0b3IgYXMgYW55IGFzIFBoYXNlci5HYW1lT2JqZWN0cy5HYW1lT2JqZWN0LCB0cnVlKTtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3RvciA9IHVuZGVmaW5lZDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICghdGhpcy5wYXVzZWQpIHtcclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS50YXJnZXQgPSBudWxsO1xyXG4gICAgICAgICAgICB0aGlzLnRpbGVQcmV2aWV3LnNldFZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdGhpcy5yZXN1bWUoKTtcclxuXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9ucG9pbnRlcnVwKHBvaW50ZXI6IFBoYXNlci5JbnB1dC5Qb2ludGVyLCB4OiBudW1iZXIsIHk6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yKSB7XHJcbiAgICAgICAgICAgIGlmIChkaXN0KHRoaXMuc2VsZWN0b3Iuc3RhcnQsIHRoaXMuc2VsZWN0b3IuZW5kKSA+IDApIHtcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0b3IuYWN0aXZhdGUoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5tb2Rlcykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLXRlbXBsYXRlXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgYnRuID0gdGhpcy5nZXRCeU5hbWUoXCJtb2RlOlwiICsgdGhpcy5zdGF0ZS5tb2RlKSBhcyBIdWRCdXR0b247XHJcbiAgICAgICAgICAgICAgICAgICAgYnRuLnNldFRleHQodGhpcy5zdGF0ZS5tb2Rlc1t0aGlzLnN0YXRlLm1vZGVdLnRvRml4ZWQoKSk7XHJcblxyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgdGhpcy5yZW1vdmUodGhpcy5zZWxlY3RvciBhcyBhbnkgYXMgUGhhc2VyLkdhbWVPYmplY3RzLkdhbWVPYmplY3QsIHRydWUpO1xyXG4gICAgICAgICAgICB0aGlzLnNlbGVjdG9yID0gdW5kZWZpbmVkO1xyXG4gICAgICAgICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvbnBvaW50ZXJtb3ZlKHBvaW50ZXI6IFBoYXNlci5JbnB1dC5Qb2ludGVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0b3IpIHtcclxuICAgICAgICAgICAgdGhpcy5zZWxlY3Rvci5tb3ZlKHBvaW50ZXIueCwgcG9pbnRlci55KTtcclxuICAgICAgICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgb250aWxlZG93bihwb2ludGVyOiBQaGFzZXIuSW5wdXQuUG9pbnRlciwgdGlsZTogVGlsZSkge1xyXG4gICAgICAgIHRoaXMuc2NlbmUuc3RhdGUudGFyZ2V0ID0gdGlsZTtcclxuICAgICAgICB0aGlzLnRpbGVQcmV2aWV3LnNldFZpc2libGUodHJ1ZSk7XHJcbiAgICAgICAgdGhpcy50aWxlUHJldmlldy5zZXRUZXh0dXJlKHRpbGUudGV4dHVyZS5rZXksIHRpbGUuZnJhbWUubmFtZSk7XHJcbiAgICAgICAgdGhpcy5wYXVzZSgpO1xyXG5cclxuICAgICAgICBpZiAoIXRpbGUuYWxsb3dDb250cm9sKSByZXR1cm47XHJcbiAgICAgICAgaWYgKHRoaXMuc3RhdGUubW9kZXMgJiYgdGhpcy5zdGF0ZS5tb2Rlc1t0aGlzLm1vZGVdIDw9IDApIHJldHVybjtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb21wbGV0ZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgc3dpdGNoICh0aGlzLnNjZW5lLnN0YXRlLm1vZGUpIHtcclxuICAgICAgICAgICAgY2FzZSBHYW1lTW9kZS5Gb3JjZTpcclxuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0b3IgPSBuZXcgRm9yY2VMZXZlbEh1ZFNlbGVjdG9yKHRoaXMsIHBvaW50ZXIpO1xyXG4gICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgIGNhc2UgR2FtZU1vZGUuVmVsb2NpdHk6XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdG9yID0gbmV3IFZlbG9jaXR5TGV2ZWxIdWRTZWxlY3Rvcih0aGlzLCBwb2ludGVyKTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICBjYXNlIEdhbWVNb2RlLlBvc2l0aW9uOlxyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RvciA9IG5ldyBQb3NpdGlvbkxldmVsSHVkU2VsZWN0b3IodGhpcywgcG9pbnRlcik7XHJcbiAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdG9yKVxyXG4gICAgICAgICAgICB0aGlzLmFkZCh0aGlzLnNlbGVjdG9yIGFzIGFueSBhcyBQaGFzZXIuR2FtZU9iamVjdHMuR2FtZU9iamVjdCk7XHJcblxyXG4gICAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIHByaXZhdGUgbWFrZU1vZGVIdWRCdXR0b24oc2NlbmU6IExldmVsU2NlbmUsIGNvbmZpZzogTW9kZUh1ZEJ1dHRvbkNvbmZpZykge1xyXG4gICAgICAgIGNvbnN0IGMgPSB7XHJcbiAgICAgICAgICAgIGFsaWduOiBDb250cm9sQWxpZ25tZW50LlJpZ2h0IHwgQ29udHJvbEFsaWdubWVudC5Cb3R0b20sXHJcbiAgICAgICAgICAgIGdyZXk6IHRydWUsXHJcbiAgICAgICAgICAgIC4uLmNvbmZpZ1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGNvbnN0IGJ0biA9IG5ldyBIdWRCdXR0b24oc2NlbmUsIGMpO1xyXG5cclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLXRlbXBsYXRlXHJcbiAgICAgICAgYnRuLnNldE5hbWUoXCJtb2RlOlwiICsgY29uZmlnLm1vZGUpO1xyXG5cclxuICAgICAgICBidG4ub24oXCJwb2ludGVyZG93blwiLCAoKSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUuc3RhdGUubW9kZSA9IGMubW9kZTtcclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgaWYgKGMuZ3JleSkge1xyXG4gICAgICAgICAgICBpZiAoc2NlbmUuc3RhdGUubW9kZSAhPT0gYy5tb2RlKVxyXG4gICAgICAgICAgICAgICAgYnRuLnNwcml0ZS5zZXRQaXBlbGluZShcImdyZXlzY2FsZVwiKTtcclxuXHJcbiAgICAgICAgICAgIGJ0bi5vbihcInBvaW50ZXJvdmVyXCIsICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGJ0bi5zcHJpdGUucmVzZXRQaXBlbGluZSgpO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGJ0bi5vbihcInBvaW50ZXJvdXRcIiwgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKGMubW9kZSAhPT0gdGhpcy5zY2VuZS5zdGF0ZS5tb2RlKVxyXG4gICAgICAgICAgICAgICAgICAgIGJ0bi5zcHJpdGUuc2V0UGlwZWxpbmUoXCJncmV5c2NhbGVcIik7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgc2NlbmUuc3RhdGUub24oXCJ1cGRhdGU6bW9kZVwiLCBtb2RlID0+IHtcclxuICAgICAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGMubW9kZSAhPT0gbW9kZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG4uc3ByaXRlLnNldFBpcGVsaW5lKFwiZ3JleXNjYWxlXCIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBidG4uc2V0VGV4dChtb2RlQnRuc1tjLm1vZGVdLnRleHQpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0aGlzLnNjZW5lLnN0YXRlLm1vZGVzKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4uc2V0VGV4dCh0aGlzLnNjZW5lLnN0YXRlLm1vZGVzW2MubW9kZV0udG9TdHJpbmcoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBidG4uc3ByaXRlLnJlc2V0UGlwZWxpbmUoKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0gY2F0Y2gge1xyXG5cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gYnRuO1xyXG4gICAgfVxyXG59IiwiaW50ZXJmYWNlIElFdmVudEVtaXR0ZXIge1xyXG4gICAgZW1pdChldmVudDogc3RyaW5nIHwgc3ltYm9sLCAuLi5hcmdzOiBhbnlbXSk6IGJvb2xlYW47XHJcbiAgICBvbihldmVudDogc3RyaW5nIHwgc3ltYm9sLCBoYW5kbGVyOiBGdW5jdGlvbiwgY29udGV4dD86IGFueSk6IHRoaXM7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBvYnNlcnZhYmxlPFQgZXh0ZW5kcyBJRXZlbnRFbWl0dGVyPih0YXJnZXQ6IGFueSwgcHJvcDogc3RyaW5nIHwgc3ltYm9sKSB7XHJcbiAgICBpZiAoIShcIl9fc2hhZG93XCIgaW4gdGFyZ2V0KSlcclxuICAgICAgICB0YXJnZXRbXCJfX3NoYWRvd1wiXSA9IHt9O1xyXG5cclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIHByb3AsIHtcclxuICAgICAgICBnZXQ6ICgpID0+IFwiX19zaGFkb3dcIiBpbiB0YXJnZXQgPyB0YXJnZXQuX19zaGFkb3dbcHJvcF0gOiB0YXJnZXRbcHJvcF0sXHJcbiAgICAgICAgc2V0OiB2YWx1ZSA9PiB7XHJcbiAgICAgICAgICAgIGlmICh0YXJnZXQuX19zaGFkb3dbcHJvcF0gPT09IHZhbHVlKVxyXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xyXG5cclxuICAgICAgICAgICAgdGFyZ2V0Ll9fc2hhZG93W3Byb3BdID0gdmFsdWU7XHJcblxyXG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLXRlbXBsYXRlXHJcbiAgICAgICAgICAgIHRhcmdldC5lbWl0KFwidXBkYXRlOlwiICsgcHJvcC50b1N0cmluZygpLCB2YWx1ZSk7XHJcbiAgICAgICAgfVxyXG4gICAgfSlcclxufSIsImltcG9ydCB7IEdhbWVNb2RlLCBMZXZlbERhdGEgfSBmcm9tIFwiQGxpYi9sZXZlbFwiO1xyXG5pbXBvcnQgeyBHb2FsIH0gZnJvbSBcIkBzY2VuZS9sZXZlbC9nb2FsXCI7XHJcbmltcG9ydCB7IFRpbGUgfSBmcm9tIFwiQHNjZW5lL2xldmVsL3RpbGVcIjtcclxuaW1wb3J0IHsgb2JzZXJ2YWJsZSB9IGZyb20gXCJAdXRpbC9vYnNlcnZhYmxlXCI7XHJcbmltcG9ydCB7IEV2ZW50RW1pdHRlciB9IGZyb20gXCJldmVudHNcIjtcclxuXHJcbmNvbnN0IHV1aWR2NCA9IHJlcXVpcmUoXCJ1dWlkL3Y0XCIpO1xyXG5cclxuXHJcbmV4cG9ydCBjbGFzcyBMZXZlbFN0YXRlIGV4dGVuZHMgRXZlbnRFbWl0dGVyIHtcclxuICAgIEBvYnNlcnZhYmxlIHB1YmxpYyBnb2FsczogR29hbFtdID0gW107XHJcbiAgICBAb2JzZXJ2YWJsZSBwdWJsaWMgdGlsZXM6IFRpbGVbXSA9IFtdO1xyXG4gICAgQG9ic2VydmFibGUgcHVibGljIGxldmVsOiBMZXZlbERhdGEgfCBudWxsID0gbnVsbDtcclxuICAgIEBvYnNlcnZhYmxlIHB1YmxpYyB0YXJnZXQ6IFRpbGUgfCBudWxsID0gbnVsbDtcclxuICAgIEBvYnNlcnZhYmxlIHB1YmxpYyB0cmFjazogVGlsZSB8IG51bGwgPSBudWxsO1xyXG4gICAgQG9ic2VydmFibGUgcHVibGljIG1vZGU6IEdhbWVNb2RlID0gR2FtZU1vZGUuRm9yY2U7XHJcbiAgICBAb2JzZXJ2YWJsZSBwdWJsaWMgY29tcGxldGVkID0gZmFsc2U7XHJcblxyXG4gICAgcHVibGljIGlkOiBzdHJpbmc7XHJcblxyXG4gICAgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgc3VwZXIoKTtcclxuICAgICAgICB0aGlzLmlkID0gdXVpZHY0KCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGdldCBtb2RlcygpIHsgcmV0dXJuIHRoaXMubGV2ZWwgPyB0aGlzLmxldmVsLm1vZGVzIDogbnVsbDsgfVxyXG59IiwiaW1wb3J0IHsgQW5ub3RhdGlvblR5cGUsIEdhbWVNb2RlLCBMZXZlbERhdGEgfSBmcm9tIFwiQGxpYi9sZXZlbFwiO1xyXG5pbXBvcnQgeyBMZXZlbEJhbm5lciwgTGV2ZWxPdXRjb21lIH0gZnJvbSBcIkBzY2VuZS9sZXZlbC9iYW5uZXJcIjtcclxuaW1wb3J0IHsgR29hbCB9IGZyb20gXCJAc2NlbmUvbGV2ZWwvZ29hbFwiO1xyXG5pbXBvcnQgeyBMZXZlbEh1ZCB9IGZyb20gXCJAc2NlbmUvbGV2ZWwvaHVkXCI7XHJcbmltcG9ydCB7IExldmVsU3RhdGUgfSBmcm9tIFwiQHNjZW5lL2xldmVsL3N0YXRlXCI7XHJcbmltcG9ydCB7IFNpemUsIFNpemVMaWtlLCBWZWN0b3IsIFZlY3Rvckxpa2UgfSBmcm9tIFwiQHV0aWwvbWF0aFwiO1xyXG5pbXBvcnQgKiBhcyBQaGFzZXIgZnJvbSBcInBoYXNlclwiO1xyXG5pbXBvcnQgKiBhcyB1dWlkdjQgZnJvbSBcInV1aWQvdjRcIjtcclxuXHJcbmltcG9ydCB7IFRleHQgfSBmcm9tIFwiLi4vLi4vY29uZmlnXCI7XHJcbmltcG9ydCB7IFRpbGUgfSBmcm9tIFwiLi90aWxlXCI7XHJcblxyXG5jb25zdCB7IHNpbiwgY29zLCByYW5kb20sIFBJLCBtYXgsIG1pbiwgYWJzIH0gPSBNYXRoO1xyXG5cclxuZXhwb3J0IGNsYXNzIExldmVsU2NlbmUgZXh0ZW5kcyBQaGFzZXIuU2NlbmUge1xyXG5cclxuICAgIHB1YmxpYyBsZXZlbCE6IG51bWJlcjtcclxuICAgIHB1YmxpYyBzdGF0ZSE6IExldmVsU3RhdGU7XHJcblxyXG4gICAgcHVibGljIGJvdW5kcyE6IFNpemVMaWtlO1xyXG4gICAgcHVibGljIHBhZGRpbmchOiBTaXplTGlrZTtcclxuICAgIHB1YmxpYyBvcmlnaW4hOiBWZWN0b3JMaWtlO1xyXG5cclxuICAgIHByaXZhdGUgaHVkITogTGV2ZWxIdWQ7XHJcbiAgICBwcml2YXRlIGJhbm5lcj86IExldmVsQmFubmVyO1xyXG4gICAgcHJpdmF0ZSBvdmVybGF5PzogUGhhc2VyLkdhbWVPYmplY3RzLlRpbGVTcHJpdGU7XHJcblxyXG4gICAgcHJpdmF0ZSB0aWxlcyE6IFBoYXNlci5HYW1lT2JqZWN0cy5Db250YWluZXI7XHJcbiAgICBwcml2YXRlIGdyaWQhOiBQaGFzZXIuR2FtZU9iamVjdHMuVGlsZVNwcml0ZTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih7IGtleTogXCJsZXZlbFwiIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbml0KGRhdGE6IGFueSkge1xyXG4gICAgICAgIGNvbnNvbGUubG9nKCdpbml0JywgZGF0YSk7XHJcblxyXG4gICAgICAgIHRoaXMubGV2ZWwgPSBkYXRhLmxldmVsO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwcmVsb2FkKCkge1xyXG4gICAgICAgIC8vIGxvYWQgdGV4dHVyZXNcclxuXHJcbiAgICAgICAgaWYgKCEoXCJ0aWxlLWxldmVsXCIgaW4gdGhpcy50ZXh0dXJlcy5saXN0KSkge1xyXG4gICAgICAgICAgICBjb25zdCBncmFwaGljcyA9IHRoaXMubWFrZS5ncmFwaGljcyh7fSwgZmFsc2UpO1xyXG5cclxuICAgICAgICAgICAgZ3JhcGhpY3NcclxuICAgICAgICAgICAgICAgIC5maWxsU3R5bGUoMHhGRkZGRkYpXHJcbiAgICAgICAgICAgICAgICAuZmlsbFJlY3QoMCwgMCwgMTI4LCAxMjgpXHJcbiAgICAgICAgICAgICAgICAubGluZVN0eWxlKDMsIDB4MDAwMDAwLCAxKVxyXG4gICAgICAgICAgICAgICAgLmxpbmVCZXR3ZWVuKDAsIDAsIDAsIDEyOClcclxuICAgICAgICAgICAgICAgIC5saW5lQmV0d2VlbigwLCAwLCAxMjgsIDApXHJcbiAgICAgICAgICAgICAgICAubGluZVN0eWxlKDEsIDB4MDAwMDAwLCAxKVxyXG4gICAgICAgICAgICAgICAgLmxpbmVCZXR3ZWVuKDMyLCAwLCAzMiwgMTI4KVxyXG4gICAgICAgICAgICAgICAgLmxpbmVCZXR3ZWVuKDAsIDMyLCAxMjgsIDMyKVxyXG4gICAgICAgICAgICAgICAgLmxpbmVCZXR3ZWVuKDY0LCAwLCA2NCwgMTI4KVxyXG4gICAgICAgICAgICAgICAgLmxpbmVCZXR3ZWVuKDAsIDY0LCAxMjgsIDY0KVxyXG4gICAgICAgICAgICAgICAgLmxpbmVCZXR3ZWVuKDk2LCAwLCA5NiwgMTI4KVxyXG4gICAgICAgICAgICAgICAgLmxpbmVCZXR3ZWVuKDAsIDk2LCAxMjgsIDk2KTtcclxuXHJcbiAgICAgICAgICAgIGdyYXBoaWNzLmdlbmVyYXRlVGV4dHVyZShcInRpbGUtbGV2ZWxcIiwgMTI4LCAxMjgpO1xyXG5cclxuICAgICAgICAgICAgZ3JhcGhpY3MuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgaWYgKCEoXCJzcHJpdGVzXCIgaW4gdGhpcy50ZXh0dXJlcy5saXN0KSlcclxuICAgICAgICAgICAgdGhpcy5sb2FkLnNwcml0ZXNoZWV0KFwic3ByaXRlc1wiLCByZXF1aXJlKFwiQHJlcy9pbWcvaXRlbS1zcHJpdGVzLnBuZ1wiKSwgeyBmcmFtZVdpZHRoOiAxMjgsIGZyYW1lSGVpZ2h0OiAxMjggfSk7XHJcblxyXG4gICAgICAgIGlmICghKFwiY29udHJvbHNcIiBpbiB0aGlzLnRleHR1cmVzLmxpc3QpKVxyXG4gICAgICAgICAgICB0aGlzLmxvYWQuc3ByaXRlc2hlZXQoXCJjb250cm9sc1wiLCByZXF1aXJlKFwiQHJlcy9pbWcvY29udHJvbC1zcHJpdGVzLnBuZ1wiKSwgeyBmcmFtZVdpZHRoOiAxMjgsIGZyYW1lSGVpZ2h0OiAxMjggfSk7XHJcblxyXG4gICAgICAgIGlmICghKFwiYmFubmVyc1wiIGluIHRoaXMudGV4dHVyZXMubGlzdCkpXHJcbiAgICAgICAgICAgIHRoaXMubG9hZC5zcHJpdGVzaGVldChcImJhbm5lcnNcIiwgcmVxdWlyZShcIkByZXMvaW1nL2Jhbm5lci1zcHJpdGVzLnBuZ1wiKSwgeyBmcmFtZVdpZHRoOiA2NDAsIGZyYW1lSGVpZ2h0OiAxMjggfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZSgpIHtcclxuICAgICAgICB0aGlzLnN0YXRlID0gbmV3IExldmVsU3RhdGUoKTtcclxuXHJcbiAgICAgICAgdGhpcy5sb2FkV29ybGQoKTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKHRvdGFsOiBudW1iZXIsIGRlbHRhOiBudW1iZXIpIHtcclxuICAgICAgICBjb25zdCBjYW0gPSB0aGlzLmNhbWVyYXMubWFpbjtcclxuXHJcbiAgICAgICAgaWYgKCFjYW0pIHJldHVybjtcclxuXHJcbiAgICAgICAgY29uc3Qgd2lkdGggPSBtaW4oY2FtLndpZHRoLCB0aGlzLmJvdW5kcy53aWR0aCk7XHJcbiAgICAgICAgY29uc3QgaGVpZ2h0ID0gbWluKGNhbS5oZWlnaHQsIHRoaXMuYm91bmRzLmhlaWdodCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHRyYWNrID0gdGhpcy5zdGF0ZS50YXJnZXQgfHwgdGhpcy5zdGF0ZS50cmFjaztcclxuXHJcbiAgICAgICAgaWYgKHRyYWNrKSB7XHJcbiAgICAgICAgICAgIGNhbS5zY3JvbGxYID0gdHJhY2sueCAtIHdpZHRoIC8gMjtcclxuICAgICAgICAgICAgY2FtLnNjcm9sbFkgPSB0cmFjay55IC0gaGVpZ2h0IC8gMjtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuaHVkLnVwZGF0ZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBiYWNrKG91dGNvbWU/OiBMZXZlbE91dGNvbWUpIHtcclxuICAgICAgICBjb25zdCB7IHNjcm9sbFgsIHNjcm9sbFksIHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuY2FtZXJhcy5tYWluO1xyXG5cclxuICAgICAgICB0aGlzLm92ZXJsYXkgPSB0aGlzLmFkZC50aWxlU3ByaXRlKHNjcm9sbFggKyB3aWR0aCAvIDIsIHNjcm9sbFkgKyBoZWlnaHQgLyAyLCB3aWR0aCwgaGVpZ2h0LCBcInRpbGUtMTZcIik7XHJcbiAgICAgICAgdGhpcy5vdmVybGF5LnNldEFscGhhKDApO1xyXG5cclxuICAgICAgICB0aGlzLnNjZW5lLnRyYW5zaXRpb24oe1xyXG4gICAgICAgICAgICB0YXJnZXQ6IFwibGV2ZWwtc2VsZWN0XCIsXHJcbiAgICAgICAgICAgIGR1cmF0aW9uOiAyMDAwLFxyXG4gICAgICAgICAgICBvblVwZGF0ZTogdGhpcy5vbnRyYW5zaXRpb251cGRhdGUsXHJcbiAgICAgICAgICAgIG1vdmVCZWxvdzogdHJ1ZSxcclxuICAgICAgICAgICAgZGF0YTogeyBsZXZlbDogdGhpcy5sZXZlbCwgb3V0Y29tZSB9XHJcbiAgICAgICAgfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGVuZChvdXRjb21lOiBMZXZlbE91dGNvbWUpIHtcclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5jb21wbGV0ZWQpIHJldHVybjtcclxuXHJcbiAgICAgICAgdGhpcy5zdGF0ZS5jb21wbGV0ZWQgPSB0cnVlO1xyXG5cclxuICAgICAgICB0aGlzLmJhbm5lciA9IG5ldyBMZXZlbEJhbm5lcih0aGlzLCBvdXRjb21lKTtcclxuICAgICAgICB0aGlzLmFkZC5leGlzdGluZyh0aGlzLmJhbm5lcik7XHJcblxyXG4gICAgICAgIGNvbnN0IHsgc2Nyb2xsWCwgc2Nyb2xsWSwgd2lkdGgsIGhlaWdodCB9ID0gdGhpcy5jYW1lcmFzLm1haW47XHJcblxyXG4gICAgICAgIHRoaXMuYmFubmVyLnNldFBvc2l0aW9uKHNjcm9sbFggKyB3aWR0aCAvIDIsIHNjcm9sbFkgKyBoZWlnaHQgLyAyKTtcclxuICAgICAgICB0aGlzLmJhbm5lci5iZWdpbigpO1xyXG5cclxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuYmFjayhvdXRjb21lKSwgMjAwMCk7XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBsb2FkV29ybGQoKSB7XHJcblxyXG4gICAgICAgIC8vIGxvYWQgdGhlIGxldmVsXHJcbiAgICAgICAgLy8gZHVwbGljYXRlIHRoZSBvYmplY3QgdG8gYXZvaWQgbW9kaWZ5aW5nIHRoZSBhY3R1YWwgaW5zdGFuY2VcclxuICAgICAgICAvLyB0aGF0IGpzb24tbG9hZGVyIGNyZWF0ZWRcclxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6cHJlZmVyLXRlbXBsYXRlXHJcbiAgICAgICAgdGhpcy5zdGF0ZS5sZXZlbCA9IEpTT04ucGFyc2UoSlNPTi5zdHJpbmdpZnkocmVxdWlyZShcIkByZXMvbGV2ZWwvXCIgKyB0aGlzLmxldmVsLnRvU3RyaW5nKCkgKyBcIi5qc29uXCIpKSkgYXMgTGV2ZWxEYXRhO1xyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IG1vZGUgaW4gdGhpcy5zdGF0ZS5sZXZlbC5tb2Rlcykge1xyXG4gICAgICAgICAgICBpZiAodGhpcy5zdGF0ZS5sZXZlbC5tb2Rlcy5oYXNPd25Qcm9wZXJ0eShtb2RlKSkge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zdGF0ZS5tb2RlID0gbW9kZSBhcyBHYW1lTW9kZTtcclxuICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICAvLyNyZWdpb24gQm91bmRhcmllc1xyXG5cclxuICAgICAgICBjb25zdCBjYW0gPSB0aGlzLmNhbWVyYXMubWFpbjtcclxuICAgICAgICBjb25zdCB7IGhlaWdodCwgd2lkdGggfSA9IGNhbTtcclxuXHJcbiAgICAgICAgdGhpcy5ib3VuZHMgPSBuZXcgU2l6ZSh0aGlzLnN0YXRlLmxldmVsLndpZHRoICogMzIsIHRoaXMuc3RhdGUubGV2ZWwuaGVpZ2h0ICogMzIpO1xyXG5cclxuICAgICAgICB0aGlzLnBhZGRpbmcgPSBuZXcgU2l6ZShcclxuICAgICAgICAgICAgbWF4KDUwLCAod2lkdGggLSB0aGlzLmJvdW5kcy53aWR0aCkgLyAyKSxcclxuICAgICAgICAgICAgbWF4KDUwLCAoaGVpZ2h0IC0gdGhpcy5ib3VuZHMuaGVpZ2h0KSAvIDIpKTtcclxuXHJcbiAgICAgICAgdGhpcy5vcmlnaW4gPSBuZXcgVmVjdG9yKHRoaXMucGFkZGluZy53aWR0aCwgdGhpcy5ib3VuZHMuaGVpZ2h0ICsgdGhpcy5wYWRkaW5nLmhlaWdodCk7XHJcblxyXG4gICAgICAgIGNhbS5zZXRCb3VuZHMoXHJcbiAgICAgICAgICAgIDAsIDAsXHJcbiAgICAgICAgICAgIHRoaXMuYm91bmRzLndpZHRoICsgdGhpcy5wYWRkaW5nLndpZHRoICogMixcclxuICAgICAgICAgICAgdGhpcy5ib3VuZHMuaGVpZ2h0ICsgdGhpcy5wYWRkaW5nLmhlaWdodCAqIDIpO1xyXG5cclxuICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgLy8jcmVnaW9uIEdyaWRcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ3JpZCkge1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQuZGVzdHJveSgpO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgdGhpcy5ncmlkID0gdGhpcy5hZGQudGlsZVNwcml0ZShcclxuICAgICAgICAgICAgdGhpcy5wYWRkaW5nLndpZHRoICsgdGhpcy5ib3VuZHMud2lkdGggLyAyLFxyXG4gICAgICAgICAgICB0aGlzLnBhZGRpbmcuaGVpZ2h0ICsgdGhpcy5ib3VuZHMuaGVpZ2h0IC8gMixcclxuICAgICAgICAgICAgdGhpcy5ib3VuZHMud2lkdGgsXHJcbiAgICAgICAgICAgIHRoaXMuYm91bmRzLmhlaWdodCxcclxuICAgICAgICAgICAgXCJ0aWxlLWxldmVsXCIpO1xyXG5cclxuICAgICAgICB0aGlzLmdyaWQuZmxpcFkgPSB0cnVlO1xyXG5cclxuICAgICAgICAvLyNlbmRyZWdpb25cclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGlsZXMpXHJcbiAgICAgICAgICAgIHRoaXMudGlsZXMuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICB0aGlzLnRpbGVzID0gdGhpcy5tYWtlLmNvbnRhaW5lcih7fSk7XHJcblxyXG4gICAgICAgIC8vI3JlZ2lvbiBIVURcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuaHVkKVxyXG4gICAgICAgICAgICB0aGlzLmh1ZC5kZXN0cm95KCk7XHJcblxyXG4gICAgICAgIHRoaXMuaHVkID0gbmV3IExldmVsSHVkKHRoaXMpO1xyXG4gICAgICAgIHRoaXMuY2hpbGRyZW4uYWRkKHRoaXMuaHVkKTtcclxuXHJcbiAgICAgICAgLy8jZW5kcmVnaW9uXHJcblxyXG4gICAgICAgIC8vI3JlZ2lvbiBQaHlzaWNzXHJcblxyXG4gICAgICAgIHRoaXMubWF0dGVyLndvcmxkLnNldEJvdW5kcyhcclxuICAgICAgICAgICAgdGhpcy5wYWRkaW5nLndpZHRoLFxyXG4gICAgICAgICAgICB0aGlzLnBhZGRpbmcuaGVpZ2h0LFxyXG4gICAgICAgICAgICB0aGlzLmJvdW5kcy53aWR0aCxcclxuICAgICAgICAgICAgdGhpcy5ib3VuZHMuaGVpZ2h0LFxyXG4gICAgICAgICAgICA1MTIpO1xyXG5cclxuICAgICAgICBjb25zdCB3YWxscyA9IHRoaXMubWF0dGVyLndvcmxkLndhbGxzIGFzIHsgbGVmdDogTWF0dGVyLkJvZHk7IHJpZ2h0OiBNYXR0ZXIuQm9keTsgdG9wOiBNYXR0ZXIuQm9keTsgYm90dG9tOiBNYXR0ZXIuQm9keSB9O1xyXG5cclxuICAgICAgICB3YWxscy50b3AucmVzdGl0dXRpb24gPSAwO1xyXG4gICAgICAgIHdhbGxzLmJvdHRvbS5yZXN0aXR1dGlvbiA9IDA7XHJcbiAgICAgICAgd2FsbHMubGVmdC5yZXN0aXR1dGlvbiA9IDA7XHJcbiAgICAgICAgd2FsbHMucmlnaHQucmVzdGl0dXRpb24gPSAwO1xyXG5cclxuICAgICAgICBpZiAodGhpcy5zdGF0ZS5sZXZlbC5wYXVzZWQpXHJcbiAgICAgICAgICAgIHRoaXMuaHVkLnBhdXNlKCk7XHJcblxyXG4gICAgICAgIC8vI2VuZHJlZ2lvblxyXG5cclxuICAgICAgICAvLyNyZWdpb24gVGlsZXNcclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHRoaXMuc3RhdGUubGV2ZWwuYW5ub3RhdGlvbnMpIHtcclxuICAgICAgICAgICAgc3dpdGNoIChkYXRhLnR5cGUpIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgQW5ub3RhdGlvblR5cGUuVGV4dDpcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB0ZXh0QW5ub3RhdGlvbiA9IHRoaXMubWFrZS50ZXh0KHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgc3R5bGU6IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLlRleHQuSGVhZGVyLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc3Ryb2tlOiBcIiNGRkZGRkZcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0cm9rZVRoaWNrbmVzczogMTBcclxuICAgICAgICAgICAgICAgICAgICAgICAgfSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGV4dDogZGF0YS50ZXh0LFxyXG4gICAgICAgICAgICAgICAgICAgICAgICB4OiB0aGlzLm9yaWdpbi54ICsgZGF0YS54ICogMzIsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHk6IHRoaXMub3JpZ2luLnkgLSBkYXRhLnkgKiAzMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgb3JpZ2luOiB7IHg6IDAsIHk6IDEgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnRpbGVzLmFkZCh0ZXh0QW5ub3RhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGludmFsaWQgYW5ub3RhdGlvblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRvbid0IHRocm93IGVycm9yIGkgZ3Vlc3NcclxuICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgZm9yIChjb25zdCBkYXRhIG9mIHRoaXMuc3RhdGUubGV2ZWwuZ29hbHMpIHtcclxuICAgICAgICAgICAgLy8gaW52ZXJ0IFkgY29vcmRpbmF0ZSBzbyBZID0gMCBpcyBhdCB0aGUgYm90dG9tXHJcbiAgICAgICAgICAgIGRhdGEueSA9IHRoaXMub3JpZ2luLnkgLyAzMiAtIGRhdGEueTtcclxuICAgICAgICAgICAgZGF0YS54ID0gdGhpcy5vcmlnaW4ueCAvIDMyICsgZGF0YS54O1xyXG5cclxuICAgICAgICAgICAgY29uc3QgZ29hbCA9IG5ldyBHb2FsKHRoaXMsIGRhdGEpO1xyXG5cclxuICAgICAgICAgICAgZ29hbC5vbihcInVwZGF0ZTpjb21wbGV0ZWRcIiwgKGNvbXBsZXRlZDogYm9vbGVhbikgPT4ge1xyXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuc3RhdGUuZ29hbHMuZXZlcnkoZyA9PiBnLmNvbXBsZXRlZCkpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLmVuZChMZXZlbE91dGNvbWUuU3VjY2Vzcyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS5nb2Fscy5wdXNoKGdvYWwpO1xyXG4gICAgICAgICAgICB0aGlzLnRpbGVzLmFkZChnb2FsKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnN0YXRlLmxldmVsLnNoYXBlcykge1xyXG4gICAgICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgdGhpcy5zdGF0ZS5sZXZlbC5zaGFwZXMpIHtcclxuICAgICAgICAgICAgICAgIC8vIGludmVydCBZIGNvb3JkaW5hdGUgc28gWSA9IDAgaXMgYXQgdGhlIGJvdHRvbVxyXG4gICAgICAgICAgICAgICAgZGF0YS55ID0gdGhpcy5vcmlnaW4ueSAvIDMyIC0gZGF0YS55O1xyXG4gICAgICAgICAgICAgICAgZGF0YS54ID0gdGhpcy5vcmlnaW4ueCAvIDMyICsgZGF0YS54O1xyXG5cclxuICAgICAgICAgICAgICAgIGxldCBbbWluWCwgbWluWSwgbWF4WCwgbWF4WV0gPSBbMCwgMCwgMCwgMF07XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgdmVydHMgPSBkYXRhLmRhdGFcclxuICAgICAgICAgICAgICAgICAgICAuc3BsaXQoXCI7XCIpLm1hcChzID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgW3gsIHldID0gcy5zcGxpdChcIixcIik7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHYgPSB7IHg6IHBhcnNlRmxvYXQoeC50cmltKCkpICogMzIsIHk6IHBhcnNlRmxvYXQoeS50cmltKCkpICogMzIgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbWluWCA9IG1pbih2LngsIG1pblgpOyBtaW5ZID0gbWluKHYueSwgbWluWSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1heFggPSBtYXgodi54LCBtYXhYKTsgbWF4WSA9IG1heCh2LnksIG1heFkpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdjtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICB2ZXJ0cy5mb3JFYWNoKHYgPT4gdi55ID0gbWF4WSAtIHYueSk7XHJcblxyXG4gICAgICAgICAgICAgICAgY29uc3QgZ3JhcGhpYyA9IHRoaXMubWFrZS5ncmFwaGljcyh7fSk7XHJcblxyXG4gICAgICAgICAgICAgICAgZ3JhcGhpYy5maWxsU3R5bGUoMHhBQUFBQUEpO1xyXG4gICAgICAgICAgICAgICAgZ3JhcGhpYy5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IHsgeCwgeSB9IG9mIHZlcnRzKSBncmFwaGljLmxpbmVUbyh4LCB5KTtcclxuXHJcbiAgICAgICAgICAgICAgICBncmFwaGljLmNsb3NlUGF0aCgpO1xyXG4gICAgICAgICAgICAgICAgZ3JhcGhpYy5maWxsUGF0aCgpO1xyXG5cclxuICAgICAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpwcmVmZXItdGVtcGxhdGVcclxuICAgICAgICAgICAgICAgIGNvbnN0IHRleCA9IFwic2hhcGUtXCIgKyB1dWlkdjQoKTtcclxuICAgICAgICAgICAgICAgIGdyYXBoaWMuZ2VuZXJhdGVUZXh0dXJlKHRleCwgbWF4WCAtIG1pblgsIG1heFkgLSBtaW5ZKTtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBzaGFwZSA9IHRoaXMubWF0dGVyLmFkZC5pbWFnZShcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnggKiAzMixcclxuICAgICAgICAgICAgICAgICAgICBkYXRhLnkgKiAzMixcclxuICAgICAgICAgICAgICAgICAgICB0ZXgsIDAsXHJcbiAgICAgICAgICAgICAgICAgICAgeyBzaGFwZTogeyB0eXBlOiBcImZyb21WZXJ0aWNlc1wiLCB2ZXJ0cyB9IH0pIGFzIGFueTtcclxuXHJcbiAgICAgICAgICAgICAgICBzaGFwZS5vcmlnaW5YID0gc2hhcGUub3JpZ2luWSA9IDAuNTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoZGF0YS5waW4pIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCB7IHgsIHkgfSA9IFZlY3Rvci5hZGQodGhpcy5vcmlnaW4sIFZlY3Rvci5tdWx0KGRhdGEucGluLCB7IHg6IDMyLCB5OiAtMzIgfSkpO1xyXG4gICAgICAgICAgICAgICAgICAgIHRoaXMubWF0dGVyLmFkZC53b3JsZENvbnN0cmFpbnQoXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNoYXBlLmJvZHksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIDAsIDAuNyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgeyBwb2ludEE6IHsgeCwgeSB9IH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIGlmIChkYXRhLnN0YXRpYylcclxuICAgICAgICAgICAgICAgICAgICBzaGFwZS5zZXRTdGF0aWModHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgdGhpcy50aWxlcy5hZGQoc2hhcGUpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGNvbnN0IGRhdGEgb2YgdGhpcy5zdGF0ZS5sZXZlbC50aWxlcykge1xyXG4gICAgICAgICAgICAvLyBpbnZlcnQgWSBjb29yZGluYXRlIHNvIFkgPSAwIGlzIGF0IHRoZSBib3R0b21cclxuICAgICAgICAgICAgZGF0YS55ID0gdGhpcy5vcmlnaW4ueSAvIDMyIC0gZGF0YS55O1xyXG4gICAgICAgICAgICBkYXRhLnggPSB0aGlzLm9yaWdpbi54IC8gMzIgKyBkYXRhLng7XHJcblxyXG4gICAgICAgICAgICBjb25zdCB0aWxlID0gbmV3IFRpbGUodGhpcywgZGF0YSk7XHJcblxyXG4gICAgICAgICAgICB0aWxlLm9uKFwicG9pbnRlcmRvd25cIiwgKHBvaW50ZXI6IFBoYXNlci5JbnB1dC5Qb2ludGVyKSA9PiB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmV2ZW50cy5lbWl0KFwidGlsZWRvd25cIiwgcG9pbnRlciwgdGlsZSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgaWYgKGRhdGEucGluKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zdCB7IHgsIHkgfSA9IFZlY3Rvci5hZGQodGhpcy5vcmlnaW4sIFZlY3Rvci5tdWx0KGRhdGEucGluLCB7IHg6IDMyLCB5OiAtMzIgfSkpO1xyXG4gICAgICAgICAgICAgICAgdGhpcy5tYXR0ZXIuYWRkLndvcmxkQ29uc3RyYWludChcclxuICAgICAgICAgICAgICAgICAgICB0aWxlLmJvZHkgYXMgTWF0dGVySlMuQm9keSxcclxuICAgICAgICAgICAgICAgICAgICAwLCAwLjcsXHJcbiAgICAgICAgICAgICAgICAgICAgeyBwb2ludEE6IHsgeCwgeSB9IH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoZGF0YS50cmFjaylcclxuICAgICAgICAgICAgICAgIHRoaXMuc3RhdGUudHJhY2sgPSB0aWxlO1xyXG5cclxuICAgICAgICAgICAgdGhpcy5zdGF0ZS50aWxlcy5wdXNoKHRpbGUpO1xyXG4gICAgICAgICAgICB0aGlzLnRpbGVzLmFkZCh0aWxlKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8jZW5kcmVnaW9uXHJcbiAgICB9XHJcblxyXG5cclxuXHJcbiAgICBwcml2YXRlIG9udHJhbnNpdGlvbnVwZGF0ZShwcm9ncmVzczogbnVtYmVyKSB7XHJcbiAgICAgICAgaWYgKHRoaXMub3ZlcmxheSkge1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXkuc2V0QWxwaGEocHJvZ3Jlc3MgKiAxLjIpO1xyXG5cclxuICAgICAgICAgICAgY29uc3Qgb2Zmc2V0ID0gMTAwIC8gKHByb2dyZXNzICogcHJvZ3Jlc3MpO1xyXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXkuc2V0VGlsZVBvc2l0aW9uKC1vZmZzZXQsIC1vZmZzZXQpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufSIsImltcG9ydCB7IEJ1dHRvbiB9IGZyb20gXCJAY29udHJvbC9idXR0b25cIjtcclxuaW1wb3J0IHsgTGV2ZWxPdXRjb21lIH0gZnJvbSBcIkBzY2VuZS9sZXZlbC9iYW5uZXJcIjtcclxuaW1wb3J0ICogYXMgUGhhc2VyIGZyb20gXCJwaGFzZXJcIjtcclxuXHJcbmNvbnN0IHsgc2luLCBjb3MsIHJhbmRvbSwgUEksIG1heCB9ID0gTWF0aDtcclxuXHJcbmV4cG9ydCBjbGFzcyBMZXZlbFNlbGVjdFNjZW5lIGV4dGVuZHMgUGhhc2VyLlNjZW5lIHtcclxuXHJcbiAgICBwcml2YXRlIGJ0bkdyaWQhOiBQaGFzZXIuR2FtZU9iamVjdHMuQ29udGFpbmVyO1xyXG4gICAgcHJpdmF0ZSB0aXRsZSE6IFBoYXNlci5HYW1lT2JqZWN0cy5UZXh0O1xyXG4gICAgcHJpdmF0ZSBncmlkITogUGhhc2VyLkdhbWVPYmplY3RzLlRpbGVTcHJpdGU7XHJcbiAgICBwcml2YXRlIHNwZWVkOiBudW1iZXIgPSAwLjA1O1xyXG4gICAgcHJpdmF0ZSBzaXplID0geyByb3dzOiAzLCBjb2xzOiA0IH07XHJcbiAgICBwcml2YXRlIGRpc2FibGVkOiB7IFtpbmRleDogbnVtYmVyXTogYm9vbGVhbiB9ID0ge307XHJcblxyXG4gICAgcHJpdmF0ZSBpbml0aWFsaXplZCA9IGZhbHNlO1xyXG5cclxuICAgIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgICAgIHN1cGVyKHsga2V5OiBcImxldmVsLXNlbGVjdFwiIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBpbml0KGRhdGE6IGFueSkge1xyXG4gICAgICAgIGlmIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGxldmVsOiBudW1iZXIgPSBkYXRhLmxldmVsO1xyXG4gICAgICAgICAgICBjb25zdCBvdXRjb21lOiBMZXZlbE91dGNvbWUgfCB1bmRlZmluZWQgPSBkYXRhLm91dGNvbWU7XHJcblxyXG4gICAgICAgICAgICBpZiAodHlwZW9mIGxldmVsICE9PSBcInVuZGVmaW5lZFwiICYmIG91dGNvbWUgPT09IExldmVsT3V0Y29tZS5GYWlsdXJlKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmRpc2FibGVkW2xldmVsXSA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHRoaXMuZGlzYWJsZWRbbGV2ZWxdID0gZmFsc2UsIDYwXzAwMCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIHByZWxvYWQoKSB7XHJcbiAgICAgICAgdGhpcy5ldmVudHMub24oXCJ0cmFuc2l0aW9uY29tcGxldGVcIiwgdGhpcy50cmFuc2l0aW9uY29tcGxldGUsIHRoaXMpO1xyXG5cclxuICAgICAgICB0aGlzLmxvYWQuc3ByaXRlc2hlZXQoXCJjb250cm9sc1wiLCByZXF1aXJlKFwiQHJlcy9pbWcvY29udHJvbC1zcHJpdGVzLnBuZ1wiKSwgeyBmcmFtZVdpZHRoOiAxMjgsIGZyYW1lSGVpZ2h0OiAxMjggfSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZSgpIHtcclxuICAgICAgICBpZiAodGhpcy5pbml0aWFsaXplZCkgcmV0dXJuO1xyXG5cclxuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuY2FtZXJhcy5tYWluO1xyXG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzIGFzIGFueTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMuZ3JpZClcclxuICAgICAgICAgICAgdGhpcy5ncmlkLmRlc3Ryb3koKTtcclxuXHJcbiAgICAgICAgdGhpcy5ncmlkID0gdGhpcy5hZGQudGlsZVNwcml0ZSh3aWR0aCAvIDIsIGhlaWdodCAvIDIsIHdpZHRoLCBoZWlnaHQsIFwidGlsZS0xNlwiKTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGl0bGUpXHJcbiAgICAgICAgICAgIHRoaXMudGl0bGUuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICB0aGlzLnRpdGxlID1cclxuICAgICAgICAgICAgdGhpcy5hZGQudGV4dCgyMCwgLTUwLCBcIkNob29zZSBhIGxldmVsXCIpXHJcbiAgICAgICAgICAgICAgICAuc2V0Rm9udEZhbWlseShcIk1vbnRzZXJyYXQgQmxhY2tcIilcclxuICAgICAgICAgICAgICAgIC5zZXRGb250U2l6ZSgzMilcclxuICAgICAgICAgICAgICAgIC5zZXRGaWxsKFwiI0VFMDAwMFwiKVxyXG4gICAgICAgICAgICAgICAgLnNldFN0cm9rZShcIiNGRkZGRkZcIiwgMTApXHJcbiAgICAgICAgICAgICAgICAuc2V0U2hhZG93KDAsIDAsIFwiI0FBQUFBQVwiLCA2LCB0cnVlLCBmYWxzZSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJ0bkdyaWQpXHJcbiAgICAgICAgICAgIHRoaXMuYnRuR3JpZC5kZXN0cm95KCk7XHJcblxyXG4gICAgICAgIGNvbnN0IGJ1dHRvbnM6IFBoYXNlci5HYW1lT2JqZWN0cy5HYW1lT2JqZWN0W10gPSBbXTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgdGhpcy5zaXplLnJvd3M7IHJvdysrKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGNvbCA9IDA7IGNvbCA8IHRoaXMuc2l6ZS5jb2xzOyBjb2wrKykge1xyXG4gICAgICAgICAgICAgICAgY29uc3QgbGV2ZWwgPSByb3cgKiB0aGlzLnNpemUuY29scyArIGNvbDtcclxuXHJcbiAgICAgICAgICAgICAgICBjb25zdCBidXR0b24gPSBuZXcgQnV0dG9uKHRoaXMsIHtcclxuICAgICAgICAgICAgICAgICAgICB0ZXh0OiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHN0eWxlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb250RmFtaWx5OiBcIk1vbnRzZXJyYXQgQmxhY2tcIixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvbnRTaXplOiAzMixcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZpbGw6IFwiI0ZGRkZGRlwiXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRleHQ6IChsZXZlbCArIDEpLnRvU3RyaW5nKDEwKVxyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgc3ByaXRlOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtleTogXCJjb250cm9sc1wiLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFtZTogMFxyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGJ1dHRvbi54ID0gKGNvbCAtIDIpIC8gMyAqIDAuNDUgKiB3aWR0aDtcclxuICAgICAgICAgICAgICAgIGJ1dHRvbi55ID0gKHJvdyAtIDEpIC8gMiAqIDAuNDUgKiBoZWlnaHQ7XHJcbiAgICAgICAgICAgICAgICBidXR0b24uYWxwaGEgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVkW2xldmVsXSkge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5zcHJpdGUuc2V0UGlwZWxpbmUoXCJncmV5c2NhbGVcIik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5vbigncG9pbnRlcnVwJywgKCkgPT4ge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLmdvdG8obGV2ZWwpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgYnV0dG9ucy5wdXNoKGJ1dHRvbik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIHRoaXMuYnRuR3JpZCA9IHRoaXMuYWRkLmNvbnRhaW5lcih3aWR0aCAvIDIsIGhlaWdodCAvIDIsIGJ1dHRvbnMpO1xyXG5cclxuICAgICAgICB0aGlzLmlucHV0LmtleWJvYXJkLm9uKFwia2V5ZG93bl9UXCIsICgpID0+IHtcclxuICAgICAgICAgICAgdGhpcy5nb3RvKDE1KTtcclxuICAgICAgICB9KVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBnb3RvKGxldmVsOiBudW1iZXIpIHtcclxuICAgICAgICB2YXIgdHJhbnNpdGlvbiA9IHRoaXMuc2NlbmUudHJhbnNpdGlvbih7XHJcbiAgICAgICAgICAgIHRhcmdldDogJ2xldmVsJyxcclxuICAgICAgICAgICAgZHVyYXRpb246IDEwMDAsXHJcbiAgICAgICAgICAgIG9uVXBkYXRlOiB0aGlzLm91dHJvLFxyXG4gICAgICAgICAgICBtb3ZlQmVsb3c6IHRydWUsXHJcbiAgICAgICAgICAgIGRhdGE6IHsgbGV2ZWwgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyB1cGRhdGUodG90YWw6IG51bWJlciwgZGVsdGE6IG51bWJlcikge1xyXG4gICAgICAgIGlmICh0aGlzLmdyaWQpIHtcclxuICAgICAgICAgICAgdGhpcy5ncmlkLnRpbGVQb3NpdGlvblggPSB0aGlzLnNwZWVkICogdG90YWw7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC50aWxlUG9zaXRpb25ZID0gdGhpcy5zcGVlZCAqIHRvdGFsO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdHJhbnNpdGlvbmNvbXBsZXRlKCkge1xyXG4gICAgICAgIHRoaXMudHdlZW5zLmFkZCh7XHJcbiAgICAgICAgICAgIHRhcmdldHM6IHRoaXMudGl0bGUsXHJcbiAgICAgICAgICAgIHk6IDIwLFxyXG4gICAgICAgICAgICBkdXJhdGlvbjogMTUwMCxcclxuICAgICAgICAgICAgZWFzZTogJ0VsYXN0aWMnLFxyXG4gICAgICAgICAgICBlYXNlUGFyYW1zOiBbMS4xLCAwLjVdXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmJ0bkdyaWQpIHtcclxuICAgICAgICAgICAgZm9yIChsZXQgcm93ID0gMDsgcm93IDwgdGhpcy5zaXplLnJvd3M7IHJvdysrKSB7XHJcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBjb2wgPSAwOyBjb2wgPCB0aGlzLnNpemUuY29sczsgY29sKyspIHtcclxuICAgICAgICAgICAgICAgICAgICBjb25zdCBidG4gPSB0aGlzLmJ0bkdyaWQuZ2V0QXQocm93ICogdGhpcy5zaXplLmNvbHMgKyBjb2wpIGFzIEJ1dHRvbjtcclxuICAgICAgICAgICAgICAgICAgICBidG4uYWxwaGEgPSAwO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnR3ZWVucy5hZGQoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB0YXJnZXRzOiBidG4sXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFscGhhOiAxLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkdXJhdGlvbjogMjUwLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBkZWxheTogY29sICogMTI1XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcHJpdmF0ZSBvdXRybyhwcm9ncmVzczogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zcGVlZCA9IDAuMDUgKyBwcm9ncmVzcyAqIHByb2dyZXNzICogMC4xNTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMudGl0bGUpIHRoaXMudGl0bGUuYWxwaGEgPSBtYXgoMCwgMSAtIHByb2dyZXNzICogMS43KTtcclxuICAgICAgICBpZiAodGhpcy5idG5HcmlkKSB0aGlzLmJ0bkdyaWQuYWxwaGEgPSBtYXgoMCwgMSAtIHByb2dyZXNzICogMS43KTtcclxuICAgIH1cclxufSIsImltcG9ydCAqIGFzIFBoYXNlciBmcm9tIFwicGhhc2VyXCI7XHJcblxyXG5jb25zdCB7IHNpbiwgY29zLCByYW5kb20sIFBJLCBtYXggfSA9IE1hdGg7XHJcblxyXG5leHBvcnQgY2xhc3MgVGl0bGVTY2VuZSBleHRlbmRzIFBoYXNlci5TY2VuZSB7XHJcblxyXG4gICAgcHJpdmF0ZSBpbnN0cnVjdGlvbnM6IFBoYXNlci5HYW1lT2JqZWN0cy5UZXh0IHwgdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBsb2dvOiBQaGFzZXIuR2FtZU9iamVjdHMuSW1hZ2UgfCB1bmRlZmluZWQ7XHJcbiAgICBwcml2YXRlIGdyaWQ6IFBoYXNlci5HYW1lT2JqZWN0cy5UaWxlU3ByaXRlIHwgdW5kZWZpbmVkO1xyXG4gICAgcHJpdmF0ZSBzcGVlZDogbnVtYmVyID0gMC4wNTtcclxuXHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih7IGtleTogXCJ0aXRsZVwiIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBwcmVsb2FkKCkge1xyXG4gICAgICAgIGNvbnN0IGdhbWUgPSB0aGlzLnN5cy5nYW1lO1xyXG5cclxuICAgICAgICBjb25zdCBncmFwaGljcyA9IHRoaXMubWFrZS5ncmFwaGljcyh7fSwgZmFsc2UpO1xyXG5cclxuICAgICAgICBncmFwaGljc1xyXG4gICAgICAgICAgICAuZmlsbFN0eWxlKDB4RkZGRkZGKVxyXG4gICAgICAgICAgICAuZmlsbFJlY3QoMCwgMCwgODAsIDgwKVxyXG4gICAgICAgICAgICAubGluZVN0eWxlKDEsIDB4MDAwMDAwLCAxKVxyXG4gICAgICAgICAgICAubGluZUJldHdlZW4oMCwgMCwgMCwgMTYpXHJcbiAgICAgICAgICAgIC5saW5lQmV0d2VlbigwLCAwLCAxNiwgMCk7XHJcblxyXG4gICAgICAgIGdyYXBoaWNzLmdlbmVyYXRlVGV4dHVyZShcInRpbGUtMTZcIiwgMTYsIDE2KTtcclxuXHJcbiAgICAgICAgZ3JhcGhpY3MuZGVzdHJveSgpO1xyXG5cclxuICAgICAgICB0aGlzLmxvYWQuaW1hZ2UoXCJsb2dvXCIsIHJlcXVpcmUoXCJAcmVzL2ltZy9sb2dvLXN0eWxpemVkLnBuZ1wiKSk7XHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGNyZWF0ZSgpIHtcclxuICAgICAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuY2FtZXJhcy5tYWluO1xyXG5cclxuICAgICAgICB0aGlzLmdyaWQgPSB0aGlzLmFkZC50aWxlU3ByaXRlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgd2lkdGgsIGhlaWdodCwgXCJ0aWxlLTE2XCIpO1xyXG4gICAgICAgIHRoaXMubG9nbyA9IHRoaXMuYWRkLmltYWdlKHdpZHRoIC8gMiwgaGVpZ2h0IC8gMiwgXCJsb2dvXCIpO1xyXG4gICAgICAgIHRoaXMubG9nby5zZXRQaXBlbGluZShcImFkZC1jb2xvclwiKTtcclxuXHJcbiAgICAgICAgdGhpcy5pbnN0cnVjdGlvbnMgPSB0aGlzLmFkZFxyXG4gICAgICAgICAgICAudGV4dCh3aWR0aCAvIDIsIGhlaWdodCAvIDIgKyAxMDAsIFwiQ2xpY2sgYW55d2hlcmUgdG8gc3RhcnQhXCIpXHJcbiAgICAgICAgICAgIC5zZXRGb250RmFtaWx5KFwiTW9udHNlcnJhdCBCbGFja1wiKVxyXG4gICAgICAgICAgICAuc2V0Rm9udFNpemUoMzIpXHJcbiAgICAgICAgICAgIC5zZXRGaWxsKFwiI0VFMDAwMFwiKVxyXG4gICAgICAgICAgICAuc2V0U3Ryb2tlKFwiI0ZGRkZGRlwiLCAxMClcclxuICAgICAgICAgICAgLnNldFNoYWRvdygwLCAwLCBcIiNBQUFBQUFcIiwgNiwgdHJ1ZSwgZmFsc2UpO1xyXG4gICAgICAgIHRoaXMuaW5zdHJ1Y3Rpb25zLnNldE9yaWdpbigwLjUpO1xyXG5cclxuICAgICAgICB0aGlzLmFkZFxyXG4gICAgICAgICAgICAudGV4dCgxMCwgaGVpZ2h0IC0gMTAsIFwiwqkgMjAxOCBJYml5ZW1pIEFiaW9kdW5cIilcclxuICAgICAgICAgICAgLnNldEZvbnRGYW1pbHkoXCJzYW5zLXNlcmlmXCIpXHJcbiAgICAgICAgICAgIC5zZXRGaWxsKFwiIzAwMDAwMFwiKVxyXG4gICAgICAgICAgICAuc2V0Rm9udFNpemUoMTIpXHJcbiAgICAgICAgICAgIC5zZXRTdHJva2UoXCIjRkZGRkZGXCIsIDEwKVxyXG4gICAgICAgICAgICAuc2V0T3JpZ2luKDAsIDEpO1xyXG5cclxuICAgICAgICB0aGlzLmlucHV0Lm9uY2UoJ3BvaW50ZXJ1cCcsIChldmVudDogYW55KSA9PiB7XHJcbiAgICAgICAgICAgIHRoaXMuc2NlbmUudHJhbnNpdGlvbih7XHJcbiAgICAgICAgICAgICAgICB0YXJnZXQ6IFwibGV2ZWwtc2VsZWN0XCIsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMTAwMCxcclxuICAgICAgICAgICAgICAgIG9uVXBkYXRlOiB0aGlzLm9udHJhbnNpdGlvbnVwZGF0ZSxcclxuICAgICAgICAgICAgICAgIG1vdmVCZWxvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFsbG93SW5wdXQ6IGZhbHNlLFxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgdXBkYXRlKHRvdGFsOiBudW1iZXIsIGRlbHRhOiBudW1iZXIpIHtcclxuICAgICAgICBpZiAodGhpcy5ncmlkKSB7XHJcbiAgICAgICAgICAgIHRoaXMuZ3JpZC50aWxlUG9zaXRpb25YID0gdGhpcy5zcGVlZCAqIHRvdGFsO1xyXG4gICAgICAgICAgICB0aGlzLmdyaWQudGlsZVBvc2l0aW9uWSA9IHRoaXMuc3BlZWQgKiB0b3RhbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmICh0aGlzLmxvZ28pIHtcclxuICAgICAgICAgICAgY29uc3QgcGhhc2UgPSAoc2luKHRvdGFsIC8gNTAwICogUEkpICsgMSkgLyA4O1xyXG4gICAgICAgICAgICAvLyB0aGlzLmxvZ28ucGlwZWxpbmUuc2V0RmxvYXQ0KFwidUludGVuc2l0eVwiLCBwaGFzZSwgMCwgMCwgcGhhc2UpO1xyXG4gICAgICAgICAgICB0aGlzLmxvZ28uc2V0T3JpZ2luKDAuNSArIHJhbmRvbSgpIC8gMTAwIC0gMC4wMDUsIDAuNSArIHJhbmRvbSgpIC8gMTAwIC0gMC4wMDUpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwcml2YXRlIG9udHJhbnNpdGlvbnVwZGF0ZShwcm9ncmVzczogbnVtYmVyKSB7XHJcbiAgICAgICAgdGhpcy5zcGVlZCA9IDAuMDUgKyBwcm9ncmVzcyAqIHByb2dyZXNzICogMC4xNTtcclxuXHJcbiAgICAgICAgaWYgKHRoaXMubG9nbykgdGhpcy5sb2dvLmFscGhhID0gbWF4KDAsIDEgLSBwcm9ncmVzcyAqIDEuNyk7XHJcbiAgICAgICAgaWYgKHRoaXMuaW5zdHJ1Y3Rpb25zKSB0aGlzLmluc3RydWN0aW9ucy5hbHBoYSA9IG1heCgwLCAxIC0gcHJvZ3Jlc3MgKiAxLjcpO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0ICogYXMgUGhhc2VyIGZyb20gXCJwaGFzZXJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBHcmV5c2NhbGVQaXBlbGluZSBleHRlbmRzIFBoYXNlci5SZW5kZXJlci5XZWJHTC5QaXBlbGluZXMuVGV4dHVyZVRpbnRQaXBlbGluZSB7XHJcblxyXG4gICAgY29uc3RydWN0b3IoZ2FtZTogUGhhc2VyLkdhbWUpIHtcclxuICAgICAgICBjb25zdCBmcmFnU2hhZGVyID0gcmVxdWlyZShcIkByZXMvc2hhZGVyL2dyZXlcIik7XHJcbiAgICAgICAgc3VwZXIoe1xyXG4gICAgICAgICAgICBnYW1lLFxyXG4gICAgICAgICAgICByZW5kZXJlcjogZ2FtZS5yZW5kZXJlcixcclxuICAgICAgICAgICAgZnJhZ1NoYWRlclxyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59IiwiaW1wb3J0IHsgTGV2ZWxTY2VuZSB9IGZyb20gXCJAc2NlbmUvbGV2ZWxcIjtcclxuaW1wb3J0IHsgTGV2ZWxTZWxlY3RTY2VuZSB9IGZyb20gXCJAc2NlbmUvc2VsZWN0XCI7XHJcbmltcG9ydCB7IFRpdGxlU2NlbmUgfSBmcm9tIFwiQHNjZW5lL3RpdGxlXCI7XHJcbmltcG9ydCB7IEdyZXlzY2FsZVBpcGVsaW5lIH0gZnJvbSBcIkBzaGFkZXIvZ3JleXNjYWxlXCI7XHJcbmltcG9ydCAqIGFzIFBoYXNlciBmcm9tIFwicGhhc2VyXCI7XHJcblxyXG5jbGFzcyBUb3VyRGVGb3JjZUdhbWUgZXh0ZW5kcyBQaGFzZXIuR2FtZSB7XHJcbiAgICBjb25zdHJ1Y3RvcigpIHtcclxuICAgICAgICBzdXBlcih7XHJcbiAgICAgICAgICAgIGhlaWdodDogd2luZG93LmlubmVySGVpZ2h0LFxyXG4gICAgICAgICAgICB3aWR0aDogd2luZG93LmlubmVyV2lkdGgsXHJcbiAgICAgICAgICAgIHR5cGU6IFBoYXNlci5XRUJHTCxcclxuICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiBcIiNGRkZGRkZcIixcclxuICAgICAgICAgICAgcGh5c2ljczogeyBkZWZhdWx0OiBcIm1hdHRlclwiLCBtYXR0ZXI6IHsgZ3Jhdml0eTogeyB5OiAwLjk4MSB9IH0sIGRlYnVnOiB0cnVlIH0sXHJcbiAgICAgICAgICAgIHNjZW5lOiBbVGl0bGVTY2VuZSwgTGV2ZWxTZWxlY3RTY2VuZSwgTGV2ZWxTY2VuZV1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgY29uc3QgcmVuZGVyZXIgPSB0aGlzLnJlbmRlcmVyIGFzIFBoYXNlci5SZW5kZXJlci5XZWJHTC5XZWJHTFJlbmRlcmVyO1xyXG4gICAgICAgIHJlbmRlcmVyLmFkZFBpcGVsaW5lKFwiZ3JleXNjYWxlXCIsIG5ldyBHcmV5c2NhbGVQaXBlbGluZSh0aGlzKSk7XHJcbiAgICB9XHJcbn1cclxuXHJcbndpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLCAoKSA9PiB7XHJcbiAgICBsZXQgZ2FtZSA9IG5ldyBUb3VyRGVGb3JjZUdhbWUoKTtcclxufSk7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///4\n')},function(module,exports){eval('module.exports = "precision mediump float;\\r\\n\\r\\nuniform sampler2D uMainSampler;\\r\\nvarying vec2 outTexCoord;\\r\\n\\r\\nvoid main(void) {\\r\\n\\tvec4 color = texture2D(uMainSampler, outTexCoord);\\r\\n\\tfloat gray = dot(color.rgb, vec3(0.299, 0.587, 0.114));\\r\\n\\tgl_FragColor = vec4(vec3(gray), color.a);\\r\\n}"//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL3NoYWRlci9ncmV5Lmdsc2w/MTlhYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwwQ0FBMEMsdUNBQXVDLDZCQUE2Qix5QkFBeUIsd0RBQXdELDZEQUE2RCwrQ0FBK0MsS0FBSyIsImZpbGUiOiI1LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcInByZWNpc2lvbiBtZWRpdW1wIGZsb2F0O1xcclxcblxcclxcbnVuaWZvcm0gc2FtcGxlcjJEIHVNYWluU2FtcGxlcjtcXHJcXG52YXJ5aW5nIHZlYzIgb3V0VGV4Q29vcmQ7XFxyXFxuXFxyXFxudm9pZCBtYWluKHZvaWQpIHtcXHJcXG5cXHR2ZWM0IGNvbG9yID0gdGV4dHVyZTJEKHVNYWluU2FtcGxlciwgb3V0VGV4Q29vcmQpO1xcclxcblxcdGZsb2F0IGdyYXkgPSBkb3QoY29sb3IucmdiLCB2ZWMzKDAuMjk5LCAwLjU4NywgMC4xMTQpKTtcXHJcXG5cXHRnbF9GcmFnQ29sb3IgPSB2ZWM0KHZlYzMoZ3JheSksIGNvbG9yLmEpO1xcclxcbn1cIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///5\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "src/res/img/logo-stylized.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2ltZy9sb2dvLXN0eWxpemVkLnBuZz8zZTNmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjYuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzcmMvcmVzL2ltZy9sb2dvLXN0eWxpemVkLnBuZ1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///6\n')},function(module){eval('module.exports = {"index":9,"width":64,"height":8,"time":30,"paused":true,"modes":{"velocity":2},"annotations":[{"type":"text","text":"Now there\'s friction :) μ(k) = 0.36532\\nEach square is 0.32 meters, if you haven\'t noticed","x":1,"y":5}],"tiles":[{"x":4,"y":2,"type":"plastic","friction":0.024948919364221,"control":true}],"goals":[{"x":37,"y":2,"width":4,"height":4,"type":"required","objectives":[{"type":"velocity","target":0}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI3LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///7\n')},function(module){eval('module.exports = {"index":8,"width":10,"height":36,"time":30,"paused":true,"modes":{"force":5,"velocity":5},"annotations":[{"type":"text","text":"Can you get the styrofoam to peak in this goal?","x":1,"y":14}],"tiles":[{"x":5,"y":6,"type":"plastic","control":false},{"x":5,"y":2,"type":"wood","control":true,"track":true}],"goals":[{"x":5,"y":12,"width":10,"height":4,"type":"required","objectives":[{"type":"type","target":"plastic"},{"type":"velocity","target":0}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI4LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///8\n')},function(module){eval('module.exports = {"index":7,"width":18,"height":18,"time":30,"paused":true,"modes":{"force":10},"annotations":[{"type":"text","text":"Make that stop spinning.","x":1,"y":14}],"tiles":[{"x":9,"y":9,"type":"aluminum","control":true,"rotation":true,"angularVelocity":0.5,"pin":{"x":9,"y":9}}],"goals":[{"x":9,"y":9,"width":6,"height":6,"type":"required","objectives":[{"type":"angular-velocity","target":0}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiI5LmpzIiwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///9\n')},function(module){eval('module.exports = {"index":6,"width":36,"height":18,"time":30,"paused":true,"modes":{"velocity":1},"annotations":[{"type":"text","text":"Can you get these two crates to land on top of each other?","x":5,"y":6}],"tiles":[{"x":2,"y":2,"type":"aluminum","control":true,"rotation":false},{"x":2,"y":6,"type":"aluminum","control":false,"rotation":false,"velocity":{"x":4,"y":-8}}],"goals":[{"x":33,"y":6,"width":6,"height":4,"type":"required","objectives":[{"type":"velocity","target":0}]},{"x":33,"y":2,"width":6,"height":4,"type":"required","objectives":[{"type":"velocity","target":0}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxMC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///10\n')},function(module){eval('module.exports = {"index":5,"width":36,"height":18,"time":30,"paused":true,"modes":{"velocity":1},"annotations":[{"type":"text","text":"↑ This level starts out paused.","x":1,"y":16},{"type":"text","text":"Click on the aluminum crate to see its velocity.","x":5,"y":6}],"tiles":[{"x":2,"y":2,"type":"aluminum","control":false,"rotation":false,"velocity":{"x":4,"y":0}},{"x":34,"y":2,"type":"wood","control":true,"rotation":false}],"goals":[{"x":13,"y":2.5,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"aluminum"},{"type":"velocity","target":0}]},{"x":19,"y":2.5,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"wood"},{"type":"velocity","target":0}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxMS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///11\n')},function(module){eval('module.exports = {"index":4,"width":18,"height":18,"time":30,"modes":{"force":4},"annotations":[{"type":"text","text":"It\'s time for torque.","x":5,"y":12}],"tiles":[{"x":2,"y":10,"type":"aluminum","track":true,"control":true,"rotation":true,"show":{"mass":true}}],"shapes":[{"data":"1, 0; 0, 8; 4, 8; 3, 0","x":2,"y":4,"static":true}],"goals":[{"x":15,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"angular-velocity","target":{"minimum":0.1}}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxMi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///12\n')},function(module){eval('module.exports = {"index":3,"width":32,"height":18,"time":30,"modes":{"force":1},"annotations":[{"type":"text","text":"Isn\'t it cool how you can use any of these blocks to hit that goal?","x":6,"y":6}],"tiles":[{"x":2,"y":2,"type":"aluminum","track":true,"control":true,"rotation":false,"show":{"mass":true}},{"x":2,"y":6,"type":"wood","control":true,"rotation":false,"show":{"mass":true}},{"x":2,"y":10,"type":"steel","control":true,"rotation":false,"show":{"mass":true}}],"goals":[{"x":28,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"momentum","target":{"minimum":490}}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxMy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///13\n')},function(module){eval('module.exports = {"index":2,"width":32,"height":12,"time":30,"modes":{"force":4},"annotations":[{"type":"text","text":"Now do it again, but take it slow.\\nThis time you can\'t control the wooden crate.","x":1,"y":6}],"tiles":[{"x":3,"y":3,"type":"aluminum","track":true,"control":true,"rotation":false,"show":{"mass":true}},{"x":10,"y":3,"type":"wood","rotation":false,"show":{"mass":true}}],"goals":[{"x":28,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"wood"},{"type":"velocity","target":{"maximum":0.2}}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxNC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///14\n')},function(module){eval('module.exports = {"index":15,"width":320,"height":12,"time":30,"modes":{"force":40,"velocity":30,"position":20},"annotations":[{"type":"text","text":"This is a test level. How did you even get in here?","x":1,"y":6}],"tiles":[{"x":3,"y":3,"type":"aluminum","track":true,"control":true,"show":{"mass":true}},{"x":10,"y":3,"type":"wood","show":{"mass":true}},{"x":10,"y":7,"type":"plastic","control":true}],"shapes":[{"data":"0, 3; 3, 3; 3, 0; 6, 0; 6, 6; 0, 6","x":3,"y":7,"static":true}],"goals":[{"x":280,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"wood"}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxNS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///15\n')},function(module){eval('module.exports = {"index":6,"width":18,"height":180,"time":30,"paused":true,"modes":{"force":14},"annotations":[{"type":"text","text":"Get this to stop spinning\\nbefore it hits the ground.","x":1,"y":60},{"type":"text","text":"This block down here\\nis coming upwards fast.","x":7,"y":49}],"tiles":[{"x":4,"y":56,"type":"steel","track":true,"control":true,"rotation":true},{"x":2.5,"y":50,"type":"wood","velocity":{"x":0,"y":-40}}],"goals":[{"x":9,"y":10,"width":18,"height":6,"type":"required","objectives":[{"type":"type","target":"steel"},{"type":"angular-velocity","target":0}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxNi5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///16\n')},function(module){eval('module.exports = {"index":13,"width":36,"height":56,"paused":true,"modes":{"force":1},"annotations":[{"type":"text","text":"🤔","x":17.3,"y":10}],"tiles":[{"x":18,"y":2,"type":"plastic","control":true,"track":true},{"x":2,"y":20,"type":"wood","velocity":{"x":4,"y":-8}},{"x":34,"y":20,"type":"wood","velocity":{"x":-4,"y":-8}}],"shapes":[{"data":"0, 0; 0, 12; 4, 12; 4, 0","x":9.5,"y":6,"static":true},{"data":"0, 0; 0, 8; 4, 8; 4, 0","x":13.5,"y":4,"static":true},{"data":"0, 0; 0, 8; 4, 8; 4, 0","x":22.5,"y":4,"static":true},{"data":"0, 0; 0, 12; 4, 12; 4, 0","x":26.5,"y":6,"static":true}],"goals":[{"x":13.5,"y":10,"width":4,"height":4,"type":"required","objectives":[{"type":"type","target":"wood"},{"type":"velocity","target":0}]},{"x":22.5,"y":10,"width":4,"height":4,"type":"required","objectives":[{"type":"type","target":"wood"},{"type":"velocity","target":0}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxNy5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///17\n')},function(module){eval('module.exports = {"index":1,"width":32,"height":12,"time":30,"modes":{"force":4},"annotations":[{"type":"text","text":"Get the wooden crate into the goal.","x":1,"y":6}],"tiles":[{"x":3,"y":3,"type":"aluminum","track":true,"control":true,"rotation":false,"show":{"mass":true}},{"x":10,"y":3,"type":"wood","control":true,"rotation":false,"show":{"mass":true}}],"goals":[{"x":28,"y":3,"width":6,"height":6,"type":"required","objectives":[{"type":"type","target":"wood"}]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOC5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///18\n')},function(module){eval('module.exports = {"index":0,"width":32,"height":12,"time":30,"modes":{"force":4},"annotations":[{"type":"text","text":"Get the crate into the goal.","x":1,"y":6}],"tiles":[{"x":3,"y":3,"type":"aluminum","track":true,"control":true,"rotation":false,"show":{"mass":true}}],"goals":[{"x":28,"y":3,"width":6,"height":6,"type":"required","objectives":[]}]};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiIxOS5qcyIsInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///19\n')},function(module,exports,__webpack_require__){eval('var map = {\n\t"./0.json": 19,\n\t"./1.json": 18,\n\t"./10.json": 17,\n\t"./11.json": 16,\n\t"./15.json": 15,\n\t"./2.json": 14,\n\t"./3.json": 13,\n\t"./4.json": 12,\n\t"./5.json": 11,\n\t"./6.json": 10,\n\t"./7.json": 9,\n\t"./8.json": 8,\n\t"./9.json": 7\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\tvar module = __webpack_require__(id);\n\treturn module;\n}\nfunction webpackContextResolve(req) {\n\tvar id = map[req];\n\tif(!(id + 1)) { // check for number or string\n\t\tvar e = new Error(\'Cannot find module "\' + req + \'".\');\n\t\te.code = \'MODULE_NOT_FOUND\';\n\t\tthrow e;\n\t}\n\treturn id;\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 20;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2xldmVsIHN5bmMgXlxcLlxcLy4qXFwuanNvbiQ/M2E0ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZ0JBQWdCO0FBQ2hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsImZpbGUiOiIyMC5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBtYXAgPSB7XG5cdFwiLi8wLmpzb25cIjogMTksXG5cdFwiLi8xLmpzb25cIjogMTgsXG5cdFwiLi8xMC5qc29uXCI6IDE3LFxuXHRcIi4vMTEuanNvblwiOiAxNixcblx0XCIuLzE1Lmpzb25cIjogMTUsXG5cdFwiLi8yLmpzb25cIjogMTQsXG5cdFwiLi8zLmpzb25cIjogMTMsXG5cdFwiLi80Lmpzb25cIjogMTIsXG5cdFwiLi81Lmpzb25cIjogMTEsXG5cdFwiLi82Lmpzb25cIjogMTAsXG5cdFwiLi83Lmpzb25cIjogOSxcblx0XCIuLzguanNvblwiOiA4LFxuXHRcIi4vOS5qc29uXCI6IDdcbn07XG5cblxuZnVuY3Rpb24gd2VicGFja0NvbnRleHQocmVxKSB7XG5cdHZhciBpZCA9IHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpO1xuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX3JlcXVpcmVfXyhpZCk7XG5cdHJldHVybiBtb2R1bGU7XG59XG5mdW5jdGlvbiB3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSB7XG5cdHZhciBpZCA9IG1hcFtyZXFdO1xuXHRpZighKGlkICsgMSkpIHsgLy8gY2hlY2sgZm9yIG51bWJlciBvciBzdHJpbmdcblx0XHR2YXIgZSA9IG5ldyBFcnJvcignQ2Fubm90IGZpbmQgbW9kdWxlIFwiJyArIHJlcSArICdcIi4nKTtcblx0XHRlLmNvZGUgPSAnTU9EVUxFX05PVF9GT1VORCc7XG5cdFx0dGhyb3cgZTtcblx0fVxuXHRyZXR1cm4gaWQ7XG59XG53ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRyZXR1cm4gT2JqZWN0LmtleXMobWFwKTtcbn07XG53ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xubW9kdWxlLmV4cG9ydHMgPSB3ZWJwYWNrQ29udGV4dDtcbndlYnBhY2tDb250ZXh0LmlkID0gMjA7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///20\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "src/res/img/banner-sprites.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2ltZy9iYW5uZXItc3ByaXRlcy5wbmc/NThjZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyMS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3B1YmxpY19wYXRoX18gKyBcInNyYy9yZXMvaW1nL2Jhbm5lci1zcHJpdGVzLnBuZ1wiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///21\n')},function(module,exports,__webpack_require__){eval('module.exports = __webpack_require__.p + "src/res/img/item-sprites.png";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvcmVzL2ltZy9pdGVtLXNwcml0ZXMucG5nP2MyZWMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiMjIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19wdWJsaWNfcGF0aF9fICsgXCJzcmMvcmVzL2ltZy9pdGVtLXNwcml0ZXMucG5nXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///22\n')},function(module,exports){eval("/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nvar byteToHex = [];\nfor (var i = 0; i < 256; ++i) {\n  byteToHex[i] = (i + 0x100).toString(16).substr(1);\n}\n\nfunction bytesToUuid(buf, offset) {\n  var i = offset || 0;\n  var bth = byteToHex;\n  return bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] + '-' +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]] +\n          bth[buf[i++]] + bth[buf[i++]];\n}\n\nmodule.exports = bytesToUuid;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvYnl0ZXNUb1V1aWQuanM/MjM2NiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZSxTQUFTO0FBQ3hCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBIiwiZmlsZSI6IjIzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBDb252ZXJ0IGFycmF5IG9mIDE2IGJ5dGUgdmFsdWVzIHRvIFVVSUQgc3RyaW5nIGZvcm1hdCBvZiB0aGUgZm9ybTpcbiAqIFhYWFhYWFhYLVhYWFgtWFhYWC1YWFhYLVhYWFhYWFhYWFhYWFxuICovXG52YXIgYnl0ZVRvSGV4ID0gW107XG5mb3IgKHZhciBpID0gMDsgaSA8IDI1NjsgKytpKSB7XG4gIGJ5dGVUb0hleFtpXSA9IChpICsgMHgxMDApLnRvU3RyaW5nKDE2KS5zdWJzdHIoMSk7XG59XG5cbmZ1bmN0aW9uIGJ5dGVzVG9VdWlkKGJ1Ziwgb2Zmc2V0KSB7XG4gIHZhciBpID0gb2Zmc2V0IHx8IDA7XG4gIHZhciBidGggPSBieXRlVG9IZXg7XG4gIHJldHVybiBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICsgJy0nICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArICctJyArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV0gKyAnLScgK1xuICAgICAgICAgIGJ0aFtidWZbaSsrXV0gKyBidGhbYnVmW2krK11dICtcbiAgICAgICAgICBidGhbYnVmW2krK11dICsgYnRoW2J1ZltpKytdXSArXG4gICAgICAgICAgYnRoW2J1ZltpKytdXSArIGJ0aFtidWZbaSsrXV07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gYnl0ZXNUb1V1aWQ7XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///23\n")},function(module,exports){eval("// Unique ID creation requires a high quality random # generator.  In the\n// browser this is a little complicated due to unknown quality of Math.random()\n// and inconsistent support for the `crypto` API.  We do the best we can via\n// feature-detection\n\n// getRandomValues needs to be invoked in a context where \"this\" is a Crypto implementation.\nvar getRandomValues = (typeof(crypto) != 'undefined' && crypto.getRandomValues.bind(crypto)) ||\n                      (typeof(msCrypto) != 'undefined' && msCrypto.getRandomValues.bind(msCrypto));\nif (getRandomValues) {\n  // WHATWG crypto RNG - http://wiki.whatwg.org/wiki/Crypto\n  var rnds8 = new Uint8Array(16); // eslint-disable-line no-undef\n\n  module.exports = function whatwgRNG() {\n    getRandomValues(rnds8);\n    return rnds8;\n  };\n} else {\n  // Math.random()-based (RNG)\n  //\n  // If all else fails, use Math.random().  It's fast, but is of unspecified\n  // quality.\n  var rnds = new Array(16);\n\n  module.exports = function mathRNG() {\n    for (var i = 0, r; i < 16; i++) {\n      if ((i & 0x03) === 0) r = Math.random() * 0x100000000;\n      rnds[i] = r >>> ((i & 0x03) << 3) & 0xff;\n    }\n\n    return rnds;\n  };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdXVpZC9saWIvcm5nLWJyb3dzZXIuanM/ZTFmNCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0JBQXNCLFFBQVE7QUFDOUI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSIsImZpbGUiOiIyNC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIFVuaXF1ZSBJRCBjcmVhdGlvbiByZXF1aXJlcyBhIGhpZ2ggcXVhbGl0eSByYW5kb20gIyBnZW5lcmF0b3IuICBJbiB0aGVcbi8vIGJyb3dzZXIgdGhpcyBpcyBhIGxpdHRsZSBjb21wbGljYXRlZCBkdWUgdG8gdW5rbm93biBxdWFsaXR5IG9mIE1hdGgucmFuZG9tKClcbi8vIGFuZCBpbmNvbnNpc3RlbnQgc3VwcG9ydCBmb3IgdGhlIGBjcnlwdG9gIEFQSS4gIFdlIGRvIHRoZSBiZXN0IHdlIGNhbiB2aWFcbi8vIGZlYXR1cmUtZGV0ZWN0aW9uXG5cbi8vIGdldFJhbmRvbVZhbHVlcyBuZWVkcyB0byBiZSBpbnZva2VkIGluIGEgY29udGV4dCB3aGVyZSBcInRoaXNcIiBpcyBhIENyeXB0byBpbXBsZW1lbnRhdGlvbi5cbnZhciBnZXRSYW5kb21WYWx1ZXMgPSAodHlwZW9mKGNyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgY3J5cHRvLmdldFJhbmRvbVZhbHVlcy5iaW5kKGNyeXB0bykpIHx8XG4gICAgICAgICAgICAgICAgICAgICAgKHR5cGVvZihtc0NyeXB0bykgIT0gJ3VuZGVmaW5lZCcgJiYgbXNDcnlwdG8uZ2V0UmFuZG9tVmFsdWVzLmJpbmQobXNDcnlwdG8pKTtcbmlmIChnZXRSYW5kb21WYWx1ZXMpIHtcbiAgLy8gV0hBVFdHIGNyeXB0byBSTkcgLSBodHRwOi8vd2lraS53aGF0d2cub3JnL3dpa2kvQ3J5cHRvXG4gIHZhciBybmRzOCA9IG5ldyBVaW50OEFycmF5KDE2KTsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby11bmRlZlxuXG4gIG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gd2hhdHdnUk5HKCkge1xuICAgIGdldFJhbmRvbVZhbHVlcyhybmRzOCk7XG4gICAgcmV0dXJuIHJuZHM4O1xuICB9O1xufSBlbHNlIHtcbiAgLy8gTWF0aC5yYW5kb20oKS1iYXNlZCAoUk5HKVxuICAvL1xuICAvLyBJZiBhbGwgZWxzZSBmYWlscywgdXNlIE1hdGgucmFuZG9tKCkuICBJdCdzIGZhc3QsIGJ1dCBpcyBvZiB1bnNwZWNpZmllZFxuICAvLyBxdWFsaXR5LlxuICB2YXIgcm5kcyA9IG5ldyBBcnJheSgxNik7XG5cbiAgbW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBtYXRoUk5HKCkge1xuICAgIGZvciAodmFyIGkgPSAwLCByOyBpIDwgMTY7IGkrKykge1xuICAgICAgaWYgKChpICYgMHgwMykgPT09IDApIHIgPSBNYXRoLnJhbmRvbSgpICogMHgxMDAwMDAwMDA7XG4gICAgICBybmRzW2ldID0gciA+Pj4gKChpICYgMHgwMykgPDwgMykgJiAweGZmO1xuICAgIH1cblxuICAgIHJldHVybiBybmRzO1xuICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///24\n")},function(module,exports){eval("module.exports = library;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vZXh0ZXJuYWwgXCJsaWJyYXJ5XCI/OWIzMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIyNS5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gbGlicmFyeTsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///25\n")}]);